
myds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b78  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  08008c88  08008c88  00009c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab8  08009ab8  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009ab8  08009ab8  0000aab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ac0  08009ac0  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ac0  08009ac0  0000aac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ac4  08009ac4  0000aac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009ac8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  200001dc  08009ca4  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a48  08009ca4  0000ba48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010924  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307f  00000000  00000000  0001bb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0001eba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d00  00000000  00000000  0001fc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000470e  00000000  00000000  00020980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017073  00000000  00000000  0002508e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092577  00000000  00000000  0003c101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce678  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005790  00000000  00000000  000ce6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000d3e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c70 	.word	0x08008c70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008c70 	.word	0x08008c70

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <Num2Abs>:

#define LOWPASS_FILTER	0.7

//***********************************************************λ��ʽPID************************************************************//
float Num2Abs(float x)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    if(x < 0)
 8001124:	f04f 0100 	mov.w	r1, #0
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ffa9 	bl	8001080 <__aeabi_fcmplt>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <Num2Abs+0x20>
        return -x;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800113a:	e000      	b.n	800113e <Num2Abs+0x22>
    return x;
 800113c:	687b      	ldr	r3, [r7, #4]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <PID_Init>:
PID_InitTypeDef Turn_PID;
PID_InitTypeDef Turn_PID1;
PID_InitTypeDef Turn_PID2;

void PID_Init(PID_InitTypeDef *PID_Struct, float Kpa,float Kpb,float Kd,float gkd,float Out_Limit)		//PID��ʼ��
{
 8001146:	b480      	push	{r7}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	603b      	str	r3, [r7, #0]
	PID_Struct->Kpa = Kpa;  
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	609a      	str	r2, [r3, #8]
    PID_Struct->Kpb = Kpb;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	60da      	str	r2, [r3, #12]
	PID_Struct->Kd = Kd;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	615a      	str	r2, [r3, #20]
    PID_Struct->gkd = gkd;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	619a      	str	r2, [r3, #24]
	
	PID_Struct->Err = 0;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
	PID_Struct->Err_last = 0;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
	
	PID_Struct->PID_Out = 0;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24
	PID_Struct->Out_Limit = Out_Limit;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <PID_Calculate>:


void PID_Calculate(PID_InitTypeDef *PID_Struct, float Exp_Val, float Act_Val)		//PID����
{ 
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	PID_Struct->Err = Exp_Val-Act_Val;		//errֵΪ����ƫ���뵱ǰƫ��Ĳ�ֵ		
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	68b8      	ldr	r0, [r7, #8]
 80011a4:	f7ff fcc4 	bl	8000b30 <__aeabi_fsub>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	601a      	str	r2, [r3, #0]
    //�����������
//	PID_Struct->PID_Out = (PID_Struct->Err*PID_Struct->Err*PID_Struct->Err)*PID_Struct->Kpa +
//                              PID_Struct->Err *  PID_Struct->Kpb +
//									(PID_Struct->Err - PID_Struct->Err_last)*(PID_Struct->Kd);

    PID_Struct->PID_Out = PID_Struct->Err * PID_Struct->Kpa + PID_Struct->Err * Num2Abs(PID_Struct->Err)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4619      	mov	r1, r3
 80011ba:	4610      	mov	r0, r2
 80011bc:	f7ff fdc2 	bl	8000d44 <__aeabi_fmul>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461d      	mov	r5, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681c      	ldr	r4, [r3, #0]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ffa5 	bl	800111c <Num2Abs>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4619      	mov	r1, r3
 80011d6:	4620      	mov	r0, r4
 80011d8:	f7ff fdb4 	bl	8000d44 <__aeabi_fmul>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
            * PID_Struct->Kpb + (PID_Struct->Err - PID_Struct->Err_last) * (PID_Struct->Kd);// + gz * PID_Struct->gkd
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	4619      	mov	r1, r3
 80011e6:	4610      	mov	r0, r2
 80011e8:	f7ff fdac 	bl	8000d44 <__aeabi_fmul>
 80011ec:	4603      	mov	r3, r0
    PID_Struct->PID_Out = PID_Struct->Err * PID_Struct->Kpa + PID_Struct->Err * Num2Abs(PID_Struct->Err)
 80011ee:	4619      	mov	r1, r3
 80011f0:	4628      	mov	r0, r5
 80011f2:	f7ff fc9f 	bl	8000b34 <__addsf3>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461c      	mov	r4, r3
            * PID_Struct->Kpb + (PID_Struct->Err - PID_Struct->Err_last) * (PID_Struct->Kd);// + gz * PID_Struct->gkd
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4619      	mov	r1, r3
 8001204:	4610      	mov	r0, r2
 8001206:	f7ff fc93 	bl	8000b30 <__aeabi_fsub>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f7ff fd95 	bl	8000d44 <__aeabi_fmul>
 800121a:	4603      	mov	r3, r0
 800121c:	4619      	mov	r1, r3
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff fc88 	bl	8000b34 <__addsf3>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
    PID_Struct->PID_Out = PID_Struct->Err * PID_Struct->Kpa + PID_Struct->Err * Num2Abs(PID_Struct->Err)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	625a      	str	r2, [r3, #36]	@ 0x24
    
    PID_Struct->Err_last = PID_Struct->Err;	//������һ��err
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	605a      	str	r2, [r3, #4]
    
	//����޷�
	if(PID_Struct->PID_Out > PID_Struct->Out_Limit)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123c:	4619      	mov	r1, r3
 800123e:	4610      	mov	r0, r2
 8001240:	f7ff ff3c 	bl	80010bc <__aeabi_fcmpgt>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <PID_Calculate+0xc0>
		PID_Struct->PID_Out = PID_Struct->Out_Limit; 
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24
	else if(PID_Struct->PID_Out < -PID_Struct->Out_Limit)
		PID_Struct->PID_Out = -PID_Struct->Out_Limit;
}
 8001252:	e013      	b.n	800127c <PID_Calculate+0xe8>
	else if(PID_Struct->PID_Out < -PID_Struct->Out_Limit)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001260:	4619      	mov	r1, r3
 8001262:	4610      	mov	r0, r2
 8001264:	f7ff ff0c 	bl	8001080 <__aeabi_fcmplt>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d100      	bne.n	8001270 <PID_Calculate+0xdc>
}
 800126e:	e005      	b.n	800127c <PID_Calculate+0xe8>
		PID_Struct->PID_Out = -PID_Struct->Out_Limit;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001274:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bdb0      	pop	{r4, r5, r7, pc}

08001284 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001294:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <MX_ADC1_Init+0x74>)
 8001296:	4a19      	ldr	r2, [pc, #100]	@ (80012fc <MX_ADC1_Init+0x78>)
 8001298:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <MX_ADC1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <MX_ADC1_Init+0x74>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_ADC1_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <MX_ADC1_Init+0x74>)
 80012ae:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80012b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b4:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <MX_ADC1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_ADC1_Init+0x74>)
 80012bc:	2201      	movs	r2, #1
 80012be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c0:	480d      	ldr	r0, [pc, #52]	@ (80012f8 <MX_ADC1_Init+0x74>)
 80012c2:	f001 fc33 	bl	8002b2c <HAL_ADC_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80012cc:	f000 fd07 	bl	8001cde <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012d0:	2305      	movs	r3, #5
 80012d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_ADC1_Init+0x74>)
 80012e2:	f001 febb 	bl	800305c <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012ec:	f000 fcf7 	bl	8001cde <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000250 	.word	0x20000250
 80012fc:	40012400 	.word	0x40012400

08001300 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a14      	ldr	r2, [pc, #80]	@ (800136c <HAL_ADC_MspInit+0x6c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d121      	bne.n	8001364 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001320:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <HAL_ADC_MspInit+0x70>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <HAL_ADC_MspInit+0x70>)
 8001326:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <HAL_ADC_MspInit+0x70>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b0d      	ldr	r3, [pc, #52]	@ (8001370 <HAL_ADC_MspInit+0x70>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a0c      	ldr	r2, [pc, #48]	@ (8001370 <HAL_ADC_MspInit+0x70>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_ADC_MspInit+0x70>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001350:	2320      	movs	r3, #32
 8001352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001354:	2303      	movs	r3, #3
 8001356:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4805      	ldr	r0, [pc, #20]	@ (8001374 <HAL_ADC_MspInit+0x74>)
 8001360:	f002 f9cc 	bl	80036fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40012400 	.word	0x40012400
 8001370:	40021000 	.word	0x40021000
 8001374:	40010800 	.word	0x40010800

08001378 <Read_Speed>:
#include "encoder.h"

int Read_Speed(TIM_HandleTypeDef *htim)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    int temp;
    temp = (short)__HAL_TIM_GetCounter(htim);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001386:	b21b      	sxth	r3, r3
 8001388:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SetCounter(htim, 0);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24
    return temp;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
	...

080013a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b4:	4b3a      	ldr	r3, [pc, #232]	@ (80014a0 <MX_GPIO_Init+0x100>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a39      	ldr	r2, [pc, #228]	@ (80014a0 <MX_GPIO_Init+0x100>)
 80013ba:	f043 0320 	orr.w	r3, r3, #32
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b37      	ldr	r3, [pc, #220]	@ (80014a0 <MX_GPIO_Init+0x100>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0320 	and.w	r3, r3, #32
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b34      	ldr	r3, [pc, #208]	@ (80014a0 <MX_GPIO_Init+0x100>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a33      	ldr	r2, [pc, #204]	@ (80014a0 <MX_GPIO_Init+0x100>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b31      	ldr	r3, [pc, #196]	@ (80014a0 <MX_GPIO_Init+0x100>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <MX_GPIO_Init+0x100>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a2d      	ldr	r2, [pc, #180]	@ (80014a0 <MX_GPIO_Init+0x100>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <MX_GPIO_Init+0x100>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001402:	4828      	ldr	r0, [pc, #160]	@ (80014a4 <MX_GPIO_Init+0x104>)
 8001404:	f002 fafe 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|BIN1_Pin|BIN2_Pin;
 8001408:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800140c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2302      	movs	r3, #2
 8001418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	4619      	mov	r1, r3
 8001420:	4820      	ldr	r0, [pc, #128]	@ (80014a4 <MX_GPIO_Init+0x104>)
 8001422:	f002 f96b 	bl	80036fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin;
 8001426:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142c:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <MX_GPIO_Init+0x108>)
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	481c      	ldr	r0, [pc, #112]	@ (80014ac <MX_GPIO_Init+0x10c>)
 800143c:	f002 f95e 	bl	80036fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = KEY3_Pin|KEY4_Pin|KEY5_Pin;
 8001440:	2338      	movs	r3, #56	@ 0x38
 8001442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <MX_GPIO_Init+0x108>)
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001448:	2301      	movs	r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4619      	mov	r1, r3
 8001452:	4814      	ldr	r0, [pc, #80]	@ (80014a4 <MX_GPIO_Init+0x104>)
 8001454:	f002 f952 	bl	80036fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	2009      	movs	r0, #9
 800145e:	f002 f916 	bl	800368e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001462:	2009      	movs	r0, #9
 8001464:	f002 f92f 	bl	80036c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	200a      	movs	r0, #10
 800146e:	f002 f90e 	bl	800368e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001472:	200a      	movs	r0, #10
 8001474:	f002 f927 	bl	80036c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2017      	movs	r0, #23
 800147e:	f002 f906 	bl	800368e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001482:	2017      	movs	r0, #23
 8001484:	f002 f91f 	bl	80036c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2028      	movs	r0, #40	@ 0x28
 800148e:	f002 f8fe 	bl	800368e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001492:	2028      	movs	r0, #40	@ 0x28
 8001494:	f002 f917 	bl	80036c6 <HAL_NVIC_EnableIRQ>

}
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010c00 	.word	0x40010c00
 80014a8:	10210000 	.word	0x10210000
 80014ac:	40010800 	.word	0x40010800

080014b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <MX_I2C1_Init+0x50>)
 80014b6:	4a13      	ldr	r2, [pc, #76]	@ (8001504 <MX_I2C1_Init+0x54>)
 80014b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_I2C1_Init+0x50>)
 80014bc:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <MX_I2C1_Init+0x58>)
 80014be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <MX_I2C1_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001500 <MX_I2C1_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <MX_I2C1_Init+0x50>)
 80014ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <MX_I2C1_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <MX_I2C1_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <MX_I2C1_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <MX_I2C1_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	@ (8001500 <MX_I2C1_Init+0x50>)
 80014ee:	f002 fab9 	bl	8003a64 <HAL_I2C_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014f8:	f000 fbf1 	bl	8001cde <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000280 	.word	0x20000280
 8001504:	40005400 	.word	0x40005400
 8001508:	00061a80 	.word	0x00061a80

0800150c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a1d      	ldr	r2, [pc, #116]	@ (800159c <HAL_I2C_MspInit+0x90>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d132      	bne.n	8001592 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <HAL_I2C_MspInit+0x94>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a1b      	ldr	r2, [pc, #108]	@ (80015a0 <HAL_I2C_MspInit+0x94>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <HAL_I2C_MspInit+0x94>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001544:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154a:	2312      	movs	r3, #18
 800154c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4812      	ldr	r0, [pc, #72]	@ (80015a4 <HAL_I2C_MspInit+0x98>)
 800155a:	f002 f8cf 	bl	80036fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800155e:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_I2C_MspInit+0x9c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
 8001574:	4a0c      	ldr	r2, [pc, #48]	@ (80015a8 <HAL_I2C_MspInit+0x9c>)
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_I2C_MspInit+0x94>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_I2C_MspInit+0x94>)
 8001580:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_I2C_MspInit+0x94>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	@ 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40005400 	.word	0x40005400
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010c00 	.word	0x40010c00
 80015a8:	40010000 	.word	0x40010000

080015ac <ADC_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_Read(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
  int sum = 0, max = 0, min = 4095,adc_result = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
  uint8_t i=0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	72fb      	strb	r3, [r7, #11]
  HAL_ADC_Start(&hadc1);     //启动ADC转换
 80015c8:	482a      	ldr	r0, [pc, #168]	@ (8001674 <ADC_Read+0xc8>)
 80015ca:	f001 fb87 	bl	8002cdc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 12);
 80015ce:	210c      	movs	r1, #12
 80015d0:	4828      	ldr	r0, [pc, #160]	@ (8001674 <ADC_Read+0xc8>)
 80015d2:	f001 fc31 	bl	8002e38 <HAL_ADC_PollForConversion>
  for(i=1;i<=5;i++)
 80015d6:	2301      	movs	r3, #1
 80015d8:	72fb      	strb	r3, [r7, #11]
 80015da:	e02d      	b.n	8001638 <ADC_Read+0x8c>
  {
    adc[i] = HAL_ADC_GetValue(&hadc1);
 80015dc:	4825      	ldr	r0, [pc, #148]	@ (8001674 <ADC_Read+0xc8>)
 80015de:	f001 fd31 	bl	8003044 <HAL_ADC_GetValue>
 80015e2:	4602      	mov	r2, r0
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	b291      	uxth	r1, r2
 80015e8:	4a23      	ldr	r2, [pc, #140]	@ (8001678 <ADC_Read+0xcc>)
 80015ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    sum += adc[i];
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	4a21      	ldr	r2, [pc, #132]	@ (8001678 <ADC_Read+0xcc>)
 80015f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015f6:	461a      	mov	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	4413      	add	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]
    if(adc[i] > max) max = adc[i];
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	4a1d      	ldr	r2, [pc, #116]	@ (8001678 <ADC_Read+0xcc>)
 8001602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001606:	461a      	mov	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4293      	cmp	r3, r2
 800160c:	da04      	bge.n	8001618 <ADC_Read+0x6c>
 800160e:	7afb      	ldrb	r3, [r7, #11]
 8001610:	4a19      	ldr	r2, [pc, #100]	@ (8001678 <ADC_Read+0xcc>)
 8001612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001616:	613b      	str	r3, [r7, #16]
    if(adc[i] < min) min = adc[i];
 8001618:	7afb      	ldrb	r3, [r7, #11]
 800161a:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <ADC_Read+0xcc>)
 800161c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001620:	461a      	mov	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4293      	cmp	r3, r2
 8001626:	dd04      	ble.n	8001632 <ADC_Read+0x86>
 8001628:	7afb      	ldrb	r3, [r7, #11]
 800162a:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <ADC_Read+0xcc>)
 800162c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001630:	60fb      	str	r3, [r7, #12]
  for(i=1;i<=5;i++)
 8001632:	7afb      	ldrb	r3, [r7, #11]
 8001634:	3301      	adds	r3, #1
 8001636:	72fb      	strb	r3, [r7, #11]
 8001638:	7afb      	ldrb	r3, [r7, #11]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d9ce      	bls.n	80015dc <ADC_Read+0x30>
  }
  adc_result = (sum - max - min) / 3.0;
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad2      	subs	r2, r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fedb 	bl	8000404 <__aeabi_i2d>
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <ADC_Read+0xd0>)
 8001654:	f7ff f86a 	bl	800072c <__aeabi_ddiv>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff f9ea 	bl	8000a38 <__aeabi_d2iz>
 8001664:	4603      	mov	r3, r0
 8001666:	607b      	str	r3, [r7, #4]
  return adc_result;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	b29b      	uxth	r3, r3
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000250 	.word	0x20000250
 8001678:	20000314 	.word	0x20000314
 800167c:	40080000 	.word	0x40080000

08001680 <Transform_adc>:

float Transform_adc(float Value) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  float result = 0;
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  if (Value > 0 && Value < 2090) {
 800168e:	f04f 0100 	mov.w	r1, #0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fd12 	bl	80010bc <__aeabi_fcmpgt>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d01a      	beq.n	80016d4 <Transform_adc+0x54>
 800169e:	4927      	ldr	r1, [pc, #156]	@ (800173c <Transform_adc+0xbc>)
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fced 	bl	8001080 <__aeabi_fcmplt>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <Transform_adc+0x54>
    result = -Value / 4095 * 360 + 3;//+2
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80016b2:	4923      	ldr	r1, [pc, #140]	@ (8001740 <Transform_adc+0xc0>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fbf9 	bl	8000eac <__aeabi_fdiv>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4921      	ldr	r1, [pc, #132]	@ (8001744 <Transform_adc+0xc4>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fb40 	bl	8000d44 <__aeabi_fmul>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4920      	ldr	r1, [pc, #128]	@ (8001748 <Transform_adc+0xc8>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fa33 	bl	8000b34 <__addsf3>
 80016ce:	4603      	mov	r3, r0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e02e      	b.n	8001732 <Transform_adc+0xb2>
  }
  else if (Value >2090 && Value < 4095) {
 80016d4:	4919      	ldr	r1, [pc, #100]	@ (800173c <Transform_adc+0xbc>)
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fcf0 	bl	80010bc <__aeabi_fcmpgt>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01c      	beq.n	800171c <Transform_adc+0x9c>
 80016e2:	4917      	ldr	r1, [pc, #92]	@ (8001740 <Transform_adc+0xc0>)
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fccb 	bl	8001080 <__aeabi_fcmplt>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d015      	beq.n	800171c <Transform_adc+0x9c>
    result = 360 - Value / 4095 * 360 + 3;  //+3
 80016f0:	4913      	ldr	r1, [pc, #76]	@ (8001740 <Transform_adc+0xc0>)
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fbda 	bl	8000eac <__aeabi_fdiv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4912      	ldr	r1, [pc, #72]	@ (8001744 <Transform_adc+0xc4>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb21 	bl	8000d44 <__aeabi_fmul>
 8001702:	4603      	mov	r3, r0
 8001704:	4619      	mov	r1, r3
 8001706:	480f      	ldr	r0, [pc, #60]	@ (8001744 <Transform_adc+0xc4>)
 8001708:	f7ff fa12 	bl	8000b30 <__aeabi_fsub>
 800170c:	4603      	mov	r3, r0
 800170e:	490e      	ldr	r1, [pc, #56]	@ (8001748 <Transform_adc+0xc8>)
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fa0f 	bl	8000b34 <__addsf3>
 8001716:	4603      	mov	r3, r0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	e00a      	b.n	8001732 <Transform_adc+0xb2>
  }
  else if (Value == 0) {
 800171c:	f04f 0100 	mov.w	r1, #0
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fca3 	bl	800106c <__aeabi_fcmpeq>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <Transform_adc+0xb2>
    result = 0;
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  //   result = 90;
  // }
  // else if (Value == 1040) {
  //   result = -90;
  // }
  return result;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	4502a000 	.word	0x4502a000
 8001740:	457ff000 	.word	0x457ff000
 8001744:	43b40000 	.word	0x43b40000
 8001748:	40400000 	.word	0x40400000

0800174c <Transform_encoder>:

float Transform_encoder(float Encoder_Angle) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  float result = 0;
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
  if (Encoder_Angle > 180 && Encoder_Angle < 360) {
 800175a:	4918      	ldr	r1, [pc, #96]	@ (80017bc <Transform_encoder+0x70>)
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fcad 	bl	80010bc <__aeabi_fcmpgt>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00d      	beq.n	8001784 <Transform_encoder+0x38>
 8001768:	4915      	ldr	r1, [pc, #84]	@ (80017c0 <Transform_encoder+0x74>)
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fc88 	bl	8001080 <__aeabi_fcmplt>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d006      	beq.n	8001784 <Transform_encoder+0x38>
    result = Encoder_Angle - 360;
 8001776:	4912      	ldr	r1, [pc, #72]	@ (80017c0 <Transform_encoder+0x74>)
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff f9d9 	bl	8000b30 <__aeabi_fsub>
 800177e:	4603      	mov	r3, r0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e016      	b.n	80017b2 <Transform_encoder+0x66>
  }
  else if (Encoder_Angle < -180 && Encoder_Angle > -360) {
 8001784:	490f      	ldr	r1, [pc, #60]	@ (80017c4 <Transform_encoder+0x78>)
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fc7a 	bl	8001080 <__aeabi_fcmplt>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00d      	beq.n	80017ae <Transform_encoder+0x62>
 8001792:	490d      	ldr	r1, [pc, #52]	@ (80017c8 <Transform_encoder+0x7c>)
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fc91 	bl	80010bc <__aeabi_fcmpgt>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <Transform_encoder+0x62>
    result = Encoder_Angle + 360;
 80017a0:	4907      	ldr	r1, [pc, #28]	@ (80017c0 <Transform_encoder+0x74>)
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff f9c6 	bl	8000b34 <__addsf3>
 80017a8:	4603      	mov	r3, r0
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e001      	b.n	80017b2 <Transform_encoder+0x66>
  }
  else {
    result = Encoder_Angle;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80017b2:	68fb      	ldr	r3, [r7, #12]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	43340000 	.word	0x43340000
 80017c0:	43b40000 	.word	0x43b40000
 80017c4:	c3340000 	.word	0xc3340000
 80017c8:	c3b40000 	.word	0xc3b40000

080017cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == KEY1_Pin){
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017dc:	d10e      	bne.n	80017fc <HAL_GPIO_EXTI_Callback+0x30>
      if (currentkey == 1) {
 80017de:	4b26      	ldr	r3, [pc, #152]	@ (8001878 <HAL_GPIO_EXTI_Callback+0xac>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d104      	bne.n	80017f0 <HAL_GPIO_EXTI_Callback+0x24>
        Load(1000);
 80017e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ea:	f000 fa7f 	bl	8001cec <Load>
    else if (GPIO_Pin == KEY5_Pin) {
      KEY = 0;
      currentkey = 0;
      Load(0);
    }
}
 80017ee:	e03f      	b.n	8001870 <HAL_GPIO_EXTI_Callback+0xa4>
       KEY = KEY + 1;
 80017f0:	4b22      	ldr	r3, [pc, #136]	@ (800187c <HAL_GPIO_EXTI_Callback+0xb0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	4a21      	ldr	r2, [pc, #132]	@ (800187c <HAL_GPIO_EXTI_Callback+0xb0>)
 80017f8:	6013      	str	r3, [r2, #0]
}
 80017fa:	e039      	b.n	8001870 <HAL_GPIO_EXTI_Callback+0xa4>
    else if (GPIO_Pin == KEY2_Pin) {
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001802:	d10d      	bne.n	8001820 <HAL_GPIO_EXTI_Callback+0x54>
      if (currentkey == 1) {
 8001804:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <HAL_GPIO_EXTI_Callback+0xac>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d103      	bne.n	8001814 <HAL_GPIO_EXTI_Callback+0x48>
      Load(-1000);
 800180c:	481c      	ldr	r0, [pc, #112]	@ (8001880 <HAL_GPIO_EXTI_Callback+0xb4>)
 800180e:	f000 fa6d 	bl	8001cec <Load>
}
 8001812:	e02d      	b.n	8001870 <HAL_GPIO_EXTI_Callback+0xa4>
        KEY = KEY + 2;
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3302      	adds	r3, #2
 800181a:	4a18      	ldr	r2, [pc, #96]	@ (800187c <HAL_GPIO_EXTI_Callback+0xb0>)
 800181c:	6013      	str	r3, [r2, #0]
}
 800181e:	e027      	b.n	8001870 <HAL_GPIO_EXTI_Callback+0xa4>
    else if (GPIO_Pin == KEY3_Pin) {
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	2b08      	cmp	r3, #8
 8001824:	d10d      	bne.n	8001842 <HAL_GPIO_EXTI_Callback+0x76>
      if (currentkey == 1) {
 8001826:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <HAL_GPIO_EXTI_Callback+0xac>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d103      	bne.n	8001836 <HAL_GPIO_EXTI_Callback+0x6a>
        Load(0);
 800182e:	2000      	movs	r0, #0
 8001830:	f000 fa5c 	bl	8001cec <Load>
}
 8001834:	e01c      	b.n	8001870 <HAL_GPIO_EXTI_Callback+0xa4>
        KEY = KEY + 3;
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3303      	adds	r3, #3
 800183c:	4a0f      	ldr	r2, [pc, #60]	@ (800187c <HAL_GPIO_EXTI_Callback+0xb0>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	e016      	b.n	8001870 <HAL_GPIO_EXTI_Callback+0xa4>
    else if (GPIO_Pin ==KEY4_Pin) {
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	2b10      	cmp	r3, #16
 8001846:	d107      	bne.n	8001858 <HAL_GPIO_EXTI_Callback+0x8c>
      currentkey = KEY;
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <HAL_GPIO_EXTI_Callback+0xb0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <HAL_GPIO_EXTI_Callback+0xac>)
 800184e:	6013      	str	r3, [r2, #0]
      KEY = 0;
 8001850:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
}
 8001856:	e00b      	b.n	8001870 <HAL_GPIO_EXTI_Callback+0xa4>
    else if (GPIO_Pin == KEY5_Pin) {
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	2b20      	cmp	r3, #32
 800185c:	d108      	bne.n	8001870 <HAL_GPIO_EXTI_Callback+0xa4>
      KEY = 0;
 800185e:	4b07      	ldr	r3, [pc, #28]	@ (800187c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
      currentkey = 0;
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <HAL_GPIO_EXTI_Callback+0xac>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
      Load(0);
 800186a:	2000      	movs	r0, #0
 800186c:	f000 fa3e 	bl	8001cec <Load>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000033c 	.word	0x2000033c
 800187c:	20000354 	.word	0x20000354
 8001880:	fffffc18 	.word	0xfffffc18

08001884 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a49      	ldr	r2, [pc, #292]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001890:	4293      	cmp	r3, r2
 8001892:	f040 808b 	bne.w	80019ac <HAL_TIM_PeriodElapsedCallback+0x128>
    adc_value = ADC_Read();
 8001896:	f7ff fe89 	bl	80015ac <ADC_Read>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	4b46      	ldr	r3, [pc, #280]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80018a0:	601a      	str	r2, [r3, #0]
    Encoder_Cnt = Read_Speed(&htim3);
 80018a2:	4846      	ldr	r0, [pc, #280]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80018a4:	f7ff fd68 	bl	8001378 <Read_Speed>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a45      	ldr	r2, [pc, #276]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80018ac:	6013      	str	r3, [r2, #0]
    Encoder_Integral += Encoder_Cnt;
 80018ae:	4b45      	ldr	r3, [pc, #276]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b43      	ldr	r3, [pc, #268]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a42      	ldr	r2, [pc, #264]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80018ba:	6013      	str	r3, [r2, #0]
    Encoder_Angle = Encoder_Integral/1.5;
 80018bc:	4b41      	ldr	r3, [pc, #260]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fd9f 	bl	8000404 <__aeabi_i2d>
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b3f      	ldr	r3, [pc, #252]	@ (80019c8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80018cc:	f7fe ff2e 	bl	800072c <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f8d6 	bl	8000a88 <__aeabi_d2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a3b      	ldr	r2, [pc, #236]	@ (80019cc <HAL_TIM_PeriodElapsedCallback+0x148>)
 80018e0:	6013      	str	r3, [r2, #0]
    if (Encoder_Integral > 540 || Encoder_Integral < -540) {
 80018e2:	4b38      	ldr	r3, [pc, #224]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f5b3 7f07 	cmp.w	r3, #540	@ 0x21c
 80018ea:	dc04      	bgt.n	80018f6 <HAL_TIM_PeriodElapsedCallback+0x72>
 80018ec:	4b35      	ldr	r3, [pc, #212]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f513 7f07 	cmn.w	r3, #540	@ 0x21c
 80018f4:	da0f      	bge.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x92>
      Encoder_Integral = Encoder_Integral % 540;
 80018f6:	4b33      	ldr	r3, [pc, #204]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a35      	ldr	r2, [pc, #212]	@ (80019d0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80018fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001900:	441a      	add	r2, r3
 8001902:	1251      	asrs	r1, r2, #9
 8001904:	17da      	asrs	r2, r3, #31
 8001906:	1a8a      	subs	r2, r1, r2
 8001908:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800190c:	fb01 f202 	mul.w	r2, r1, r2
 8001910:	1a9a      	subs	r2, r3, r2
 8001912:	4b2c      	ldr	r3, [pc, #176]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001914:	601a      	str	r2, [r3, #0]
    }
    adc_result = Transform_adc(adc_value);
 8001916:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f9ba 	bl	8000c94 <__aeabi_ui2f>
 8001920:	4603      	mov	r3, r0
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff feac 	bl	8001680 <Transform_adc>
 8001928:	4603      	mov	r3, r0
 800192a:	4a2a      	ldr	r2, [pc, #168]	@ (80019d4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800192c:	6013      	str	r3, [r2, #0]
    encoder_result = Transform_encoder(Encoder_Angle);
 800192e:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff0a 	bl	800174c <Transform_encoder>
 8001938:	4603      	mov	r3, r0
 800193a:	4a27      	ldr	r2, [pc, #156]	@ (80019d8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800193c:	6013      	str	r3, [r2, #0]
    if (currentkey == 4 || currentkey == 8) {
 800193e:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b04      	cmp	r3, #4
 8001944:	d003      	beq.n	800194e <HAL_TIM_PeriodElapsedCallback+0xca>
 8001946:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b08      	cmp	r3, #8
 800194c:	d12e      	bne.n	80019ac <HAL_TIM_PeriodElapsedCallback+0x128>
      PID_Calculate(&Turn_PID1, 2090 - Encoder_Angle, adc_value);
 800194e:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	4822      	ldr	r0, [pc, #136]	@ (80019e0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001956:	f7ff f8eb 	bl	8000b30 <__aeabi_fsub>
 800195a:	4603      	mov	r3, r0
 800195c:	461c      	mov	r4, r3
 800195e:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f996 	bl	8000c94 <__aeabi_ui2f>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	4621      	mov	r1, r4
 800196e:	481d      	ldr	r0, [pc, #116]	@ (80019e4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001970:	f7ff fc10 	bl	8001194 <PID_Calculate>
      PID_Calculate(&Turn_PID2, Encoder_Cnt+Turn_PID1.PID_Out, 0);
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff f98f 	bl	8000c9c <__aeabi_i2f>
 800197e:	4602      	mov	r2, r0
 8001980:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f7ff f8d4 	bl	8000b34 <__addsf3>
 800198c:	4603      	mov	r3, r0
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4619      	mov	r1, r3
 8001994:	4814      	ldr	r0, [pc, #80]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001996:	f7ff fbfd 	bl	8001194 <PID_Calculate>
      Load(Turn_PID2.PID_Out);
 800199a:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fb96 	bl	80010d0 <__aeabi_f2iz>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f9a0 	bl	8001cec <Load>
    }
  }
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	20000820 	.word	0x20000820
 80019b8:	2000030c 	.word	0x2000030c
 80019bc:	20000868 	.word	0x20000868
 80019c0:	200002e8 	.word	0x200002e8
 80019c4:	200002f0 	.word	0x200002f0
 80019c8:	3ff80000 	.word	0x3ff80000
 80019cc:	200002ec 	.word	0x200002ec
 80019d0:	f2b9d649 	.word	0xf2b9d649
 80019d4:	20000310 	.word	0x20000310
 80019d8:	200002f4 	.word	0x200002f4
 80019dc:	2000033c 	.word	0x2000033c
 80019e0:	4502a000 	.word	0x4502a000
 80019e4:	200001f8 	.word	0x200001f8
 80019e8:	20000224 	.word	0x20000224

080019ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f2:	f001 f839 	bl	8002a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f6:	f000 f917 	bl	8001c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019fa:	f7ff fcd1 	bl	80013a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019fe:	f7ff fd57 	bl	80014b0 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001a02:	f000 feeb 	bl	80027dc <MX_TIM4_Init>
  MX_TIM3_Init();
 8001a06:	f000 fe95 	bl	8002734 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001a0a:	f000 fe47 	bl	800269c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001a0e:	f7ff fc39 	bl	8001284 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001a12:	f000 f9c9 	bl	8001da8 <OLED_Init>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001a16:	2100      	movs	r1, #0
 8001a18:	4862      	ldr	r0, [pc, #392]	@ (8001ba4 <main+0x1b8>)
 8001a1a:	f003 fb35 	bl	8005088 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a1e:	4862      	ldr	r0, [pc, #392]	@ (8001ba8 <main+0x1bc>)
 8001a20:	f003 fa88 	bl	8004f34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a24:	213c      	movs	r1, #60	@ 0x3c
 8001a26:	4861      	ldr	r0, [pc, #388]	@ (8001bac <main+0x1c0>)
 8001a28:	f003 fc72 	bl	8005310 <HAL_TIM_Encoder_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001a2c:	4860      	ldr	r0, [pc, #384]	@ (8001bb0 <main+0x1c4>)
 8001a2e:	f001 fca9 	bl	8003384 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);     //启动ADC转换
 8001a32:	485f      	ldr	r0, [pc, #380]	@ (8001bb0 <main+0x1c4>)
 8001a34:	f001 f952 	bl	8002cdc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	485c      	ldr	r0, [pc, #368]	@ (8001bb0 <main+0x1c4>)
 8001a3e:	f001 f9fb 	bl	8002e38 <HAL_ADC_PollForConversion>
  PID_Init(&Turn_PID1, -2.5, 0, -2.9, 0, 1000);   // -0.28  -1
 8001a42:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb4 <main+0x1c8>)
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb8 <main+0x1cc>)
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	495a      	ldr	r1, [pc, #360]	@ (8001bbc <main+0x1d0>)
 8001a54:	485a      	ldr	r0, [pc, #360]	@ (8001bc0 <main+0x1d4>)
 8001a56:	f7ff fb76 	bl	8001146 <PID_Init>
  PID_Init(&Turn_PID2, 2200, 0, 340, 0, 7200);
 8001a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc4 <main+0x1d8>)
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	4b58      	ldr	r3, [pc, #352]	@ (8001bc8 <main+0x1dc>)
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	4958      	ldr	r1, [pc, #352]	@ (8001bcc <main+0x1e0>)
 8001a6c:	4858      	ldr	r0, [pc, #352]	@ (8001bd0 <main+0x1e4>)
 8001a6e:	f7ff fb6a 	bl	8001146 <PID_Init>
    // sprintf(message_key, "curmode: %d", currentkey);
    // OLED_PrintString(0, 0, message_key, &font16x16, OLED_COLOR_NORMAL);


    // OLED_ShowFrame();
    if (currentkey!= 8) {
 8001a72:	4b58      	ldr	r3, [pc, #352]	@ (8001bd4 <main+0x1e8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d01f      	beq.n	8001aba <main+0xce>
      OLED_NewFrame();
 8001a7a:	f000 f9f1 	bl	8001e60 <OLED_NewFrame>
      sprintf(message, "当前模式:%d", currentkey);
 8001a7e:	4b55      	ldr	r3, [pc, #340]	@ (8001bd4 <main+0x1e8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4954      	ldr	r1, [pc, #336]	@ (8001bd8 <main+0x1ec>)
 8001a86:	4855      	ldr	r0, [pc, #340]	@ (8001bdc <main+0x1f0>)
 8001a88:	f004 ffac 	bl	80069e4 <siprintf>
      sprintf(message_sum, "累计求和:%d", KEY);
 8001a8c:	4b54      	ldr	r3, [pc, #336]	@ (8001be0 <main+0x1f4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4954      	ldr	r1, [pc, #336]	@ (8001be4 <main+0x1f8>)
 8001a94:	4854      	ldr	r0, [pc, #336]	@ (8001be8 <main+0x1fc>)
 8001a96:	f004 ffa5 	bl	80069e4 <siprintf>
      OLED_PrintString(0, 0, message, &font15x15, OLED_COLOR_NORMAL);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4b53      	ldr	r3, [pc, #332]	@ (8001bec <main+0x200>)
 8001aa0:	4a4e      	ldr	r2, [pc, #312]	@ (8001bdc <main+0x1f0>)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f000 fc00 	bl	80022aa <OLED_PrintString>
      OLED_PrintString(0, 31, message_sum, &font15x15, OLED_COLOR_NORMAL);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4b4f      	ldr	r3, [pc, #316]	@ (8001bec <main+0x200>)
 8001ab0:	4a4d      	ldr	r2, [pc, #308]	@ (8001be8 <main+0x1fc>)
 8001ab2:	211f      	movs	r1, #31
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f000 fbf8 	bl	80022aa <OLED_PrintString>
    }
    if (currentkey== 0) {
 8001aba:	4b46      	ldr	r3, [pc, #280]	@ (8001bd4 <main+0x1e8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10b      	bne.n	8001ada <main+0xee>
      sprintf(message_0, "已暂停");
 8001ac2:	494b      	ldr	r1, [pc, #300]	@ (8001bf0 <main+0x204>)
 8001ac4:	484b      	ldr	r0, [pc, #300]	@ (8001bf4 <main+0x208>)
 8001ac6:	f004 ff8d 	bl	80069e4 <siprintf>
      OLED_PrintString(0, 16, message_0, &font15x15, OLED_COLOR_NORMAL);
 8001aca:	2300      	movs	r3, #0
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	4b47      	ldr	r3, [pc, #284]	@ (8001bec <main+0x200>)
 8001ad0:	4a48      	ldr	r2, [pc, #288]	@ (8001bf4 <main+0x208>)
 8001ad2:	2110      	movs	r1, #16
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f000 fbe8 	bl	80022aa <OLED_PrintString>
    }
    if (currentkey==1 ) {
 8001ada:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd4 <main+0x1e8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d122      	bne.n	8001b28 <main+0x13c>
      OLED_PrintString(0, 0, "Task1_process", &font16x16, OLED_COLOR_NORMAL);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	4b44      	ldr	r3, [pc, #272]	@ (8001bf8 <main+0x20c>)
 8001ae8:	4a44      	ldr	r2, [pc, #272]	@ (8001bfc <main+0x210>)
 8001aea:	2100      	movs	r1, #0
 8001aec:	2000      	movs	r0, #0
 8001aee:	f000 fbdc 	bl	80022aa <OLED_PrintString>
      OLED_PrintString(0, 17, "1正转2反转3暂停", &font15x15, OLED_COLOR_NORMAL);
 8001af2:	2300      	movs	r3, #0
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bec <main+0x200>)
 8001af8:	4a41      	ldr	r2, [pc, #260]	@ (8001c00 <main+0x214>)
 8001afa:	2111      	movs	r1, #17
 8001afc:	2000      	movs	r0, #0
 8001afe:	f000 fbd4 	bl	80022aa <OLED_PrintString>
      sprintf(message_encoder, "angle: %.2f", encoder_result);
 8001b02:	4b40      	ldr	r3, [pc, #256]	@ (8001c04 <main+0x218>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fc8e 	bl	8000428 <__aeabi_f2d>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	493d      	ldr	r1, [pc, #244]	@ (8001c08 <main+0x21c>)
 8001b12:	483e      	ldr	r0, [pc, #248]	@ (8001c0c <main+0x220>)
 8001b14:	f004 ff66 	bl	80069e4 <siprintf>
      OLED_PrintString(0, 33, message_encoder, &font16x16, OLED_COLOR_NORMAL);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	4b36      	ldr	r3, [pc, #216]	@ (8001bf8 <main+0x20c>)
 8001b1e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c0c <main+0x220>)
 8001b20:	2121      	movs	r1, #33	@ 0x21
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 fbc1 	bl	80022aa <OLED_PrintString>
    }
    if (currentkey==2 || currentkey==3) {
 8001b28:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd4 <main+0x1e8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d003      	beq.n	8001b38 <main+0x14c>
 8001b30:	4b28      	ldr	r3, [pc, #160]	@ (8001bd4 <main+0x1e8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d112      	bne.n	8001b5e <main+0x172>
      sprintf(message_adc, "摆杆角度: %.2f", adc_result);
 8001b38:	4b35      	ldr	r3, [pc, #212]	@ (8001c10 <main+0x224>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fc73 	bl	8000428 <__aeabi_f2d>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4933      	ldr	r1, [pc, #204]	@ (8001c14 <main+0x228>)
 8001b48:	4833      	ldr	r0, [pc, #204]	@ (8001c18 <main+0x22c>)
 8001b4a:	f004 ff4b 	bl	80069e4 <siprintf>
      OLED_PrintString(0, 17, message_adc, &font15x15, OLED_COLOR_NORMAL);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	4b26      	ldr	r3, [pc, #152]	@ (8001bec <main+0x200>)
 8001b54:	4a30      	ldr	r2, [pc, #192]	@ (8001c18 <main+0x22c>)
 8001b56:	2111      	movs	r1, #17
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 fba6 	bl	80022aa <OLED_PrintString>
    }
    if(currentkey==4) {
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <main+0x1e8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d10b      	bne.n	8001b7e <main+0x192>
      sprintf(message_4,"倒立平衡状态");
 8001b66:	492d      	ldr	r1, [pc, #180]	@ (8001c1c <main+0x230>)
 8001b68:	482d      	ldr	r0, [pc, #180]	@ (8001c20 <main+0x234>)
 8001b6a:	f004 ff3b 	bl	80069e4 <siprintf>
      OLED_PrintString(0, 30, message_4, &font15x15, OLED_COLOR_NORMAL);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <main+0x200>)
 8001b74:	4a2a      	ldr	r2, [pc, #168]	@ (8001c20 <main+0x234>)
 8001b76:	211e      	movs	r1, #30
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f000 fb96 	bl	80022aa <OLED_PrintString>
    }
    if(currentkey==8) {
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <main+0x1e8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d10a      	bne.n	8001b9c <main+0x1b0>
      if(t_new)
 8001b86:	4b27      	ldr	r3, [pc, #156]	@ (8001c24 <main+0x238>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d006      	beq.n	8001b9c <main+0x1b0>
      {
        t_new--;
 8001b8e:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <main+0x238>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	4a23      	ldr	r2, [pc, #140]	@ (8001c24 <main+0x238>)
 8001b96:	6013      	str	r3, [r2, #0]
        OLED_NewFrame();
 8001b98:	f000 f962 	bl	8001e60 <OLED_NewFrame>
      }
    }
    OLED_ShowFrame();
 8001b9c:	f000 f96c 	bl	8001e78 <OLED_ShowFrame>
    if (currentkey!= 8) {
 8001ba0:	e767      	b.n	8001a72 <main+0x86>
 8001ba2:	bf00      	nop
 8001ba4:	200008b0 	.word	0x200008b0
 8001ba8:	20000820 	.word	0x20000820
 8001bac:	20000868 	.word	0x20000868
 8001bb0:	20000250 	.word	0x20000250
 8001bb4:	447a0000 	.word	0x447a0000
 8001bb8:	c039999a 	.word	0xc039999a
 8001bbc:	c0200000 	.word	0xc0200000
 8001bc0:	200001f8 	.word	0x200001f8
 8001bc4:	45e10000 	.word	0x45e10000
 8001bc8:	43aa0000 	.word	0x43aa0000
 8001bcc:	45098000 	.word	0x45098000
 8001bd0:	20000224 	.word	0x20000224
 8001bd4:	2000033c 	.word	0x2000033c
 8001bd8:	08008c88 	.word	0x08008c88
 8001bdc:	20000340 	.word	0x20000340
 8001be0:	20000354 	.word	0x20000354
 8001be4:	08008c98 	.word	0x08008c98
 8001be8:	2000036c 	.word	0x2000036c
 8001bec:	080096fc 	.word	0x080096fc
 8001bf0:	08008ca8 	.word	0x08008ca8
 8001bf4:	20000358 	.word	0x20000358
 8001bf8:	08009398 	.word	0x08009398
 8001bfc:	08008cb4 	.word	0x08008cb4
 8001c00:	08008cc4 	.word	0x08008cc4
 8001c04:	200002f4 	.word	0x200002f4
 8001c08:	08008cdc 	.word	0x08008cdc
 8001c0c:	200002d4 	.word	0x200002d4
 8001c10:	20000310 	.word	0x20000310
 8001c14:	08008ce8 	.word	0x08008ce8
 8001c18:	200002f8 	.word	0x200002f8
 8001c1c:	08008cfc 	.word	0x08008cfc
 8001c20:	20000380 	.word	0x20000380
 8001c24:	20000000 	.word	0x20000000

08001c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b094      	sub	sp, #80	@ 0x50
 8001c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c32:	2228      	movs	r2, #40	@ 0x28
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f004 ff47 	bl	8006aca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c66:	2301      	movs	r3, #1
 8001c68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c74:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 fb8c 	bl	800439c <HAL_RCC_OscConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c8a:	f000 f828 	bl	8001cde <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8e:	230f      	movs	r3, #15
 8001c90:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2102      	movs	r1, #2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 fdf8 	bl	80048a0 <HAL_RCC_ClockConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001cb6:	f000 f812 	bl	8001cde <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cc2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 ff78 	bl	8004bbc <HAL_RCCEx_PeriphCLKConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001cd2:	f000 f804 	bl	8001cde <Error_Handler>
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3750      	adds	r7, #80	@ 0x50
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce2:	b672      	cpsid	i
}
 8001ce4:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001ce6:	bf00      	nop
 8001ce8:	e7fd      	b.n	8001ce6 <Error_Handler+0x8>
	...

08001cec <Load>:
        return -n;
    }
}

void Load(int moto1)   //-7200~7200
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
    if(moto1 < 0)   //顺时针 编码器从65535开始
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	da0c      	bge.n	8001d14 <Load+0x28>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);     //AIN1 = 0;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d00:	4812      	ldr	r0, [pc, #72]	@ (8001d4c <Load+0x60>)
 8001d02:	f001 fe7f 	bl	8003a04 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);       //AIN2 = 1;
 8001d06:	2201      	movs	r2, #1
 8001d08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d0c:	480f      	ldr	r0, [pc, #60]	@ (8001d4c <Load+0x60>)
 8001d0e:	f001 fe79 	bl	8003a04 <HAL_GPIO_WritePin>
 8001d12:	e00b      	b.n	8001d2c <Load+0x40>
    }
    else            //逆时针 编码器从0开始
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);      //AIN1 = 1;
 8001d14:	2201      	movs	r2, #1
 8001d16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d1a:	480c      	ldr	r0, [pc, #48]	@ (8001d4c <Load+0x60>)
 8001d1c:	f001 fe72 	bl	8003a04 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);    //AIN2 = 0;
 8001d20:	2200      	movs	r2, #0
 8001d22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d26:	4809      	ldr	r0, [pc, #36]	@ (8001d4c <Load+0x60>)
 8001d28:	f001 fe6c 	bl	8003a04 <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, abs(moto1) + dead_area);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001d32:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <Load+0x64>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	441a      	add	r2, r3
 8001d3c:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <Load+0x68>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40010c00 	.word	0x40010c00
 8001d50:	20000004 	.word	0x20000004
 8001d54:	200008b0 	.word	0x200008b0

08001d58 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	9200      	str	r2, [sp, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	2178      	movs	r1, #120	@ 0x78
 8001d72:	4803      	ldr	r0, [pc, #12]	@ (8001d80 <OLED_Send+0x28>)
 8001d74:	f001 ffba 	bl	8003cec <HAL_I2C_Master_Transmit>
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000280 	.word	0x20000280

08001d84 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8001d8e:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <OLED_SendCmd+0x20>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8001d94:	2102      	movs	r1, #2
 8001d96:	4803      	ldr	r0, [pc, #12]	@ (8001da4 <OLED_SendCmd+0x20>)
 8001d98:	f7ff ffde 	bl	8001d58 <OLED_Send>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000794 	.word	0x20000794

08001da8 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8001dac:	20ae      	movs	r0, #174	@ 0xae
 8001dae:	f7ff ffe9 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8001db2:	2020      	movs	r0, #32
 8001db4:	f7ff ffe6 	bl	8001d84 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001db8:	2010      	movs	r0, #16
 8001dba:	f7ff ffe3 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8001dbe:	20b0      	movs	r0, #176	@ 0xb0
 8001dc0:	f7ff ffe0 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8001dc4:	20c8      	movs	r0, #200	@ 0xc8
 8001dc6:	f7ff ffdd 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7ff ffda 	bl	8001d84 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001dd0:	2010      	movs	r0, #16
 8001dd2:	f7ff ffd7 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8001dd6:	2040      	movs	r0, #64	@ 0x40
 8001dd8:	f7ff ffd4 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8001ddc:	2081      	movs	r0, #129	@ 0x81
 8001dde:	f7ff ffd1 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8001de2:	20df      	movs	r0, #223	@ 0xdf
 8001de4:	f7ff ffce 	bl	8001d84 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8001de8:	20a1      	movs	r0, #161	@ 0xa1
 8001dea:	f7ff ffcb 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8001dee:	20a6      	movs	r0, #166	@ 0xa6
 8001df0:	f7ff ffc8 	bl	8001d84 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8001df4:	20a8      	movs	r0, #168	@ 0xa8
 8001df6:	f7ff ffc5 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8001dfa:	203f      	movs	r0, #63	@ 0x3f
 8001dfc:	f7ff ffc2 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8001e00:	20a4      	movs	r0, #164	@ 0xa4
 8001e02:	f7ff ffbf 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8001e06:	20d3      	movs	r0, #211	@ 0xd3
 8001e08:	f7ff ffbc 	bl	8001d84 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff ffb9 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8001e12:	20d5      	movs	r0, #213	@ 0xd5
 8001e14:	f7ff ffb6 	bl	8001d84 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8001e18:	20f0      	movs	r0, #240	@ 0xf0
 8001e1a:	f7ff ffb3 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8001e1e:	20d9      	movs	r0, #217	@ 0xd9
 8001e20:	f7ff ffb0 	bl	8001d84 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8001e24:	2022      	movs	r0, #34	@ 0x22
 8001e26:	f7ff ffad 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8001e2a:	20da      	movs	r0, #218	@ 0xda
 8001e2c:	f7ff ffaa 	bl	8001d84 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001e30:	2012      	movs	r0, #18
 8001e32:	f7ff ffa7 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8001e36:	20db      	movs	r0, #219	@ 0xdb
 8001e38:	f7ff ffa4 	bl	8001d84 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8001e3c:	2020      	movs	r0, #32
 8001e3e:	f7ff ffa1 	bl	8001d84 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8001e42:	208d      	movs	r0, #141	@ 0x8d
 8001e44:	f7ff ff9e 	bl	8001d84 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8001e48:	2014      	movs	r0, #20
 8001e4a:	f7ff ff9b 	bl	8001d84 <OLED_SendCmd>

  OLED_NewFrame();
 8001e4e:	f000 f807 	bl	8001e60 <OLED_NewFrame>
  OLED_ShowFrame();
 8001e52:	f000 f811 	bl	8001e78 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001e56:	20af      	movs	r0, #175	@ 0xaf
 8001e58:	f7ff ff94 	bl	8001d84 <OLED_SendCmd>
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001e64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <OLED_NewFrame+0x14>)
 8001e6c:	f004 fe2d 	bl	8006aca <memset>
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000394 	.word	0x20000394

08001e78 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <OLED_ShowFrame+0x5c>)
 8001e80:	2240      	movs	r2, #64	@ 0x40
 8001e82:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	71fb      	strb	r3, [r7, #7]
 8001e88:	e01b      	b.n	8001ec2 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	3b50      	subs	r3, #80	@ 0x50
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff77 	bl	8001d84 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff ff74 	bl	8001d84 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001e9c:	2010      	movs	r0, #16
 8001e9e:	f7ff ff71 	bl	8001d84 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8001ea2:	480d      	ldr	r0, [pc, #52]	@ (8001ed8 <OLED_ShowFrame+0x60>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	01db      	lsls	r3, r3, #7
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	@ (8001edc <OLED_ShowFrame+0x64>)
 8001eaa:	4413      	add	r3, r2
 8001eac:	2280      	movs	r2, #128	@ 0x80
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f004 fe99 	bl	8006be6 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001eb4:	2181      	movs	r1, #129	@ 0x81
 8001eb6:	4807      	ldr	r0, [pc, #28]	@ (8001ed4 <OLED_ShowFrame+0x5c>)
 8001eb8:	f7ff ff4e 	bl	8001d58 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	71fb      	strb	r3, [r7, #7]
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	2b07      	cmp	r3, #7
 8001ec6:	d9e0      	bls.n	8001e8a <OLED_ShowFrame+0x12>
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000798 	.word	0x20000798
 8001ed8:	20000799 	.word	0x20000799
 8001edc:	20000394 	.word	0x20000394

08001ee0 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8001ee0:	b490      	push	{r4, r7}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	4608      	mov	r0, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	4623      	mov	r3, r4
 8001ef0:	71fb      	strb	r3, [r7, #7]
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71bb      	strb	r3, [r7, #6]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	717b      	strb	r3, [r7, #5]
 8001efa:	4613      	mov	r3, r2
 8001efc:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b07      	cmp	r3, #7
 8001f02:	d860      	bhi.n	8001fc6 <OLED_SetByte_Fine+0xe6>
 8001f04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	db5c      	blt.n	8001fc6 <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 8001f0c:	7d3b      	ldrb	r3, [r7, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8001f12:	797b      	ldrb	r3, [r7, #5]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8001f18:	7c3b      	ldrb	r3, [r7, #16]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	22ff      	movs	r2, #255	@ 0xff
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	b25a      	sxtb	r2, r3
 8001f24:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b25a      	sxtb	r2, r3
 8001f2c:	793b      	ldrb	r3, [r7, #4]
 8001f2e:	f1c3 0308 	rsb	r3, r3, #8
 8001f32:	21ff      	movs	r1, #255	@ 0xff
 8001f34:	fa41 f303 	asr.w	r3, r1, r3
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b23      	ldr	r3, [pc, #140]	@ (8001fd0 <OLED_SetByte_Fine+0xf0>)
 8001f42:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001f44:	79fa      	ldrb	r2, [r7, #7]
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	4922      	ldr	r1, [pc, #136]	@ (8001fd4 <OLED_SetByte_Fine+0xf4>)
 8001f4a:	01d2      	lsls	r2, r2, #7
 8001f4c:	440a      	add	r2, r1
 8001f4e:	4413      	add	r3, r2
 8001f50:	7818      	ldrb	r0, [r3, #0]
 8001f52:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <OLED_SetByte_Fine+0xf0>)
 8001f54:	7819      	ldrb	r1, [r3, #0]
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	79bb      	ldrb	r3, [r7, #6]
 8001f5a:	4001      	ands	r1, r0
 8001f5c:	b2c8      	uxtb	r0, r1
 8001f5e:	491d      	ldr	r1, [pc, #116]	@ (8001fd4 <OLED_SetByte_Fine+0xf4>)
 8001f60:	01d2      	lsls	r2, r2, #7
 8001f62:	440a      	add	r2, r1
 8001f64:	4413      	add	r3, r2
 8001f66:	4602      	mov	r2, r0
 8001f68:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8001f6a:	7c3b      	ldrb	r3, [r7, #16]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	22ff      	movs	r2, #255	@ 0xff
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	b25a      	sxtb	r2, r3
 8001f7a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	b25a      	sxtb	r2, r3
 8001f82:	793b      	ldrb	r3, [r7, #4]
 8001f84:	f1c3 0308 	rsb	r3, r3, #8
 8001f88:	21ff      	movs	r1, #255	@ 0xff
 8001f8a:	fa41 f303 	asr.w	r3, r1, r3
 8001f8e:	b25b      	sxtb	r3, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	b25b      	sxtb	r3, r3
 8001f94:	4013      	ands	r3, r2
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <OLED_SetByte_Fine+0xf0>)
 8001f9c:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8001f9e:	79fa      	ldrb	r2, [r7, #7]
 8001fa0:	79bb      	ldrb	r3, [r7, #6]
 8001fa2:	490c      	ldr	r1, [pc, #48]	@ (8001fd4 <OLED_SetByte_Fine+0xf4>)
 8001fa4:	01d2      	lsls	r2, r2, #7
 8001fa6:	440a      	add	r2, r1
 8001fa8:	4413      	add	r3, r2
 8001faa:	7818      	ldrb	r0, [r3, #0]
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <OLED_SetByte_Fine+0xf0>)
 8001fae:	7819      	ldrb	r1, [r3, #0]
 8001fb0:	79fa      	ldrb	r2, [r7, #7]
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	4301      	orrs	r1, r0
 8001fb6:	b2c8      	uxtb	r0, r1
 8001fb8:	4906      	ldr	r1, [pc, #24]	@ (8001fd4 <OLED_SetByte_Fine+0xf4>)
 8001fba:	01d2      	lsls	r2, r2, #7
 8001fbc:	440a      	add	r2, r1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e000      	b.n	8001fc8 <OLED_SetByte_Fine+0xe8>
    return;
 8001fc6:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc90      	pop	{r4, r7}
 8001fce:	4770      	bx	lr
 8001fd0:	20000819 	.word	0x20000819
 8001fd4:	20000394 	.word	0x20000394

08001fd8 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	4604      	mov	r4, r0
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4623      	mov	r3, r4
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	4603      	mov	r3, r0
 8001fec:	71bb      	strb	r3, [r7, #6]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	717b      	strb	r3, [r7, #5]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001ff6:	79bb      	ldrb	r3, [r7, #6]
 8001ff8:	08db      	lsrs	r3, r3, #3
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001ffc:	79bb      	ldrb	r3, [r7, #6]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8002004:	7bba      	ldrb	r2, [r7, #14]
 8002006:	793b      	ldrb	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	2b08      	cmp	r3, #8
 800200c:	dd29      	ble.n	8002062 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800200e:	797a      	ldrb	r2, [r7, #5]
 8002010:	7bbb      	ldrb	r3, [r7, #14]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	b2da      	uxtb	r2, r3
 8002018:	7bbc      	ldrb	r4, [r7, #14]
 800201a:	79f9      	ldrb	r1, [r7, #7]
 800201c:	7bf8      	ldrb	r0, [r7, #15]
 800201e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2307      	movs	r3, #7
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4623      	mov	r3, r4
 800202a:	f7ff ff59 	bl	8001ee0 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	3301      	adds	r3, #1
 8002032:	b2d8      	uxtb	r0, r3
 8002034:	797a      	ldrb	r2, [r7, #5]
 8002036:	7bbb      	ldrb	r3, [r7, #14]
 8002038:	f1c3 0308 	rsb	r3, r3, #8
 800203c:	fa42 f303 	asr.w	r3, r2, r3
 8002040:	b2dc      	uxtb	r4, r3
 8002042:	793a      	ldrb	r2, [r7, #4]
 8002044:	7bbb      	ldrb	r3, [r7, #14]
 8002046:	4413      	add	r3, r2
 8002048:	b2db      	uxtb	r3, r3
 800204a:	3b09      	subs	r3, #9
 800204c:	b2db      	uxtb	r3, r3
 800204e:	79f9      	ldrb	r1, [r7, #7]
 8002050:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002054:	9201      	str	r2, [sp, #4]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2300      	movs	r3, #0
 800205a:	4622      	mov	r2, r4
 800205c:	f7ff ff40 	bl	8001ee0 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8002060:	e015      	b.n	800208e <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8002062:	797a      	ldrb	r2, [r7, #5]
 8002064:	7bbb      	ldrb	r3, [r7, #14]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	b2dc      	uxtb	r4, r3
 800206c:	7bba      	ldrb	r2, [r7, #14]
 800206e:	793b      	ldrb	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b2db      	uxtb	r3, r3
 8002078:	7bbd      	ldrb	r5, [r7, #14]
 800207a:	79f9      	ldrb	r1, [r7, #7]
 800207c:	7bf8      	ldrb	r0, [r7, #15]
 800207e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002082:	9201      	str	r2, [sp, #4]
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	462b      	mov	r3, r5
 8002088:	4622      	mov	r2, r4
 800208a:	f7ff ff29 	bl	8001ee0 <OLED_SetByte_Fine>
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bdb0      	pop	{r4, r5, r7, pc}

08002096 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8002096:	b590      	push	{r4, r7, lr}
 8002098:	b087      	sub	sp, #28
 800209a:	af02      	add	r7, sp, #8
 800209c:	4604      	mov	r4, r0
 800209e:	4608      	mov	r0, r1
 80020a0:	4611      	mov	r1, r2
 80020a2:	461a      	mov	r2, r3
 80020a4:	4623      	mov	r3, r4
 80020a6:	71fb      	strb	r3, [r7, #7]
 80020a8:	4603      	mov	r3, r0
 80020aa:	71bb      	strb	r3, [r7, #6]
 80020ac:	460b      	mov	r3, r1
 80020ae:	717b      	strb	r3, [r7, #5]
 80020b0:	4613      	mov	r3, r2
 80020b2:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	08db      	lsrs	r3, r3, #3
 80020b8:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80020ba:	79bb      	ldrb	r3, [r7, #6]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80020c2:	797a      	ldrb	r2, [r7, #5]
 80020c4:	7bbb      	ldrb	r3, [r7, #14]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	7bbc      	ldrb	r4, [r7, #14]
 80020ce:	79f9      	ldrb	r1, [r7, #7]
 80020d0:	7bf8      	ldrb	r0, [r7, #15]
 80020d2:	793b      	ldrb	r3, [r7, #4]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	2307      	movs	r3, #7
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	4623      	mov	r3, r4
 80020dc:	f7ff ff00 	bl	8001ee0 <OLED_SetByte_Fine>
  if (bit)
 80020e0:	7bbb      	ldrb	r3, [r7, #14]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d014      	beq.n	8002110 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	3301      	adds	r3, #1
 80020ea:	b2d8      	uxtb	r0, r3
 80020ec:	797a      	ldrb	r2, [r7, #5]
 80020ee:	7bbb      	ldrb	r3, [r7, #14]
 80020f0:	f1c3 0308 	rsb	r3, r3, #8
 80020f4:	fa42 f303 	asr.w	r3, r2, r3
 80020f8:	b2dc      	uxtb	r4, r3
 80020fa:	7bbb      	ldrb	r3, [r7, #14]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	79f9      	ldrb	r1, [r7, #7]
 8002102:	793a      	ldrb	r2, [r7, #4]
 8002104:	9201      	str	r2, [sp, #4]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2300      	movs	r3, #0
 800210a:	4622      	mov	r2, r4
 800210c:	f7ff fee8 	bl	8001ee0 <OLED_SetByte_Fine>
  }
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bd90      	pop	{r4, r7, pc}

08002118 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b087      	sub	sp, #28
 800211c:	af02      	add	r7, sp, #8
 800211e:	603a      	str	r2, [r7, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
 8002126:	460b      	mov	r3, r1
 8002128:	71bb      	strb	r3, [r7, #6]
 800212a:	4613      	mov	r3, r2
 800212c:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 800212e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002132:	08db      	lsrs	r3, r3, #3
 8002134:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8002136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e025      	b.n	8002192 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8002146:	2300      	movs	r3, #0
 8002148:	73bb      	strb	r3, [r7, #14]
 800214a:	e01b      	b.n	8002184 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 800214c:	79fa      	ldrb	r2, [r7, #7]
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	4413      	add	r3, r2
 8002152:	b2d8      	uxtb	r0, r3
 8002154:	7bbb      	ldrb	r3, [r7, #14]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	b2da      	uxtb	r2, r3
 800215a:	79bb      	ldrb	r3, [r7, #6]
 800215c:	4413      	add	r3, r2
 800215e:	b2dc      	uxtb	r4, r3
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	7bbb      	ldrb	r3, [r7, #14]
 8002164:	7979      	ldrb	r1, [r7, #5]
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	461a      	mov	r2, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	4413      	add	r3, r2
 8002172:	781a      	ldrb	r2, [r3, #0]
 8002174:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002178:	4621      	mov	r1, r4
 800217a:	f7ff ff8c 	bl	8002096 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 800217e:	7bbb      	ldrb	r3, [r7, #14]
 8002180:	3301      	adds	r3, #1
 8002182:	73bb      	strb	r3, [r7, #14]
 8002184:	7bba      	ldrb	r2, [r7, #14]
 8002186:	7b3b      	ldrb	r3, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d3df      	bcc.n	800214c <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	3301      	adds	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	797b      	ldrb	r3, [r7, #5]
 8002196:	429a      	cmp	r2, r3
 8002198:	d3d5      	bcc.n	8002146 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d028      	beq.n	80021f2 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 80021a0:	797b      	ldrb	r3, [r7, #5]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	7b3a      	ldrb	r2, [r7, #12]
 80021a6:	b292      	uxth	r2, r2
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	737b      	strb	r3, [r7, #13]
 80021b2:	e01a      	b.n	80021ea <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 80021b4:	79fa      	ldrb	r2, [r7, #7]
 80021b6:	7b7b      	ldrb	r3, [r7, #13]
 80021b8:	4413      	add	r3, r2
 80021ba:	b2d8      	uxtb	r0, r3
 80021bc:	7b3b      	ldrb	r3, [r7, #12]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	79bb      	ldrb	r3, [r7, #6]
 80021c4:	4413      	add	r3, r2
 80021c6:	b2d9      	uxtb	r1, r3
 80021c8:	893a      	ldrh	r2, [r7, #8]
 80021ca:	7b7b      	ldrb	r3, [r7, #13]
 80021cc:	4413      	add	r3, r2
 80021ce:	461a      	mov	r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	7afc      	ldrb	r4, [r7, #11]
 80021d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4623      	mov	r3, r4
 80021e0:	f7ff fefa 	bl	8001fd8 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 80021e4:	7b7b      	ldrb	r3, [r7, #13]
 80021e6:	3301      	adds	r3, #1
 80021e8:	737b      	strb	r3, [r7, #13]
 80021ea:	7b7a      	ldrb	r2, [r7, #13]
 80021ec:	797b      	ldrb	r3, [r7, #5]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3e0      	bcc.n	80021b4 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd90      	pop	{r4, r7, pc}

080021fa <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 80021fa:	b5b0      	push	{r4, r5, r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af02      	add	r7, sp, #8
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
 8002206:	460b      	mov	r3, r1
 8002208:	71bb      	strb	r3, [r7, #6]
 800220a:	4613      	mov	r3, r2
 800220c:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	797b      	ldrb	r3, [r7, #5]
 8002214:	f1a3 0120 	sub.w	r1, r3, #32
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	3307      	adds	r3, #7
 800221e:	2b00      	cmp	r3, #0
 8002220:	da00      	bge.n	8002224 <OLED_PrintASCIIChar+0x2a>
 8002222:	3307      	adds	r3, #7
 8002224:	10db      	asrs	r3, r3, #3
 8002226:	4618      	mov	r0, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	fb00 f303 	mul.w	r3, r0, r3
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	18d4      	adds	r4, r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	785d      	ldrb	r5, [r3, #1]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	79b9      	ldrb	r1, [r7, #6]
 8002240:	79f8      	ldrb	r0, [r7, #7]
 8002242:	7e3a      	ldrb	r2, [r7, #24]
 8002244:	9201      	str	r2, [sp, #4]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	462b      	mov	r3, r5
 800224a:	4622      	mov	r2, r4
 800224c:	f7ff ff64 	bl	8002118 <OLED_SetBlock>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bdb0      	pop	{r4, r5, r7, pc}

08002258 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b25b      	sxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	db01      	blt.n	800226e <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 800226a:	2301      	movs	r3, #1
 800226c:	e018      	b.n	80022a0 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8002276:	2bc0      	cmp	r3, #192	@ 0xc0
 8002278:	d101      	bne.n	800227e <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 800227a:	2302      	movs	r3, #2
 800227c:	e010      	b.n	80022a0 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002286:	2be0      	cmp	r3, #224	@ 0xe0
 8002288:	d101      	bne.n	800228e <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 800228a:	2303      	movs	r3, #3
 800228c:	e008      	b.n	80022a0 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8002296:	2bf0      	cmp	r3, #240	@ 0xf0
 8002298:	d101      	bne.n	800229e <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 800229a:	2304      	movs	r3, #4
 800229c:	e000      	b.n	80022a0 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 80022aa:	b5b0      	push	{r4, r5, r7, lr}
 80022ac:	b08a      	sub	sp, #40	@ 0x28
 80022ae:	af02      	add	r7, sp, #8
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	4603      	mov	r3, r0
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	460b      	mov	r3, r1
 80022ba:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 80022bc:	2300      	movs	r3, #0
 80022be:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3307      	adds	r3, #7
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	da00      	bge.n	80022cc <OLED_PrintString+0x22>
 80022ca:	3307      	adds	r3, #7
 80022cc:	10db      	asrs	r3, r3, #3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	7852      	ldrb	r2, [r2, #1]
 80022d4:	fb02 f303 	mul.w	r3, r2, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3304      	adds	r3, #4
 80022dc:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 80022de:	e07d      	b.n	80023dc <OLED_PrintString+0x132>
  {
    found = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 80022e4:	8bfb      	ldrh	r3, [r7, #30]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	4413      	add	r3, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ffb4 	bl	8002258 <_OLED_GetUTF8Len>
 80022f0:	4603      	mov	r3, r0
 80022f2:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 80022f4:	7ebb      	ldrb	r3, [r7, #26]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d078      	beq.n	80023ec <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	773b      	strb	r3, [r7, #28]
 80022fe:	e032      	b.n	8002366 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	7f3a      	ldrb	r2, [r7, #28]
 8002306:	7ef9      	ldrb	r1, [r7, #27]
 8002308:	fb01 f202 	mul.w	r2, r1, r2
 800230c:	4413      	add	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8002310:	8bfb      	ldrh	r3, [r7, #30]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	4413      	add	r3, r2
 8002316:	7eba      	ldrb	r2, [r7, #26]
 8002318:	6979      	ldr	r1, [r7, #20]
 800231a:	4618      	mov	r0, r3
 800231c:	f004 fbc5 	bl	8006aaa <memcmp>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11c      	bne.n	8002360 <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	1d1c      	adds	r4, r3, #4
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	785d      	ldrb	r5, [r3, #1]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	7bb9      	ldrb	r1, [r7, #14]
 8002334:	7bf8      	ldrb	r0, [r7, #15]
 8002336:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800233a:	9201      	str	r2, [sp, #4]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	462b      	mov	r3, r5
 8002340:	4622      	mov	r2, r4
 8002342:	f7ff fee9 	bl	8002118 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	785a      	ldrb	r2, [r3, #1]
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	4413      	add	r3, r2
 800234e:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002350:	7ebb      	ldrb	r3, [r7, #26]
 8002352:	b29a      	uxth	r2, r3
 8002354:	8bfb      	ldrh	r3, [r7, #30]
 8002356:	4413      	add	r3, r2
 8002358:	83fb      	strh	r3, [r7, #30]
        found = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	777b      	strb	r3, [r7, #29]
        break;
 800235e:	e007      	b.n	8002370 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 8002360:	7f3b      	ldrb	r3, [r7, #28]
 8002362:	3301      	adds	r3, #1
 8002364:	773b      	strb	r3, [r7, #28]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	7a1b      	ldrb	r3, [r3, #8]
 800236a:	7f3a      	ldrb	r2, [r7, #28]
 800236c:	429a      	cmp	r2, r3
 800236e:	d3c7      	bcc.n	8002300 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 8002370:	7f7b      	ldrb	r3, [r7, #29]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d132      	bne.n	80023dc <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8002376:	7ebb      	ldrb	r3, [r7, #26]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d119      	bne.n	80023b0 <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 800237c:	8bfb      	ldrh	r3, [r7, #30]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4413      	add	r3, r2
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68dc      	ldr	r4, [r3, #12]
 8002388:	7bb9      	ldrb	r1, [r7, #14]
 800238a:	7bf8      	ldrb	r0, [r7, #15]
 800238c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	4623      	mov	r3, r4
 8002394:	f7ff ff31 	bl	80021fa <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	785a      	ldrb	r2, [r3, #1]
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	4413      	add	r3, r2
 80023a2:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80023a4:	7ebb      	ldrb	r3, [r7, #26]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	8bfb      	ldrh	r3, [r7, #30]
 80023aa:	4413      	add	r3, r2
 80023ac:	83fb      	strh	r3, [r7, #30]
 80023ae:	e015      	b.n	80023dc <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	7bb9      	ldrb	r1, [r7, #14]
 80023b6:	7bf8      	ldrb	r0, [r7, #15]
 80023b8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	4613      	mov	r3, r2
 80023c0:	2220      	movs	r2, #32
 80023c2:	f7ff ff1a 	bl	80021fa <OLED_PrintASCIIChar>
        x += font->ascii->w;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	785a      	ldrb	r2, [r3, #1]
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	4413      	add	r3, r2
 80023d0:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80023d2:	7ebb      	ldrb	r3, [r7, #26]
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	8bfb      	ldrh	r3, [r7, #30]
 80023d8:	4413      	add	r3, r2
 80023da:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 80023dc:	8bfb      	ldrh	r3, [r7, #30]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	4413      	add	r3, r2
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f af7b 	bne.w	80022e0 <OLED_PrintString+0x36>
      }
    }
  }
}
 80023ea:	e000      	b.n	80023ee <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 80023ec:	bf00      	nop
}
 80023ee:	bf00      	nop
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080023f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_MspInit+0x5c>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	4a14      	ldr	r2, [pc, #80]	@ (8002454 <HAL_MspInit+0x5c>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6193      	str	r3, [r2, #24]
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_MspInit+0x5c>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <HAL_MspInit+0x5c>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4a0e      	ldr	r2, [pc, #56]	@ (8002454 <HAL_MspInit+0x5c>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002420:	61d3      	str	r3, [r2, #28]
 8002422:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <HAL_MspInit+0x5c>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800242e:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <HAL_MspInit+0x60>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	4a04      	ldr	r2, [pc, #16]	@ (8002458 <HAL_MspInit+0x60>)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	40021000 	.word	0x40021000
 8002458:	40010000 	.word	0x40010000

0800245c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <NMI_Handler+0x4>

08002464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <HardFault_Handler+0x4>

0800246c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <MemManage_Handler+0x4>

08002474 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <BusFault_Handler+0x4>

0800247c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <UsageFault_Handler+0x4>

08002484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ac:	f000 fb22 	bl	8002af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY3_Pin);
 80024b8:	2008      	movs	r0, #8
 80024ba:	f001 fabb 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY4_Pin);
 80024c6:	2010      	movs	r0, #16
 80024c8:	f001 fab4 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY5_Pin);
 80024d4:	2020      	movs	r0, #32
 80024d6:	f001 faad 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <TIM2_IRQHandler+0x10>)
 80024e6:	f002 ffa1 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000820 	.word	0x20000820

080024f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80024f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80024fc:	f001 fa9a 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY2_Pin);
 8002500:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002504:	f001 fa96 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return 1;
 8002510:	2301      	movs	r3, #1
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <_kill>:

int _kill(int pid, int sig)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002524:	f004 fb24 	bl	8006b70 <__errno>
 8002528:	4603      	mov	r3, r0
 800252a:	2216      	movs	r2, #22
 800252c:	601a      	str	r2, [r3, #0]
  return -1;
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <_exit>:

void _exit (int status)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002542:	f04f 31ff 	mov.w	r1, #4294967295
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ffe7 	bl	800251a <_kill>
  while (1) {}    /* Make sure we hang here */
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <_exit+0x12>

08002550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e00a      	b.n	8002578 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002562:	f3af 8000 	nop.w
 8002566:	4601      	mov	r1, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	60ba      	str	r2, [r7, #8]
 800256e:	b2ca      	uxtb	r2, r1
 8002570:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	dbf0      	blt.n	8002562 <_read+0x12>
  }

  return len;
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e009      	b.n	80025b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	60ba      	str	r2, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	dbf1      	blt.n	800259c <_write+0x12>
  }
  return len;
 80025b8:	687b      	ldr	r3, [r7, #4]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <_close>:

int _close(int file)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e8:	605a      	str	r2, [r3, #4]
  return 0;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <_isatty>:

int _isatty(int file)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
	...

08002624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800262c:	4a14      	ldr	r2, [pc, #80]	@ (8002680 <_sbrk+0x5c>)
 800262e:	4b15      	ldr	r3, [pc, #84]	@ (8002684 <_sbrk+0x60>)
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002638:	4b13      	ldr	r3, [pc, #76]	@ (8002688 <_sbrk+0x64>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002640:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <_sbrk+0x64>)
 8002642:	4a12      	ldr	r2, [pc, #72]	@ (800268c <_sbrk+0x68>)
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002646:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	429a      	cmp	r2, r3
 8002652:	d207      	bcs.n	8002664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002654:	f004 fa8c 	bl	8006b70 <__errno>
 8002658:	4603      	mov	r3, r0
 800265a:	220c      	movs	r2, #12
 800265c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	e009      	b.n	8002678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002664:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266a:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <_sbrk+0x64>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	4a05      	ldr	r2, [pc, #20]	@ (8002688 <_sbrk+0x64>)
 8002674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002676:	68fb      	ldr	r3, [r7, #12]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20005000 	.word	0x20005000
 8002684:	00000400 	.word	0x00000400
 8002688:	2000081c 	.word	0x2000081c
 800268c:	20000a48 	.word	0x20000a48

08002690 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026a2:	f107 0308 	add.w	r3, r7, #8
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b0:	463b      	mov	r3, r7
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002730 <MX_TIM2_Init+0x94>)
 80026ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <MX_TIM2_Init+0x94>)
 80026c2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80026c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c8:	4b19      	ldr	r3, [pc, #100]	@ (8002730 <MX_TIM2_Init+0x94>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80026ce:	4b18      	ldr	r3, [pc, #96]	@ (8002730 <MX_TIM2_Init+0x94>)
 80026d0:	2263      	movs	r2, #99	@ 0x63
 80026d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d4:	4b16      	ldr	r3, [pc, #88]	@ (8002730 <MX_TIM2_Init+0x94>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <MX_TIM2_Init+0x94>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026e0:	4813      	ldr	r0, [pc, #76]	@ (8002730 <MX_TIM2_Init+0x94>)
 80026e2:	f002 fbd7 	bl	8004e94 <HAL_TIM_Base_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026ec:	f7ff faf7 	bl	8001cde <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026f6:	f107 0308 	add.w	r3, r7, #8
 80026fa:	4619      	mov	r1, r3
 80026fc:	480c      	ldr	r0, [pc, #48]	@ (8002730 <MX_TIM2_Init+0x94>)
 80026fe:	f003 f847 	bl	8005790 <HAL_TIM_ConfigClockSource>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002708:	f7ff fae9 	bl	8001cde <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800270c:	2300      	movs	r3, #0
 800270e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002714:	463b      	mov	r3, r7
 8002716:	4619      	mov	r1, r3
 8002718:	4805      	ldr	r0, [pc, #20]	@ (8002730 <MX_TIM2_Init+0x94>)
 800271a:	f003 fbd5 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002724:	f7ff fadb 	bl	8001cde <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002728:	bf00      	nop
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000820 	.word	0x20000820

08002734 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08c      	sub	sp, #48	@ 0x30
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	2224      	movs	r2, #36	@ 0x24
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f004 f9c1 	bl	8006aca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002750:	4b20      	ldr	r3, [pc, #128]	@ (80027d4 <MX_TIM3_Init+0xa0>)
 8002752:	4a21      	ldr	r2, [pc, #132]	@ (80027d8 <MX_TIM3_Init+0xa4>)
 8002754:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 8002756:	4b1f      	ldr	r3, [pc, #124]	@ (80027d4 <MX_TIM3_Init+0xa0>)
 8002758:	2201      	movs	r2, #1
 800275a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275c:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <MX_TIM3_Init+0xa0>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002762:	4b1c      	ldr	r3, [pc, #112]	@ (80027d4 <MX_TIM3_Init+0xa0>)
 8002764:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002768:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276a:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <MX_TIM3_Init+0xa0>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002770:	4b18      	ldr	r3, [pc, #96]	@ (80027d4 <MX_TIM3_Init+0xa0>)
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002776:	2303      	movs	r3, #3
 8002778:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800277e:	2301      	movs	r3, #1
 8002780:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800278a:	2302      	movs	r3, #2
 800278c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800278e:	2301      	movs	r3, #1
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002792:	2300      	movs	r3, #0
 8002794:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	4619      	mov	r1, r3
 80027a0:	480c      	ldr	r0, [pc, #48]	@ (80027d4 <MX_TIM3_Init+0xa0>)
 80027a2:	f002 fd13 	bl	80051cc <HAL_TIM_Encoder_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80027ac:	f7ff fa97 	bl	8001cde <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b0:	2300      	movs	r3, #0
 80027b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4805      	ldr	r0, [pc, #20]	@ (80027d4 <MX_TIM3_Init+0xa0>)
 80027be:	f003 fb83 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80027c8:	f7ff fa89 	bl	8001cde <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027cc:	bf00      	nop
 80027ce:	3730      	adds	r7, #48	@ 0x30
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000868 	.word	0x20000868
 80027d8:	40000400 	.word	0x40000400

080027dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08e      	sub	sp, #56	@ 0x38
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f0:	f107 0320 	add.w	r3, r7, #32
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
 8002808:	615a      	str	r2, [r3, #20]
 800280a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800280c:	4b2d      	ldr	r3, [pc, #180]	@ (80028c4 <MX_TIM4_Init+0xe8>)
 800280e:	4a2e      	ldr	r2, [pc, #184]	@ (80028c8 <MX_TIM4_Init+0xec>)
 8002810:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002812:	4b2c      	ldr	r3, [pc, #176]	@ (80028c4 <MX_TIM4_Init+0xe8>)
 8002814:	2200      	movs	r2, #0
 8002816:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002818:	4b2a      	ldr	r3, [pc, #168]	@ (80028c4 <MX_TIM4_Init+0xe8>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7200-1;
 800281e:	4b29      	ldr	r3, [pc, #164]	@ (80028c4 <MX_TIM4_Init+0xe8>)
 8002820:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002824:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002826:	4b27      	ldr	r3, [pc, #156]	@ (80028c4 <MX_TIM4_Init+0xe8>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282c:	4b25      	ldr	r3, [pc, #148]	@ (80028c4 <MX_TIM4_Init+0xe8>)
 800282e:	2200      	movs	r2, #0
 8002830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002832:	4824      	ldr	r0, [pc, #144]	@ (80028c4 <MX_TIM4_Init+0xe8>)
 8002834:	f002 fb2e 	bl	8004e94 <HAL_TIM_Base_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800283e:	f7ff fa4e 	bl	8001cde <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002842:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002846:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002848:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800284c:	4619      	mov	r1, r3
 800284e:	481d      	ldr	r0, [pc, #116]	@ (80028c4 <MX_TIM4_Init+0xe8>)
 8002850:	f002 ff9e 	bl	8005790 <HAL_TIM_ConfigClockSource>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800285a:	f7ff fa40 	bl	8001cde <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800285e:	4819      	ldr	r0, [pc, #100]	@ (80028c4 <MX_TIM4_Init+0xe8>)
 8002860:	f002 fbba 	bl	8004fd8 <HAL_TIM_PWM_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800286a:	f7ff fa38 	bl	8001cde <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002876:	f107 0320 	add.w	r3, r7, #32
 800287a:	4619      	mov	r1, r3
 800287c:	4811      	ldr	r0, [pc, #68]	@ (80028c4 <MX_TIM4_Init+0xe8>)
 800287e:	f003 fb23 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002888:	f7ff fa29 	bl	8001cde <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800288c:	2360      	movs	r3, #96	@ 0x60
 800288e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 7000;
 8002890:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002894:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	2200      	movs	r2, #0
 80028a2:	4619      	mov	r1, r3
 80028a4:	4807      	ldr	r0, [pc, #28]	@ (80028c4 <MX_TIM4_Init+0xe8>)
 80028a6:	f002 feb1 	bl	800560c <HAL_TIM_PWM_ConfigChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80028b0:	f7ff fa15 	bl	8001cde <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80028b4:	4803      	ldr	r0, [pc, #12]	@ (80028c4 <MX_TIM4_Init+0xe8>)
 80028b6:	f000 f87f 	bl	80029b8 <HAL_TIM_MspPostInit>

}
 80028ba:	bf00      	nop
 80028bc:	3738      	adds	r7, #56	@ 0x38
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200008b0 	.word	0x200008b0
 80028c8:	40000800 	.word	0x40000800

080028cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028dc:	d114      	bne.n	8002908 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028de:	4b15      	ldr	r3, [pc, #84]	@ (8002934 <HAL_TIM_Base_MspInit+0x68>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <HAL_TIM_Base_MspInit+0x68>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	61d3      	str	r3, [r2, #28]
 80028ea:	4b12      	ldr	r3, [pc, #72]	@ (8002934 <HAL_TIM_Base_MspInit+0x68>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	201c      	movs	r0, #28
 80028fc:	f000 fec7 	bl	800368e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002900:	201c      	movs	r0, #28
 8002902:	f000 fee0 	bl	80036c6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002906:	e010      	b.n	800292a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0a      	ldr	r2, [pc, #40]	@ (8002938 <HAL_TIM_Base_MspInit+0x6c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10b      	bne.n	800292a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002912:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <HAL_TIM_Base_MspInit+0x68>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a07      	ldr	r2, [pc, #28]	@ (8002934 <HAL_TIM_Base_MspInit+0x68>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	61d3      	str	r3, [r2, #28]
 800291e:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <HAL_TIM_Base_MspInit+0x68>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	40000800 	.word	0x40000800

0800293c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0310 	add.w	r3, r7, #16
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a15      	ldr	r2, [pc, #84]	@ (80029ac <HAL_TIM_Encoder_MspInit+0x70>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d123      	bne.n	80029a4 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800295c:	4b14      	ldr	r3, [pc, #80]	@ (80029b0 <HAL_TIM_Encoder_MspInit+0x74>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	4a13      	ldr	r2, [pc, #76]	@ (80029b0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002962:	f043 0302 	orr.w	r3, r3, #2
 8002966:	61d3      	str	r3, [r2, #28]
 8002968:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <HAL_TIM_Encoder_MspInit+0x74>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	4b0e      	ldr	r3, [pc, #56]	@ (80029b0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	4a0d      	ldr	r2, [pc, #52]	@ (80029b0 <HAL_TIM_Encoder_MspInit+0x74>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	6193      	str	r3, [r2, #24]
 8002980:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800298c:	23c0      	movs	r3, #192	@ 0xc0
 800298e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	4619      	mov	r1, r3
 800299e:	4805      	ldr	r0, [pc, #20]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0x78>)
 80029a0:	f000 feac 	bl	80036fc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029a4:	bf00      	nop
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010800 	.word	0x40010800

080029b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002a10 <HAL_TIM_MspPostInit+0x58>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d117      	bne.n	8002a08 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a14 <HAL_TIM_MspPostInit+0x5c>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a14 <HAL_TIM_MspPostInit+0x5c>)
 80029de:	f043 0308 	orr.w	r3, r3, #8
 80029e2:	6193      	str	r3, [r2, #24]
 80029e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <HAL_TIM_MspPostInit+0x5c>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PWMA_Pin;
 80029f0:	2340      	movs	r3, #64	@ 0x40
 80029f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2302      	movs	r3, #2
 80029fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMA_GPIO_Port, &GPIO_InitStruct);
 80029fc:	f107 0310 	add.w	r3, r7, #16
 8002a00:	4619      	mov	r1, r3
 8002a02:	4805      	ldr	r0, [pc, #20]	@ (8002a18 <HAL_TIM_MspPostInit+0x60>)
 8002a04:	f000 fe7a 	bl	80036fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a08:	bf00      	nop
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40000800 	.word	0x40000800
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010c00 	.word	0x40010c00

08002a1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a1c:	f7ff fe38 	bl	8002690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a20:	480b      	ldr	r0, [pc, #44]	@ (8002a50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a22:	490c      	ldr	r1, [pc, #48]	@ (8002a54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a24:	4a0c      	ldr	r2, [pc, #48]	@ (8002a58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a28:	e002      	b.n	8002a30 <LoopCopyDataInit>

08002a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a2e:	3304      	adds	r3, #4

08002a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a34:	d3f9      	bcc.n	8002a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a36:	4a09      	ldr	r2, [pc, #36]	@ (8002a5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a38:	4c09      	ldr	r4, [pc, #36]	@ (8002a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a3c:	e001      	b.n	8002a42 <LoopFillZerobss>

08002a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a40:	3204      	adds	r2, #4

08002a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a44:	d3fb      	bcc.n	8002a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a46:	f004 f899 	bl	8006b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a4a:	f7fe ffcf 	bl	80019ec <main>
  bx lr
 8002a4e:	4770      	bx	lr
  ldr r0, =_sdata
 8002a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a54:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002a58:	08009ac8 	.word	0x08009ac8
  ldr r2, =_sbss
 8002a5c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002a60:	20000a48 	.word	0x20000a48

08002a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a64:	e7fe      	b.n	8002a64 <ADC1_2_IRQHandler>
	...

08002a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a6c:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <HAL_Init+0x28>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a07      	ldr	r2, [pc, #28]	@ (8002a90 <HAL_Init+0x28>)
 8002a72:	f043 0310 	orr.w	r3, r3, #16
 8002a76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f000 fdfd 	bl	8003678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7e:	200f      	movs	r0, #15
 8002a80:	f000 f808 	bl	8002a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a84:	f7ff fcb8 	bl	80023f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40022000 	.word	0x40022000

08002a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <HAL_InitTick+0x54>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_InitTick+0x58>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fe15 	bl	80036e2 <HAL_SYSTICK_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00e      	b.n	8002ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d80a      	bhi.n	8002ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f000 fddd 	bl	800368e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad4:	4a06      	ldr	r2, [pc, #24]	@ (8002af0 <HAL_InitTick+0x5c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000008 	.word	0x20000008
 8002aec:	20000010 	.word	0x20000010
 8002af0:	2000000c 	.word	0x2000000c

08002af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af8:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <HAL_IncTick+0x1c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_IncTick+0x20>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	4a03      	ldr	r2, [pc, #12]	@ (8002b14 <HAL_IncTick+0x20>)
 8002b06:	6013      	str	r3, [r2, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	20000010 	.word	0x20000010
 8002b14:	200008f8 	.word	0x200008f8

08002b18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b1c:	4b02      	ldr	r3, [pc, #8]	@ (8002b28 <HAL_GetTick+0x10>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	200008f8 	.word	0x200008f8

08002b2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0be      	b.n	8002ccc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe fbc8 	bl	8001300 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fbc5 	bl	8003300 <ADC_ConversionStop_Disable>
 8002b76:	4603      	mov	r3, r0
 8002b78:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 8099 	bne.w	8002cba <HAL_ADC_Init+0x18e>
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 8095 	bne.w	8002cba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b98:	f023 0302 	bic.w	r3, r3, #2
 8002b9c:	f043 0202 	orr.w	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7b1b      	ldrb	r3, [r3, #12]
 8002bb2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bb4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bc4:	d003      	beq.n	8002bce <HAL_ADC_Init+0xa2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d102      	bne.n	8002bd4 <HAL_ADC_Init+0xa8>
 8002bce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bd2:	e000      	b.n	8002bd6 <HAL_ADC_Init+0xaa>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7d1b      	ldrb	r3, [r3, #20]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d119      	bne.n	8002c18 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7b1b      	ldrb	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d109      	bne.n	8002c00 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	035a      	lsls	r2, r3, #13
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	e00b      	b.n	8002c18 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <HAL_ADC_Init+0x1a8>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c48:	d003      	beq.n	8002c52 <HAL_ADC_Init+0x126>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d104      	bne.n	8002c5c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	051b      	lsls	r3, r3, #20
 8002c5a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	4b18      	ldr	r3, [pc, #96]	@ (8002cd8 <HAL_ADC_Init+0x1ac>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d10b      	bne.n	8002c98 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c96:	e018      	b.n	8002cca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9c:	f023 0312 	bic.w	r3, r3, #18
 8002ca0:	f043 0210 	orr.w	r2, r3, #16
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cb8:	e007      	b.n	8002cca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbe:	f043 0210 	orr.w	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	ffe1f7fd 	.word	0xffe1f7fd
 8002cd8:	ff1f0efe 	.word	0xff1f0efe

08002cdc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_Start+0x1a>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e098      	b.n	8002e28 <HAL_ADC_Start+0x14c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 faa4 	bl	800324c <ADC_Enable>
 8002d04:	4603      	mov	r3, r0
 8002d06:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f040 8087 	bne.w	8002e1e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a41      	ldr	r2, [pc, #260]	@ (8002e30 <HAL_ADC_Start+0x154>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d105      	bne.n	8002d3a <HAL_ADC_Start+0x5e>
 8002d2e:	4b41      	ldr	r3, [pc, #260]	@ (8002e34 <HAL_ADC_Start+0x158>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d115      	bne.n	8002d66 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d026      	beq.n	8002da2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d58:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d5c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d64:	e01d      	b.n	8002da2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a2f      	ldr	r2, [pc, #188]	@ (8002e34 <HAL_ADC_Start+0x158>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <HAL_ADC_Start+0xaa>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2b      	ldr	r2, [pc, #172]	@ (8002e30 <HAL_ADC_Start+0x154>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10d      	bne.n	8002da2 <HAL_ADC_Start+0xc6>
 8002d86:	4b2b      	ldr	r3, [pc, #172]	@ (8002e34 <HAL_ADC_Start+0x158>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d006      	beq.n	8002dbc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db2:	f023 0206 	bic.w	r2, r3, #6
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002dba:	e002      	b.n	8002dc2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f06f 0202 	mvn.w	r2, #2
 8002dd2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002dde:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002de2:	d113      	bne.n	8002e0c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002de8:	4a11      	ldr	r2, [pc, #68]	@ (8002e30 <HAL_ADC_Start+0x154>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d105      	bne.n	8002dfa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002dee:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <HAL_ADC_Start+0x158>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d108      	bne.n	8002e0c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	e00c      	b.n	8002e26 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	e003      	b.n	8002e26 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40012800 	.word	0x40012800
 8002e34:	40012400 	.word	0x40012400

08002e38 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e4e:	f7ff fe63 	bl	8002b18 <HAL_GetTick>
 8002e52:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0d3      	b.n	8003022 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d131      	bne.n	8002eec <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d12a      	bne.n	8002eec <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e96:	e021      	b.n	8002edc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d01d      	beq.n	8002edc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_ADC_PollForConversion+0x7e>
 8002ea6:	f7ff fe37 	bl	8002b18 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d212      	bcs.n	8002edc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0a2      	b.n	8003022 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0d6      	beq.n	8002e98 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002eea:	e070      	b.n	8002fce <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002eec:	4b4f      	ldr	r3, [pc, #316]	@ (800302c <HAL_ADC_PollForConversion+0x1f4>)
 8002eee:	681c      	ldr	r4, [r3, #0]
 8002ef0:	2002      	movs	r0, #2
 8002ef2:	f001 ff19 	bl	8004d28 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6919      	ldr	r1, [r3, #16]
 8002f02:	4b4b      	ldr	r3, [pc, #300]	@ (8003030 <HAL_ADC_PollForConversion+0x1f8>)
 8002f04:	400b      	ands	r3, r1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d118      	bne.n	8002f3c <HAL_ADC_PollForConversion+0x104>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68d9      	ldr	r1, [r3, #12]
 8002f10:	4b48      	ldr	r3, [pc, #288]	@ (8003034 <HAL_ADC_PollForConversion+0x1fc>)
 8002f12:	400b      	ands	r3, r1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d111      	bne.n	8002f3c <HAL_ADC_PollForConversion+0x104>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6919      	ldr	r1, [r3, #16]
 8002f1e:	4b46      	ldr	r3, [pc, #280]	@ (8003038 <HAL_ADC_PollForConversion+0x200>)
 8002f20:	400b      	ands	r3, r1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d108      	bne.n	8002f38 <HAL_ADC_PollForConversion+0x100>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68d9      	ldr	r1, [r3, #12]
 8002f2c:	4b43      	ldr	r3, [pc, #268]	@ (800303c <HAL_ADC_PollForConversion+0x204>)
 8002f2e:	400b      	ands	r3, r1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_ADC_PollForConversion+0x100>
 8002f34:	2314      	movs	r3, #20
 8002f36:	e020      	b.n	8002f7a <HAL_ADC_PollForConversion+0x142>
 8002f38:	2329      	movs	r3, #41	@ 0x29
 8002f3a:	e01e      	b.n	8002f7a <HAL_ADC_PollForConversion+0x142>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6919      	ldr	r1, [r3, #16]
 8002f42:	4b3d      	ldr	r3, [pc, #244]	@ (8003038 <HAL_ADC_PollForConversion+0x200>)
 8002f44:	400b      	ands	r3, r1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_ADC_PollForConversion+0x120>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68d9      	ldr	r1, [r3, #12]
 8002f50:	4b3a      	ldr	r3, [pc, #232]	@ (800303c <HAL_ADC_PollForConversion+0x204>)
 8002f52:	400b      	ands	r3, r1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00d      	beq.n	8002f74 <HAL_ADC_PollForConversion+0x13c>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6919      	ldr	r1, [r3, #16]
 8002f5e:	4b38      	ldr	r3, [pc, #224]	@ (8003040 <HAL_ADC_PollForConversion+0x208>)
 8002f60:	400b      	ands	r3, r1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_ADC_PollForConversion+0x140>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68d9      	ldr	r1, [r3, #12]
 8002f6c:	4b34      	ldr	r3, [pc, #208]	@ (8003040 <HAL_ADC_PollForConversion+0x208>)
 8002f6e:	400b      	ands	r3, r1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_ADC_PollForConversion+0x140>
 8002f74:	2354      	movs	r3, #84	@ 0x54
 8002f76:	e000      	b.n	8002f7a <HAL_ADC_PollForConversion+0x142>
 8002f78:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f80:	e021      	b.n	8002fc6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d01a      	beq.n	8002fc0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d007      	beq.n	8002fa0 <HAL_ADC_PollForConversion+0x168>
 8002f90:	f7ff fdc2 	bl	8002b18 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d20f      	bcs.n	8002fc0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d90b      	bls.n	8002fc0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fac:	f043 0204 	orr.w	r2, r3, #4
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e030      	b.n	8003022 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d8d9      	bhi.n	8002f82 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f06f 0212 	mvn.w	r2, #18
 8002fd6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fdc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002fee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002ff2:	d115      	bne.n	8003020 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d111      	bne.n	8003020 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd90      	pop	{r4, r7, pc}
 800302a:	bf00      	nop
 800302c:	20000008 	.word	0x20000008
 8003030:	24924924 	.word	0x24924924
 8003034:	00924924 	.word	0x00924924
 8003038:	12492492 	.word	0x12492492
 800303c:	00492492 	.word	0x00492492
 8003040:	00249249 	.word	0x00249249

08003044 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x20>
 8003078:	2302      	movs	r3, #2
 800307a:	e0dc      	b.n	8003236 <HAL_ADC_ConfigChannel+0x1da>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b06      	cmp	r3, #6
 800308a:	d81c      	bhi.n	80030c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	3b05      	subs	r3, #5
 800309e:	221f      	movs	r2, #31
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	4019      	ands	r1, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	3b05      	subs	r3, #5
 80030b8:	fa00 f203 	lsl.w	r2, r0, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80030c4:	e03c      	b.n	8003140 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d81c      	bhi.n	8003108 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	3b23      	subs	r3, #35	@ 0x23
 80030e0:	221f      	movs	r2, #31
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	4019      	ands	r1, r3
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	3b23      	subs	r3, #35	@ 0x23
 80030fa:	fa00 f203 	lsl.w	r2, r0, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	631a      	str	r2, [r3, #48]	@ 0x30
 8003106:	e01b      	b.n	8003140 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	3b41      	subs	r3, #65	@ 0x41
 800311a:	221f      	movs	r2, #31
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	4019      	ands	r1, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3b41      	subs	r3, #65	@ 0x41
 8003134:	fa00 f203 	lsl.w	r2, r0, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b09      	cmp	r3, #9
 8003146:	d91c      	bls.n	8003182 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68d9      	ldr	r1, [r3, #12]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	3b1e      	subs	r3, #30
 800315a:	2207      	movs	r2, #7
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	4019      	ands	r1, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6898      	ldr	r0, [r3, #8]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	3b1e      	subs	r3, #30
 8003174:	fa00 f203 	lsl.w	r2, r0, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	60da      	str	r2, [r3, #12]
 8003180:	e019      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6919      	ldr	r1, [r3, #16]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	2207      	movs	r2, #7
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	4019      	ands	r1, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6898      	ldr	r0, [r3, #8]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	fa00 f203 	lsl.w	r2, r0, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d003      	beq.n	80031c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031c2:	2b11      	cmp	r3, #17
 80031c4:	d132      	bne.n	800322c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003240 <HAL_ADC_ConfigChannel+0x1e4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d125      	bne.n	800321c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d126      	bne.n	800322c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80031ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d11a      	bne.n	800322c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031f6:	4b13      	ldr	r3, [pc, #76]	@ (8003244 <HAL_ADC_ConfigChannel+0x1e8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a13      	ldr	r2, [pc, #76]	@ (8003248 <HAL_ADC_ConfigChannel+0x1ec>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	0c9a      	lsrs	r2, r3, #18
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800320c:	e002      	b.n	8003214 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3b01      	subs	r3, #1
 8003212:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f9      	bne.n	800320e <HAL_ADC_ConfigChannel+0x1b2>
 800321a:	e007      	b.n	800322c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	40012400 	.word	0x40012400
 8003244:	20000008 	.word	0x20000008
 8003248:	431bde83 	.word	0x431bde83

0800324c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d040      	beq.n	80032ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800327a:	4b1f      	ldr	r3, [pc, #124]	@ (80032f8 <ADC_Enable+0xac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1f      	ldr	r2, [pc, #124]	@ (80032fc <ADC_Enable+0xb0>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	0c9b      	lsrs	r3, r3, #18
 8003286:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003288:	e002      	b.n	8003290 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	3b01      	subs	r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f9      	bne.n	800328a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003296:	f7ff fc3f 	bl	8002b18 <HAL_GetTick>
 800329a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800329c:	e01f      	b.n	80032de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800329e:	f7ff fc3b 	bl	8002b18 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d918      	bls.n	80032de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d011      	beq.n	80032de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032be:	f043 0210 	orr.w	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ca:	f043 0201 	orr.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e007      	b.n	80032ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d1d8      	bne.n	800329e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000008 	.word	0x20000008
 80032fc:	431bde83 	.word	0x431bde83

08003300 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b01      	cmp	r3, #1
 8003318:	d12e      	bne.n	8003378 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800332a:	f7ff fbf5 	bl	8002b18 <HAL_GetTick>
 800332e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003330:	e01b      	b.n	800336a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003332:	f7ff fbf1 	bl	8002b18 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d914      	bls.n	800336a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	d10d      	bne.n	800336a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003352:	f043 0210 	orr.w	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e007      	b.n	800337a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d0dc      	beq.n	8003332 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_ADCEx_Calibration_Start+0x1e>
 800339e:	2302      	movs	r3, #2
 80033a0:	e097      	b.n	80034d2 <HAL_ADCEx_Calibration_Start+0x14e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff ffa8 	bl	8003300 <ADC_ConversionStop_Disable>
 80033b0:	4603      	mov	r3, r0
 80033b2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff49 	bl	800324c <ADC_Enable>
 80033ba:	4603      	mov	r3, r0
 80033bc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f040 8081 	bne.w	80034c8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033ce:	f023 0302 	bic.w	r3, r3, #2
 80033d2:	f043 0202 	orr.w	r2, r3, #2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80033da:	4b40      	ldr	r3, [pc, #256]	@ (80034dc <HAL_ADCEx_Calibration_Start+0x158>)
 80033dc:	681c      	ldr	r4, [r3, #0]
 80033de:	2002      	movs	r0, #2
 80033e0:	f001 fca2 	bl	8004d28 <HAL_RCCEx_GetPeriphCLKFreq>
 80033e4:	4603      	mov	r3, r0
 80033e6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80033ea:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80033ec:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80033ee:	e002      	b.n	80033f6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f9      	bne.n	80033f0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0208 	orr.w	r2, r2, #8
 800340a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800340c:	f7ff fb84 	bl	8002b18 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003412:	e01b      	b.n	800344c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003414:	f7ff fb80 	bl	8002b18 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b0a      	cmp	r3, #10
 8003420:	d914      	bls.n	800344c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	f023 0312 	bic.w	r3, r3, #18
 8003438:	f043 0210 	orr.w	r2, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e042      	b.n	80034d2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1dc      	bne.n	8003414 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0204 	orr.w	r2, r2, #4
 8003468:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800346a:	f7ff fb55 	bl	8002b18 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003470:	e01b      	b.n	80034aa <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003472:	f7ff fb51 	bl	8002b18 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b0a      	cmp	r3, #10
 800347e:	d914      	bls.n	80034aa <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00d      	beq.n	80034aa <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003492:	f023 0312 	bic.w	r3, r3, #18
 8003496:	f043 0210 	orr.w	r2, r3, #16
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e013      	b.n	80034d2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1dc      	bne.n	8003472 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034bc:	f023 0303 	bic.w	r3, r3, #3
 80034c0:	f043 0201 	orr.w	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd90      	pop	{r4, r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000008 	.word	0x20000008

080034e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003524 <__NVIC_SetPriorityGrouping+0x44>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034fc:	4013      	ands	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003508:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800350c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003512:	4a04      	ldr	r2, [pc, #16]	@ (8003524 <__NVIC_SetPriorityGrouping+0x44>)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	60d3      	str	r3, [r2, #12]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800352c:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <__NVIC_GetPriorityGrouping+0x18>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	0a1b      	lsrs	r3, r3, #8
 8003532:	f003 0307 	and.w	r3, r3, #7
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	2b00      	cmp	r3, #0
 8003554:	db0b      	blt.n	800356e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	f003 021f 	and.w	r2, r3, #31
 800355c:	4906      	ldr	r1, [pc, #24]	@ (8003578 <__NVIC_EnableIRQ+0x34>)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2001      	movs	r0, #1
 8003566:	fa00 f202 	lsl.w	r2, r0, r2
 800356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100

0800357c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	6039      	str	r1, [r7, #0]
 8003586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358c:	2b00      	cmp	r3, #0
 800358e:	db0a      	blt.n	80035a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	490c      	ldr	r1, [pc, #48]	@ (80035c8 <__NVIC_SetPriority+0x4c>)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	0112      	lsls	r2, r2, #4
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	440b      	add	r3, r1
 80035a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a4:	e00a      	b.n	80035bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	4908      	ldr	r1, [pc, #32]	@ (80035cc <__NVIC_SetPriority+0x50>)
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	3b04      	subs	r3, #4
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	440b      	add	r3, r1
 80035ba:	761a      	strb	r2, [r3, #24]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	e000e100 	.word	0xe000e100
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	@ 0x24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f1c3 0307 	rsb	r3, r3, #7
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	bf28      	it	cs
 80035ee:	2304      	movcs	r3, #4
 80035f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d902      	bls.n	8003600 <NVIC_EncodePriority+0x30>
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3b03      	subs	r3, #3
 80035fe:	e000      	b.n	8003602 <NVIC_EncodePriority+0x32>
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	401a      	ands	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43d9      	mvns	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	4313      	orrs	r3, r2
         );
}
 800362a:	4618      	mov	r0, r3
 800362c:	3724      	adds	r7, #36	@ 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3b01      	subs	r3, #1
 8003640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003644:	d301      	bcc.n	800364a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003646:	2301      	movs	r3, #1
 8003648:	e00f      	b.n	800366a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364a:	4a0a      	ldr	r2, [pc, #40]	@ (8003674 <SysTick_Config+0x40>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003652:	210f      	movs	r1, #15
 8003654:	f04f 30ff 	mov.w	r0, #4294967295
 8003658:	f7ff ff90 	bl	800357c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800365c:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <SysTick_Config+0x40>)
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003662:	4b04      	ldr	r3, [pc, #16]	@ (8003674 <SysTick_Config+0x40>)
 8003664:	2207      	movs	r2, #7
 8003666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	e000e010 	.word	0xe000e010

08003678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ff2d 	bl	80034e0 <__NVIC_SetPriorityGrouping>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af00      	add	r7, sp, #0
 8003694:	4603      	mov	r3, r0
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036a0:	f7ff ff42 	bl	8003528 <__NVIC_GetPriorityGrouping>
 80036a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	6978      	ldr	r0, [r7, #20]
 80036ac:	f7ff ff90 	bl	80035d0 <NVIC_EncodePriority>
 80036b0:	4602      	mov	r2, r0
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff5f 	bl	800357c <__NVIC_SetPriority>
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff35 	bl	8003544 <__NVIC_EnableIRQ>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ffa2 	bl	8003634 <SysTick_Config>
 80036f0:	4603      	mov	r3, r0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b08b      	sub	sp, #44	@ 0x2c
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003706:	2300      	movs	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800370a:	2300      	movs	r3, #0
 800370c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370e:	e169      	b.n	80039e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003710:	2201      	movs	r2, #1
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	429a      	cmp	r2, r3
 800372a:	f040 8158 	bne.w	80039de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4a9a      	ldr	r2, [pc, #616]	@ (800399c <HAL_GPIO_Init+0x2a0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d05e      	beq.n	80037f6 <HAL_GPIO_Init+0xfa>
 8003738:	4a98      	ldr	r2, [pc, #608]	@ (800399c <HAL_GPIO_Init+0x2a0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d875      	bhi.n	800382a <HAL_GPIO_Init+0x12e>
 800373e:	4a98      	ldr	r2, [pc, #608]	@ (80039a0 <HAL_GPIO_Init+0x2a4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d058      	beq.n	80037f6 <HAL_GPIO_Init+0xfa>
 8003744:	4a96      	ldr	r2, [pc, #600]	@ (80039a0 <HAL_GPIO_Init+0x2a4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d86f      	bhi.n	800382a <HAL_GPIO_Init+0x12e>
 800374a:	4a96      	ldr	r2, [pc, #600]	@ (80039a4 <HAL_GPIO_Init+0x2a8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d052      	beq.n	80037f6 <HAL_GPIO_Init+0xfa>
 8003750:	4a94      	ldr	r2, [pc, #592]	@ (80039a4 <HAL_GPIO_Init+0x2a8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d869      	bhi.n	800382a <HAL_GPIO_Init+0x12e>
 8003756:	4a94      	ldr	r2, [pc, #592]	@ (80039a8 <HAL_GPIO_Init+0x2ac>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d04c      	beq.n	80037f6 <HAL_GPIO_Init+0xfa>
 800375c:	4a92      	ldr	r2, [pc, #584]	@ (80039a8 <HAL_GPIO_Init+0x2ac>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d863      	bhi.n	800382a <HAL_GPIO_Init+0x12e>
 8003762:	4a92      	ldr	r2, [pc, #584]	@ (80039ac <HAL_GPIO_Init+0x2b0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d046      	beq.n	80037f6 <HAL_GPIO_Init+0xfa>
 8003768:	4a90      	ldr	r2, [pc, #576]	@ (80039ac <HAL_GPIO_Init+0x2b0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d85d      	bhi.n	800382a <HAL_GPIO_Init+0x12e>
 800376e:	2b12      	cmp	r3, #18
 8003770:	d82a      	bhi.n	80037c8 <HAL_GPIO_Init+0xcc>
 8003772:	2b12      	cmp	r3, #18
 8003774:	d859      	bhi.n	800382a <HAL_GPIO_Init+0x12e>
 8003776:	a201      	add	r2, pc, #4	@ (adr r2, 800377c <HAL_GPIO_Init+0x80>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	080037f7 	.word	0x080037f7
 8003780:	080037d1 	.word	0x080037d1
 8003784:	080037e3 	.word	0x080037e3
 8003788:	08003825 	.word	0x08003825
 800378c:	0800382b 	.word	0x0800382b
 8003790:	0800382b 	.word	0x0800382b
 8003794:	0800382b 	.word	0x0800382b
 8003798:	0800382b 	.word	0x0800382b
 800379c:	0800382b 	.word	0x0800382b
 80037a0:	0800382b 	.word	0x0800382b
 80037a4:	0800382b 	.word	0x0800382b
 80037a8:	0800382b 	.word	0x0800382b
 80037ac:	0800382b 	.word	0x0800382b
 80037b0:	0800382b 	.word	0x0800382b
 80037b4:	0800382b 	.word	0x0800382b
 80037b8:	0800382b 	.word	0x0800382b
 80037bc:	0800382b 	.word	0x0800382b
 80037c0:	080037d9 	.word	0x080037d9
 80037c4:	080037ed 	.word	0x080037ed
 80037c8:	4a79      	ldr	r2, [pc, #484]	@ (80039b0 <HAL_GPIO_Init+0x2b4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037ce:	e02c      	b.n	800382a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	623b      	str	r3, [r7, #32]
          break;
 80037d6:	e029      	b.n	800382c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	3304      	adds	r3, #4
 80037de:	623b      	str	r3, [r7, #32]
          break;
 80037e0:	e024      	b.n	800382c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	3308      	adds	r3, #8
 80037e8:	623b      	str	r3, [r7, #32]
          break;
 80037ea:	e01f      	b.n	800382c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	330c      	adds	r3, #12
 80037f2:	623b      	str	r3, [r7, #32]
          break;
 80037f4:	e01a      	b.n	800382c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d102      	bne.n	8003804 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037fe:	2304      	movs	r3, #4
 8003800:	623b      	str	r3, [r7, #32]
          break;
 8003802:	e013      	b.n	800382c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d105      	bne.n	8003818 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800380c:	2308      	movs	r3, #8
 800380e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	611a      	str	r2, [r3, #16]
          break;
 8003816:	e009      	b.n	800382c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003818:	2308      	movs	r3, #8
 800381a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	615a      	str	r2, [r3, #20]
          break;
 8003822:	e003      	b.n	800382c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003824:	2300      	movs	r3, #0
 8003826:	623b      	str	r3, [r7, #32]
          break;
 8003828:	e000      	b.n	800382c <HAL_GPIO_Init+0x130>
          break;
 800382a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2bff      	cmp	r3, #255	@ 0xff
 8003830:	d801      	bhi.n	8003836 <HAL_GPIO_Init+0x13a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	e001      	b.n	800383a <HAL_GPIO_Init+0x13e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3304      	adds	r3, #4
 800383a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2bff      	cmp	r3, #255	@ 0xff
 8003840:	d802      	bhi.n	8003848 <HAL_GPIO_Init+0x14c>
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	e002      	b.n	800384e <HAL_GPIO_Init+0x152>
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	3b08      	subs	r3, #8
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	210f      	movs	r1, #15
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	401a      	ands	r2, r3
 8003860:	6a39      	ldr	r1, [r7, #32]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	431a      	orrs	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80b1 	beq.w	80039de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800387c:	4b4d      	ldr	r3, [pc, #308]	@ (80039b4 <HAL_GPIO_Init+0x2b8>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	4a4c      	ldr	r2, [pc, #304]	@ (80039b4 <HAL_GPIO_Init+0x2b8>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6193      	str	r3, [r2, #24]
 8003888:	4b4a      	ldr	r3, [pc, #296]	@ (80039b4 <HAL_GPIO_Init+0x2b8>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003894:	4a48      	ldr	r2, [pc, #288]	@ (80039b8 <HAL_GPIO_Init+0x2bc>)
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	3302      	adds	r3, #2
 800389c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	220f      	movs	r2, #15
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4013      	ands	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a40      	ldr	r2, [pc, #256]	@ (80039bc <HAL_GPIO_Init+0x2c0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <HAL_GPIO_Init+0x1ec>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a3f      	ldr	r2, [pc, #252]	@ (80039c0 <HAL_GPIO_Init+0x2c4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00d      	beq.n	80038e4 <HAL_GPIO_Init+0x1e8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a3e      	ldr	r2, [pc, #248]	@ (80039c4 <HAL_GPIO_Init+0x2c8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d007      	beq.n	80038e0 <HAL_GPIO_Init+0x1e4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a3d      	ldr	r2, [pc, #244]	@ (80039c8 <HAL_GPIO_Init+0x2cc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d101      	bne.n	80038dc <HAL_GPIO_Init+0x1e0>
 80038d8:	2303      	movs	r3, #3
 80038da:	e006      	b.n	80038ea <HAL_GPIO_Init+0x1ee>
 80038dc:	2304      	movs	r3, #4
 80038de:	e004      	b.n	80038ea <HAL_GPIO_Init+0x1ee>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e002      	b.n	80038ea <HAL_GPIO_Init+0x1ee>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <HAL_GPIO_Init+0x1ee>
 80038e8:	2300      	movs	r3, #0
 80038ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ec:	f002 0203 	and.w	r2, r2, #3
 80038f0:	0092      	lsls	r2, r2, #2
 80038f2:	4093      	lsls	r3, r2
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038fa:	492f      	ldr	r1, [pc, #188]	@ (80039b8 <HAL_GPIO_Init+0x2bc>)
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	3302      	adds	r3, #2
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d006      	beq.n	8003922 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003914:	4b2d      	ldr	r3, [pc, #180]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	492c      	ldr	r1, [pc, #176]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	4313      	orrs	r3, r2
 800391e:	608b      	str	r3, [r1, #8]
 8003920:	e006      	b.n	8003930 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003922:	4b2a      	ldr	r3, [pc, #168]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	43db      	mvns	r3, r3
 800392a:	4928      	ldr	r1, [pc, #160]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 800392c:	4013      	ands	r3, r2
 800392e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d006      	beq.n	800394a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800393c:	4b23      	ldr	r3, [pc, #140]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	4922      	ldr	r1, [pc, #136]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	60cb      	str	r3, [r1, #12]
 8003948:	e006      	b.n	8003958 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800394a:	4b20      	ldr	r3, [pc, #128]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	43db      	mvns	r3, r3
 8003952:	491e      	ldr	r1, [pc, #120]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 8003954:	4013      	ands	r3, r2
 8003956:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d006      	beq.n	8003972 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003964:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	4918      	ldr	r1, [pc, #96]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	4313      	orrs	r3, r2
 800396e:	604b      	str	r3, [r1, #4]
 8003970:	e006      	b.n	8003980 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003972:	4b16      	ldr	r3, [pc, #88]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	43db      	mvns	r3, r3
 800397a:	4914      	ldr	r1, [pc, #80]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 800397c:	4013      	ands	r3, r2
 800397e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d021      	beq.n	80039d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800398c:	4b0f      	ldr	r3, [pc, #60]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	490e      	ldr	r1, [pc, #56]	@ (80039cc <HAL_GPIO_Init+0x2d0>)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]
 8003998:	e021      	b.n	80039de <HAL_GPIO_Init+0x2e2>
 800399a:	bf00      	nop
 800399c:	10320000 	.word	0x10320000
 80039a0:	10310000 	.word	0x10310000
 80039a4:	10220000 	.word	0x10220000
 80039a8:	10210000 	.word	0x10210000
 80039ac:	10120000 	.word	0x10120000
 80039b0:	10110000 	.word	0x10110000
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40010800 	.word	0x40010800
 80039c0:	40010c00 	.word	0x40010c00
 80039c4:	40011000 	.word	0x40011000
 80039c8:	40011400 	.word	0x40011400
 80039cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a00 <HAL_GPIO_Init+0x304>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	4909      	ldr	r1, [pc, #36]	@ (8003a00 <HAL_GPIO_Init+0x304>)
 80039da:	4013      	ands	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	3301      	adds	r3, #1
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	fa22 f303 	lsr.w	r3, r2, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f47f ae8e 	bne.w	8003710 <HAL_GPIO_Init+0x14>
  }
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	372c      	adds	r7, #44	@ 0x2c
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	40010400 	.word	0x40010400

08003a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
 8003a10:	4613      	mov	r3, r2
 8003a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a14:	787b      	ldrb	r3, [r7, #1]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a20:	e003      	b.n	8003a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	041a      	lsls	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a3e:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d006      	beq.n	8003a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a4a:	4a05      	ldr	r2, [pc, #20]	@ (8003a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd feba 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40010400 	.word	0x40010400

08003a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e12b      	b.n	8003cce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd fd3e 	bl	800150c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	@ 0x24
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ab6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ac8:	f001 f832 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8003acc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4a81      	ldr	r2, [pc, #516]	@ (8003cd8 <HAL_I2C_Init+0x274>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d807      	bhi.n	8003ae8 <HAL_I2C_Init+0x84>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a80      	ldr	r2, [pc, #512]	@ (8003cdc <HAL_I2C_Init+0x278>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bf94      	ite	ls
 8003ae0:	2301      	movls	r3, #1
 8003ae2:	2300      	movhi	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e006      	b.n	8003af6 <HAL_I2C_Init+0x92>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4a7d      	ldr	r2, [pc, #500]	@ (8003ce0 <HAL_I2C_Init+0x27c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	bf94      	ite	ls
 8003af0:	2301      	movls	r3, #1
 8003af2:	2300      	movhi	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e0e7      	b.n	8003cce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a78      	ldr	r2, [pc, #480]	@ (8003ce4 <HAL_I2C_Init+0x280>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	0c9b      	lsrs	r3, r3, #18
 8003b08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a6a      	ldr	r2, [pc, #424]	@ (8003cd8 <HAL_I2C_Init+0x274>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d802      	bhi.n	8003b38 <HAL_I2C_Init+0xd4>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3301      	adds	r3, #1
 8003b36:	e009      	b.n	8003b4c <HAL_I2C_Init+0xe8>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	4a69      	ldr	r2, [pc, #420]	@ (8003ce8 <HAL_I2C_Init+0x284>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	495c      	ldr	r1, [pc, #368]	@ (8003cd8 <HAL_I2C_Init+0x274>)
 8003b68:	428b      	cmp	r3, r1
 8003b6a:	d819      	bhi.n	8003ba0 <HAL_I2C_Init+0x13c>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1e59      	subs	r1, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b7a:	1c59      	adds	r1, r3, #1
 8003b7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b80:	400b      	ands	r3, r1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_I2C_Init+0x138>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1e59      	subs	r1, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b94:	3301      	adds	r3, #1
 8003b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9a:	e051      	b.n	8003c40 <HAL_I2C_Init+0x1dc>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	e04f      	b.n	8003c40 <HAL_I2C_Init+0x1dc>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d111      	bne.n	8003bcc <HAL_I2C_Init+0x168>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1e58      	subs	r0, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	440b      	add	r3, r1
 8003bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	e012      	b.n	8003bf2 <HAL_I2C_Init+0x18e>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1e58      	subs	r0, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	0099      	lsls	r1, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf0c      	ite	eq
 8003bec:	2301      	moveq	r3, #1
 8003bee:	2300      	movne	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Init+0x196>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e022      	b.n	8003c40 <HAL_I2C_Init+0x1dc>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10e      	bne.n	8003c20 <HAL_I2C_Init+0x1bc>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1e58      	subs	r0, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6859      	ldr	r1, [r3, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	440b      	add	r3, r1
 8003c10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c14:	3301      	adds	r3, #1
 8003c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c1e:	e00f      	b.n	8003c40 <HAL_I2C_Init+0x1dc>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	1e58      	subs	r0, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	0099      	lsls	r1, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c36:	3301      	adds	r3, #1
 8003c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	6809      	ldr	r1, [r1, #0]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6911      	ldr	r1, [r2, #16]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68d2      	ldr	r2, [r2, #12]
 8003c7a:	4311      	orrs	r1, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	000186a0 	.word	0x000186a0
 8003cdc:	001e847f 	.word	0x001e847f
 8003ce0:	003d08ff 	.word	0x003d08ff
 8003ce4:	431bde83 	.word	0x431bde83
 8003ce8:	10624dd3 	.word	0x10624dd3

08003cec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	817b      	strh	r3, [r7, #10]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d00:	f7fe ff0a 	bl	8002b18 <HAL_GetTick>
 8003d04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	f040 80e0 	bne.w	8003ed4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2319      	movs	r3, #25
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4970      	ldr	r1, [pc, #448]	@ (8003ee0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f964 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e0d3      	b.n	8003ed6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_I2C_Master_Transmit+0x50>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e0cc      	b.n	8003ed6 <HAL_I2C_Master_Transmit+0x1ea>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d007      	beq.n	8003d62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0201 	orr.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2221      	movs	r2, #33	@ 0x21
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	893a      	ldrh	r2, [r7, #8]
 8003d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a50      	ldr	r2, [pc, #320]	@ (8003ee4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003da2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003da4:	8979      	ldrh	r1, [r7, #10]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	6a3a      	ldr	r2, [r7, #32]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f89c 	bl	8003ee8 <I2C_MasterRequestWrite>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e08d      	b.n	8003ed6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003dd0:	e066      	b.n	8003ea0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	6a39      	ldr	r1, [r7, #32]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fa22 	bl	8004220 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d107      	bne.n	8003dfa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e06b      	b.n	8003ed6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	781a      	ldrb	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d11b      	bne.n	8003e74 <HAL_I2C_Master_Transmit+0x188>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d017      	beq.n	8003e74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	781a      	ldrb	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	6a39      	ldr	r1, [r7, #32]
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fa19 	bl	80042b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00d      	beq.n	8003ea0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d107      	bne.n	8003e9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e01a      	b.n	8003ed6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d194      	bne.n	8003dd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e000      	b.n	8003ed6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	00100002 	.word	0x00100002
 8003ee4:	ffff0000 	.word	0xffff0000

08003ee8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d006      	beq.n	8003f12 <I2C_MasterRequestWrite+0x2a>
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d003      	beq.n	8003f12 <I2C_MasterRequestWrite+0x2a>
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f10:	d108      	bne.n	8003f24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e00b      	b.n	8003f3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f28:	2b12      	cmp	r3, #18
 8003f2a:	d107      	bne.n	8003f3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f84f 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f62:	d103      	bne.n	8003f6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e035      	b.n	8003fdc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f78:	d108      	bne.n	8003f8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f7a:	897b      	ldrh	r3, [r7, #10]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f88:	611a      	str	r2, [r3, #16]
 8003f8a:	e01b      	b.n	8003fc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f8c:	897b      	ldrh	r3, [r7, #10]
 8003f8e:	11db      	asrs	r3, r3, #7
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 0306 	and.w	r3, r3, #6
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f063 030f 	orn	r3, r3, #15
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	490e      	ldr	r1, [pc, #56]	@ (8003fe4 <I2C_MasterRequestWrite+0xfc>)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f898 	bl	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e010      	b.n	8003fdc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fba:	897b      	ldrh	r3, [r7, #10]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4907      	ldr	r1, [pc, #28]	@ (8003fe8 <I2C_MasterRequestWrite+0x100>)
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f888 	bl	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	00010008 	.word	0x00010008
 8003fe8:	00010002 	.word	0x00010002

08003fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ffc:	e048      	b.n	8004090 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d044      	beq.n	8004090 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004006:	f7fe fd87 	bl	8002b18 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d302      	bcc.n	800401c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d139      	bne.n	8004090 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	0c1b      	lsrs	r3, r3, #16
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d10d      	bne.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	43da      	mvns	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	e00c      	b.n	800405c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	43da      	mvns	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4013      	ands	r3, r2
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	429a      	cmp	r2, r3
 8004060:	d116      	bne.n	8004090 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e023      	b.n	80040d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10d      	bne.n	80040b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	43da      	mvns	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	e00c      	b.n	80040d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	43da      	mvns	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4013      	ands	r3, r2
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d093      	beq.n	8003ffe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040ee:	e071      	b.n	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fe:	d123      	bne.n	8004148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800410e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004118:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	f043 0204 	orr.w	r2, r3, #4
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e067      	b.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	d041      	beq.n	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004150:	f7fe fce2 	bl	8002b18 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	429a      	cmp	r2, r3
 800415e:	d302      	bcc.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d136      	bne.n	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10c      	bne.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	43da      	mvns	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	e00b      	b.n	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	43da      	mvns	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4013      	ands	r3, r2
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d016      	beq.n	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e021      	b.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	0c1b      	lsrs	r3, r3, #16
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d10c      	bne.n	80041f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	43da      	mvns	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	4013      	ands	r3, r2
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e00b      	b.n	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	43da      	mvns	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4013      	ands	r3, r2
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	f47f af6d 	bne.w	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800422c:	e034      	b.n	8004298 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f886 	bl	8004340 <I2C_IsAcknowledgeFailed>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e034      	b.n	80042a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004244:	d028      	beq.n	8004298 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004246:	f7fe fc67 	bl	8002b18 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	d302      	bcc.n	800425c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d11d      	bne.n	8004298 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	2b80      	cmp	r3, #128	@ 0x80
 8004268:	d016      	beq.n	8004298 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	f043 0220 	orr.w	r2, r3, #32
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e007      	b.n	80042a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a2:	2b80      	cmp	r3, #128	@ 0x80
 80042a4:	d1c3      	bne.n	800422e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042bc:	e034      	b.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f83e 	bl	8004340 <I2C_IsAcknowledgeFailed>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e034      	b.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d028      	beq.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d6:	f7fe fc1f 	bl	8002b18 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d302      	bcc.n	80042ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d11d      	bne.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d016      	beq.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e007      	b.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b04      	cmp	r3, #4
 8004334:	d1c3      	bne.n	80042be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004356:	d11b      	bne.n	8004390 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004360:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437c:	f043 0204 	orr.w	r2, r3, #4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e272      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8087 	beq.w	80044ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043bc:	4b92      	ldr	r3, [pc, #584]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d00c      	beq.n	80043e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d112      	bne.n	80043fa <HAL_RCC_OscConfig+0x5e>
 80043d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e0:	d10b      	bne.n	80043fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e2:	4b89      	ldr	r3, [pc, #548]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d06c      	beq.n	80044c8 <HAL_RCC_OscConfig+0x12c>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d168      	bne.n	80044c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e24c      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004402:	d106      	bne.n	8004412 <HAL_RCC_OscConfig+0x76>
 8004404:	4b80      	ldr	r3, [pc, #512]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a7f      	ldr	r2, [pc, #508]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 800440a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	e02e      	b.n	8004470 <HAL_RCC_OscConfig+0xd4>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10c      	bne.n	8004434 <HAL_RCC_OscConfig+0x98>
 800441a:	4b7b      	ldr	r3, [pc, #492]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a7a      	ldr	r2, [pc, #488]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 8004420:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b78      	ldr	r3, [pc, #480]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a77      	ldr	r2, [pc, #476]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 800442c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e01d      	b.n	8004470 <HAL_RCC_OscConfig+0xd4>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800443c:	d10c      	bne.n	8004458 <HAL_RCC_OscConfig+0xbc>
 800443e:	4b72      	ldr	r3, [pc, #456]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a71      	ldr	r2, [pc, #452]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 8004444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	4b6f      	ldr	r3, [pc, #444]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a6e      	ldr	r2, [pc, #440]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 8004450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e00b      	b.n	8004470 <HAL_RCC_OscConfig+0xd4>
 8004458:	4b6b      	ldr	r3, [pc, #428]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a6a      	ldr	r2, [pc, #424]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 800445e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	4b68      	ldr	r3, [pc, #416]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a67      	ldr	r2, [pc, #412]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 800446a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800446e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d013      	beq.n	80044a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fe fb4e 	bl	8002b18 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004480:	f7fe fb4a 	bl	8002b18 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	@ 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e200      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004492:	4b5d      	ldr	r3, [pc, #372]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0xe4>
 800449e:	e014      	b.n	80044ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a0:	f7fe fb3a 	bl	8002b18 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a8:	f7fe fb36 	bl	8002b18 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b64      	cmp	r3, #100	@ 0x64
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e1ec      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ba:	4b53      	ldr	r3, [pc, #332]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x10c>
 80044c6:	e000      	b.n	80044ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d063      	beq.n	800459e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044d6:	4b4c      	ldr	r3, [pc, #304]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 030c 	and.w	r3, r3, #12
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044e2:	4b49      	ldr	r3, [pc, #292]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d11c      	bne.n	8004528 <HAL_RCC_OscConfig+0x18c>
 80044ee:	4b46      	ldr	r3, [pc, #280]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d116      	bne.n	8004528 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fa:	4b43      	ldr	r3, [pc, #268]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_RCC_OscConfig+0x176>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d001      	beq.n	8004512 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e1c0      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004512:	4b3d      	ldr	r3, [pc, #244]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4939      	ldr	r1, [pc, #228]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004526:	e03a      	b.n	800459e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004530:	4b36      	ldr	r3, [pc, #216]	@ (800460c <HAL_RCC_OscConfig+0x270>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004536:	f7fe faef 	bl	8002b18 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453e:	f7fe faeb 	bl	8002b18 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e1a1      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004550:	4b2d      	ldr	r3, [pc, #180]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455c:	4b2a      	ldr	r3, [pc, #168]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	4927      	ldr	r1, [pc, #156]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]
 8004570:	e015      	b.n	800459e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004572:	4b26      	ldr	r3, [pc, #152]	@ (800460c <HAL_RCC_OscConfig+0x270>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fe face 	bl	8002b18 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004580:	f7fe faca 	bl	8002b18 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e180      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004592:	4b1d      	ldr	r3, [pc, #116]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d03a      	beq.n	8004620 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d019      	beq.n	80045e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b2:	4b17      	ldr	r3, [pc, #92]	@ (8004610 <HAL_RCC_OscConfig+0x274>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b8:	f7fe faae 	bl	8002b18 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045c0:	f7fe faaa 	bl	8002b18 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e160      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004608 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045de:	2001      	movs	r0, #1
 80045e0:	f000 face 	bl	8004b80 <RCC_Delay>
 80045e4:	e01c      	b.n	8004620 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <HAL_RCC_OscConfig+0x274>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ec:	f7fe fa94 	bl	8002b18 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f2:	e00f      	b.n	8004614 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f4:	f7fe fa90 	bl	8002b18 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d908      	bls.n	8004614 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e146      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
 800460c:	42420000 	.word	0x42420000
 8004610:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004614:	4b92      	ldr	r3, [pc, #584]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e9      	bne.n	80045f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80a6 	beq.w	800477a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004632:	4b8b      	ldr	r3, [pc, #556]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10d      	bne.n	800465a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463e:	4b88      	ldr	r3, [pc, #544]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	4a87      	ldr	r2, [pc, #540]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 8004644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004648:	61d3      	str	r3, [r2, #28]
 800464a:	4b85      	ldr	r3, [pc, #532]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004656:	2301      	movs	r3, #1
 8004658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465a:	4b82      	ldr	r3, [pc, #520]	@ (8004864 <HAL_RCC_OscConfig+0x4c8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d118      	bne.n	8004698 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004666:	4b7f      	ldr	r3, [pc, #508]	@ (8004864 <HAL_RCC_OscConfig+0x4c8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a7e      	ldr	r2, [pc, #504]	@ (8004864 <HAL_RCC_OscConfig+0x4c8>)
 800466c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004672:	f7fe fa51 	bl	8002b18 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467a:	f7fe fa4d 	bl	8002b18 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b64      	cmp	r3, #100	@ 0x64
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e103      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468c:	4b75      	ldr	r3, [pc, #468]	@ (8004864 <HAL_RCC_OscConfig+0x4c8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0f0      	beq.n	800467a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d106      	bne.n	80046ae <HAL_RCC_OscConfig+0x312>
 80046a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6213      	str	r3, [r2, #32]
 80046ac:	e02d      	b.n	800470a <HAL_RCC_OscConfig+0x36e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10c      	bne.n	80046d0 <HAL_RCC_OscConfig+0x334>
 80046b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4a69      	ldr	r2, [pc, #420]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	6213      	str	r3, [r2, #32]
 80046c2:	4b67      	ldr	r3, [pc, #412]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	4a66      	ldr	r2, [pc, #408]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	f023 0304 	bic.w	r3, r3, #4
 80046cc:	6213      	str	r3, [r2, #32]
 80046ce:	e01c      	b.n	800470a <HAL_RCC_OscConfig+0x36e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	2b05      	cmp	r3, #5
 80046d6:	d10c      	bne.n	80046f2 <HAL_RCC_OscConfig+0x356>
 80046d8:	4b61      	ldr	r3, [pc, #388]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	4a60      	ldr	r2, [pc, #384]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80046de:	f043 0304 	orr.w	r3, r3, #4
 80046e2:	6213      	str	r3, [r2, #32]
 80046e4:	4b5e      	ldr	r3, [pc, #376]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	4a5d      	ldr	r2, [pc, #372]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6213      	str	r3, [r2, #32]
 80046f0:	e00b      	b.n	800470a <HAL_RCC_OscConfig+0x36e>
 80046f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	4a5a      	ldr	r2, [pc, #360]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	6213      	str	r3, [r2, #32]
 80046fe:	4b58      	ldr	r3, [pc, #352]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	4a57      	ldr	r2, [pc, #348]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 8004704:	f023 0304 	bic.w	r3, r3, #4
 8004708:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d015      	beq.n	800473e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004712:	f7fe fa01 	bl	8002b18 <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004718:	e00a      	b.n	8004730 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471a:	f7fe f9fd 	bl	8002b18 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004728:	4293      	cmp	r3, r2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e0b1      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004730:	4b4b      	ldr	r3, [pc, #300]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0ee      	beq.n	800471a <HAL_RCC_OscConfig+0x37e>
 800473c:	e014      	b.n	8004768 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473e:	f7fe f9eb 	bl	8002b18 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004744:	e00a      	b.n	800475c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004746:	f7fe f9e7 	bl	8002b18 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004754:	4293      	cmp	r3, r2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e09b      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475c:	4b40      	ldr	r3, [pc, #256]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1ee      	bne.n	8004746 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004768:	7dfb      	ldrb	r3, [r7, #23]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d105      	bne.n	800477a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800476e:	4b3c      	ldr	r3, [pc, #240]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	4a3b      	ldr	r2, [pc, #236]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004778:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 8087 	beq.w	8004892 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004784:	4b36      	ldr	r3, [pc, #216]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b08      	cmp	r3, #8
 800478e:	d061      	beq.n	8004854 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d146      	bne.n	8004826 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004798:	4b33      	ldr	r3, [pc, #204]	@ (8004868 <HAL_RCC_OscConfig+0x4cc>)
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479e:	f7fe f9bb 	bl	8002b18 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a6:	f7fe f9b7 	bl	8002b18 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e06d      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b8:	4b29      	ldr	r3, [pc, #164]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f0      	bne.n	80047a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047cc:	d108      	bne.n	80047e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047ce:	4b24      	ldr	r3, [pc, #144]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	4921      	ldr	r1, [pc, #132]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a19      	ldr	r1, [r3, #32]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	430b      	orrs	r3, r1
 80047f2:	491b      	ldr	r1, [pc, #108]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004868 <HAL_RCC_OscConfig+0x4cc>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fe:	f7fe f98b 	bl	8002b18 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004806:	f7fe f987 	bl	8002b18 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e03d      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004818:	4b11      	ldr	r3, [pc, #68]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x46a>
 8004824:	e035      	b.n	8004892 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004826:	4b10      	ldr	r3, [pc, #64]	@ (8004868 <HAL_RCC_OscConfig+0x4cc>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fe f974 	bl	8002b18 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004834:	f7fe f970 	bl	8002b18 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e026      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004846:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <HAL_RCC_OscConfig+0x4c4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x498>
 8004852:	e01e      	b.n	8004892 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d107      	bne.n	800486c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e019      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
 8004860:	40021000 	.word	0x40021000
 8004864:	40007000 	.word	0x40007000
 8004868:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800486c:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <HAL_RCC_OscConfig+0x500>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	429a      	cmp	r2, r3
 800487e:	d106      	bne.n	800488e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d001      	beq.n	8004892 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40021000 	.word	0x40021000

080048a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0d0      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d910      	bls.n	80048e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c2:	4b67      	ldr	r3, [pc, #412]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 0207 	bic.w	r2, r3, #7
 80048ca:	4965      	ldr	r1, [pc, #404]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d2:	4b63      	ldr	r3, [pc, #396]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d001      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0b8      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d020      	beq.n	8004932 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048fc:	4b59      	ldr	r3, [pc, #356]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4a58      	ldr	r2, [pc, #352]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004906:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004914:	4b53      	ldr	r3, [pc, #332]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4a52      	ldr	r2, [pc, #328]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800491e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004920:	4b50      	ldr	r3, [pc, #320]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	494d      	ldr	r1, [pc, #308]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d040      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d107      	bne.n	8004956 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004946:	4b47      	ldr	r3, [pc, #284]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d115      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e07f      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d107      	bne.n	800496e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495e:	4b41      	ldr	r3, [pc, #260]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e073      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e06b      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800497e:	4b39      	ldr	r3, [pc, #228]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f023 0203 	bic.w	r2, r3, #3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4936      	ldr	r1, [pc, #216]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	4313      	orrs	r3, r2
 800498e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004990:	f7fe f8c2 	bl	8002b18 <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	e00a      	b.n	80049ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004998:	f7fe f8be 	bl	8002b18 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e053      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 020c 	and.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1eb      	bne.n	8004998 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049c0:	4b27      	ldr	r3, [pc, #156]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d210      	bcs.n	80049f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b24      	ldr	r3, [pc, #144]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 0207 	bic.w	r2, r3, #7
 80049d6:	4922      	ldr	r1, [pc, #136]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b20      	ldr	r3, [pc, #128]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e032      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049fc:	4b19      	ldr	r3, [pc, #100]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4916      	ldr	r1, [pc, #88]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a1a:	4b12      	ldr	r3, [pc, #72]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	490e      	ldr	r1, [pc, #56]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a2e:	f000 f821 	bl	8004a74 <HAL_RCC_GetSysClockFreq>
 8004a32:	4602      	mov	r2, r0
 8004a34:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	091b      	lsrs	r3, r3, #4
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	490a      	ldr	r1, [pc, #40]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c8>)
 8004a40:	5ccb      	ldrb	r3, [r1, r3]
 8004a42:	fa22 f303 	lsr.w	r3, r2, r3
 8004a46:	4a09      	ldr	r2, [pc, #36]	@ (8004a6c <HAL_RCC_ClockConfig+0x1cc>)
 8004a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a4a:	4b09      	ldr	r3, [pc, #36]	@ (8004a70 <HAL_RCC_ClockConfig+0x1d0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe f820 	bl	8002a94 <HAL_InitTick>

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40022000 	.word	0x40022000
 8004a64:	40021000 	.word	0x40021000
 8004a68:	0800970c 	.word	0x0800970c
 8004a6c:	20000008 	.word	0x20000008
 8004a70:	2000000c 	.word	0x2000000c

08004a74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	2300      	movs	r3, #0
 8004a88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d002      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x30>
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d003      	beq.n	8004aaa <HAL_RCC_GetSysClockFreq+0x36>
 8004aa2:	e027      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004aa4:	4b19      	ldr	r3, [pc, #100]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8004aa6:	613b      	str	r3, [r7, #16]
      break;
 8004aa8:	e027      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	0c9b      	lsrs	r3, r3, #18
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	4a17      	ldr	r2, [pc, #92]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ab4:	5cd3      	ldrb	r3, [r2, r3]
 8004ab6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d010      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ac2:	4b11      	ldr	r3, [pc, #68]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	0c5b      	lsrs	r3, r3, #17
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	4a11      	ldr	r2, [pc, #68]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ace:	5cd3      	ldrb	r3, [r2, r3]
 8004ad0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ad6:	fb03 f202 	mul.w	r2, r3, r2
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	e004      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	613b      	str	r3, [r7, #16]
      break;
 8004af2:	e002      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004af4:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8004af6:	613b      	str	r3, [r7, #16]
      break;
 8004af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004afa:	693b      	ldr	r3, [r7, #16]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	007a1200 	.word	0x007a1200
 8004b10:	08009724 	.word	0x08009724
 8004b14:	08009734 	.word	0x08009734
 8004b18:	003d0900 	.word	0x003d0900

08004b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b20:	4b02      	ldr	r3, [pc, #8]	@ (8004b2c <HAL_RCC_GetHCLKFreq+0x10>)
 8004b22:	681b      	ldr	r3, [r3, #0]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr
 8004b2c:	20000008 	.word	0x20000008

08004b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b34:	f7ff fff2 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4903      	ldr	r1, [pc, #12]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40021000 	.word	0x40021000
 8004b54:	0800971c 	.word	0x0800971c

08004b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b5c:	f7ff ffde 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b60:	4602      	mov	r2, r0
 8004b62:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	0adb      	lsrs	r3, r3, #11
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	4903      	ldr	r1, [pc, #12]	@ (8004b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b6e:	5ccb      	ldrb	r3, [r1, r3]
 8004b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	0800971c 	.word	0x0800971c

08004b80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b88:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb4 <RCC_Delay+0x34>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb8 <RCC_Delay+0x38>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	0a5b      	lsrs	r3, r3, #9
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b9c:	bf00      	nop
  }
  while (Delay --);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1e5a      	subs	r2, r3, #1
 8004ba2:	60fa      	str	r2, [r7, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f9      	bne.n	8004b9c <RCC_Delay+0x1c>
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr
 8004bb4:	20000008 	.word	0x20000008
 8004bb8:	10624dd3 	.word	0x10624dd3

08004bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d07d      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bdc:	4b4f      	ldr	r3, [pc, #316]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10d      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be8:	4b4c      	ldr	r3, [pc, #304]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	4a4b      	ldr	r2, [pc, #300]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bf2:	61d3      	str	r3, [r2, #28]
 8004bf4:	4b49      	ldr	r3, [pc, #292]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c00:	2301      	movs	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c04:	4b46      	ldr	r3, [pc, #280]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d118      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c10:	4b43      	ldr	r3, [pc, #268]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a42      	ldr	r2, [pc, #264]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1c:	f7fd ff7c 	bl	8002b18 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c22:	e008      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c24:	f7fd ff78 	bl	8002b18 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b64      	cmp	r3, #100	@ 0x64
 8004c30:	d901      	bls.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e06d      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c36:	4b3a      	ldr	r3, [pc, #232]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c42:	4b36      	ldr	r3, [pc, #216]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d02e      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d027      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c60:	4b2e      	ldr	r3, [pc, #184]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c70:	4b2c      	ldr	r3, [pc, #176]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c76:	4a29      	ldr	r2, [pc, #164]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d014      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c86:	f7fd ff47 	bl	8002b18 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8c:	e00a      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8e:	f7fd ff43 	bl	8002b18 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e036      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ee      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4917      	ldr	r1, [pc, #92]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc8:	4b14      	ldr	r3, [pc, #80]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4a13      	ldr	r2, [pc, #76]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	490b      	ldr	r1, [pc, #44]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d008      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cfe:	4b07      	ldr	r3, [pc, #28]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	4904      	ldr	r1, [pc, #16]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	40007000 	.word	0x40007000
 8004d24:	42420440 	.word	0x42420440

08004d28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	2300      	movs	r3, #0
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	2300      	movs	r3, #0
 8004d42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	f200 808a 	bhi.w	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d045      	beq.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d075      	beq.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004d5e:	e082      	b.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004d60:	4b46      	ldr	r3, [pc, #280]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004d66:	4b45      	ldr	r3, [pc, #276]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d07b      	beq.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	0c9b      	lsrs	r3, r3, #18
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	4a41      	ldr	r2, [pc, #260]	@ (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004d7c:	5cd3      	ldrb	r3, [r2, r3]
 8004d7e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d015      	beq.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	0c5b      	lsrs	r3, r3, #17
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	4a3b      	ldr	r2, [pc, #236]	@ (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004d96:	5cd3      	ldrb	r3, [r2, r3]
 8004d98:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00d      	beq.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004da4:	4a38      	ldr	r2, [pc, #224]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	e004      	b.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	4a34      	ldr	r2, [pc, #208]	@ (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004dba:	fb02 f303 	mul.w	r3, r2, r3
 8004dbe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dcc:	d102      	bne.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	61bb      	str	r3, [r7, #24]
      break;
 8004dd2:	e04a      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	61bb      	str	r3, [r7, #24]
      break;
 8004de2:	e042      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004de4:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004df4:	d108      	bne.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004e00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	e01f      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e12:	d109      	bne.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004e14:	4b19      	ldr	r3, [pc, #100]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004e20:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	e00f      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e32:	d11c      	bne.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004e34:	4b11      	ldr	r3, [pc, #68]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d016      	beq.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004e40:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004e44:	61bb      	str	r3, [r7, #24]
      break;
 8004e46:	e012      	b.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004e48:	e011      	b.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004e4a:	f7ff fe85 	bl	8004b58 <HAL_RCC_GetPCLK2Freq>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	4b0a      	ldr	r3, [pc, #40]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	0b9b      	lsrs	r3, r3, #14
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e62:	61bb      	str	r3, [r7, #24]
      break;
 8004e64:	e004      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004e66:	bf00      	nop
 8004e68:	e002      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004e6e:	bf00      	nop
    }
  }
  return (frequency);
 8004e70:	69bb      	ldr	r3, [r7, #24]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3720      	adds	r7, #32
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	08009738 	.word	0x08009738
 8004e84:	08009748 	.word	0x08009748
 8004e88:	007a1200 	.word	0x007a1200
 8004e8c:	003d0900 	.word	0x003d0900
 8004e90:	aaaaaaab 	.word	0xaaaaaaab

08004e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e041      	b.n	8004f2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fd fd06 	bl	80028cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 fd48 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d001      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e03a      	b.n	8004fc2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a18      	ldr	r2, [pc, #96]	@ (8004fcc <HAL_TIM_Base_Start_IT+0x98>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00e      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x58>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f76:	d009      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x58>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a14      	ldr	r2, [pc, #80]	@ (8004fd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x58>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a13      	ldr	r2, [pc, #76]	@ (8004fd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d111      	bne.n	8004fb0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b06      	cmp	r3, #6
 8004f9c:	d010      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0201 	orr.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fae:	e007      	b.n	8004fc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	40012c00 	.word	0x40012c00
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800

08004fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e041      	b.n	800506e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f839 	bl	8005076 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f000 fca6 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d109      	bne.n	80050ac <HAL_TIM_PWM_Start+0x24>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	e022      	b.n	80050f2 <HAL_TIM_PWM_Start+0x6a>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d109      	bne.n	80050c6 <HAL_TIM_PWM_Start+0x3e>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e015      	b.n	80050f2 <HAL_TIM_PWM_Start+0x6a>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d109      	bne.n	80050e0 <HAL_TIM_PWM_Start+0x58>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	e008      	b.n	80050f2 <HAL_TIM_PWM_Start+0x6a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e05e      	b.n	80051b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <HAL_TIM_PWM_Start+0x82>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005108:	e013      	b.n	8005132 <HAL_TIM_PWM_Start+0xaa>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b04      	cmp	r3, #4
 800510e:	d104      	bne.n	800511a <HAL_TIM_PWM_Start+0x92>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005118:	e00b      	b.n	8005132 <HAL_TIM_PWM_Start+0xaa>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b08      	cmp	r3, #8
 800511e:	d104      	bne.n	800512a <HAL_TIM_PWM_Start+0xa2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005128:	e003      	b.n	8005132 <HAL_TIM_PWM_Start+0xaa>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2201      	movs	r2, #1
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fea0 	bl	8005e80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1e      	ldr	r2, [pc, #120]	@ (80051c0 <HAL_TIM_PWM_Start+0x138>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d107      	bne.n	800515a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005158:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a18      	ldr	r2, [pc, #96]	@ (80051c0 <HAL_TIM_PWM_Start+0x138>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00e      	beq.n	8005182 <HAL_TIM_PWM_Start+0xfa>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516c:	d009      	beq.n	8005182 <HAL_TIM_PWM_Start+0xfa>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a14      	ldr	r2, [pc, #80]	@ (80051c4 <HAL_TIM_PWM_Start+0x13c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <HAL_TIM_PWM_Start+0xfa>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a12      	ldr	r2, [pc, #72]	@ (80051c8 <HAL_TIM_PWM_Start+0x140>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d111      	bne.n	80051a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b06      	cmp	r3, #6
 8005192:	d010      	beq.n	80051b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a4:	e007      	b.n	80051b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800

080051cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e093      	b.n	8005308 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d106      	bne.n	80051fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fd fba1 	bl	800293c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005210:	f023 0307 	bic.w	r3, r3, #7
 8005214:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f000 fba1 	bl	8005968 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800524e:	f023 0303 	bic.w	r3, r3, #3
 8005252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	4313      	orrs	r3, r2
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800526c:	f023 030c 	bic.w	r3, r3, #12
 8005270:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005278:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800527c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	4313      	orrs	r3, r2
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	011a      	lsls	r2, r3, #4
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	031b      	lsls	r3, r3, #12
 800529c:	4313      	orrs	r3, r2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	4313      	orrs	r3, r2
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005320:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005328:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005330:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005338:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d110      	bne.n	8005362 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d102      	bne.n	800534c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005346:	7b7b      	ldrb	r3, [r7, #13]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d001      	beq.n	8005350 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e069      	b.n	8005424 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005360:	e031      	b.n	80053c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b04      	cmp	r3, #4
 8005366:	d110      	bne.n	800538a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d102      	bne.n	8005374 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800536e:	7b3b      	ldrb	r3, [r7, #12]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d001      	beq.n	8005378 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e055      	b.n	8005424 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005388:	e01d      	b.n	80053c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d108      	bne.n	80053a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005390:	7bbb      	ldrb	r3, [r7, #14]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d105      	bne.n	80053a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005396:	7b7b      	ldrb	r3, [r7, #13]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d102      	bne.n	80053a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800539c:	7b3b      	ldrb	r3, [r7, #12]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d001      	beq.n	80053a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e03e      	b.n	8005424 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2202      	movs	r2, #2
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2202      	movs	r2, #2
 80053c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_TIM_Encoder_Start+0xc4>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d008      	beq.n	80053e4 <HAL_TIM_Encoder_Start+0xd4>
 80053d2:	e00f      	b.n	80053f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2201      	movs	r2, #1
 80053da:	2100      	movs	r1, #0
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fd4f 	bl	8005e80 <TIM_CCxChannelCmd>
      break;
 80053e2:	e016      	b.n	8005412 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2201      	movs	r2, #1
 80053ea:	2104      	movs	r1, #4
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fd47 	bl	8005e80 <TIM_CCxChannelCmd>
      break;
 80053f2:	e00e      	b.n	8005412 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2201      	movs	r2, #1
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fd3f 	bl	8005e80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2201      	movs	r2, #1
 8005408:	2104      	movs	r1, #4
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fd38 	bl	8005e80 <TIM_CCxChannelCmd>
      break;
 8005410:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0201 	orr.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d020      	beq.n	8005490 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01b      	beq.n	8005490 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0202 	mvn.w	r2, #2
 8005460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fa5a 	bl	8005930 <HAL_TIM_IC_CaptureCallback>
 800547c:	e005      	b.n	800548a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fa4d 	bl	800591e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fa5c 	bl	8005942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d020      	beq.n	80054dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01b      	beq.n	80054dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0204 	mvn.w	r2, #4
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fa34 	bl	8005930 <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fa27 	bl	800591e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fa36 	bl	8005942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d020      	beq.n	8005528 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01b      	beq.n	8005528 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0208 	mvn.w	r2, #8
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2204      	movs	r2, #4
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa0e 	bl	8005930 <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fa01 	bl	800591e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fa10 	bl	8005942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b00      	cmp	r3, #0
 8005530:	d020      	beq.n	8005574 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01b      	beq.n	8005574 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0210 	mvn.w	r2, #16
 8005544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2208      	movs	r2, #8
 800554a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9e8 	bl	8005930 <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f9db 	bl	800591e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f9ea 	bl	8005942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00c      	beq.n	8005598 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d007      	beq.n	8005598 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0201 	mvn.w	r2, #1
 8005590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fc f976 	bl	8001884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00c      	beq.n	80055bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fced 	bl	8005f96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00c      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f9ba 	bl	8005954 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0220 	mvn.w	r2, #32
 80055fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fcc0 	bl	8005f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005626:	2302      	movs	r3, #2
 8005628:	e0ae      	b.n	8005788 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b0c      	cmp	r3, #12
 8005636:	f200 809f 	bhi.w	8005778 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800563a:	a201      	add	r2, pc, #4	@ (adr r2, 8005640 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	08005675 	.word	0x08005675
 8005644:	08005779 	.word	0x08005779
 8005648:	08005779 	.word	0x08005779
 800564c:	08005779 	.word	0x08005779
 8005650:	080056b5 	.word	0x080056b5
 8005654:	08005779 	.word	0x08005779
 8005658:	08005779 	.word	0x08005779
 800565c:	08005779 	.word	0x08005779
 8005660:	080056f7 	.word	0x080056f7
 8005664:	08005779 	.word	0x08005779
 8005668:	08005779 	.word	0x08005779
 800566c:	08005779 	.word	0x08005779
 8005670:	08005737 	.word	0x08005737
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f9e2 	bl	8005a44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0208 	orr.w	r2, r2, #8
 800568e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0204 	bic.w	r2, r2, #4
 800569e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6999      	ldr	r1, [r3, #24]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	619a      	str	r2, [r3, #24]
      break;
 80056b2:	e064      	b.n	800577e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fa28 	bl	8005b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6999      	ldr	r1, [r3, #24]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	021a      	lsls	r2, r3, #8
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	619a      	str	r2, [r3, #24]
      break;
 80056f4:	e043      	b.n	800577e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fa71 	bl	8005be4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0208 	orr.w	r2, r2, #8
 8005710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0204 	bic.w	r2, r2, #4
 8005720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69d9      	ldr	r1, [r3, #28]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	61da      	str	r2, [r3, #28]
      break;
 8005734:	e023      	b.n	800577e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fabb 	bl	8005cb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69d9      	ldr	r1, [r3, #28]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	021a      	lsls	r2, r3, #8
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	61da      	str	r2, [r3, #28]
      break;
 8005776:	e002      	b.n	800577e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	75fb      	strb	r3, [r7, #23]
      break;
 800577c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005786:	7dfb      	ldrb	r3, [r7, #23]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_TIM_ConfigClockSource+0x1c>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e0b4      	b.n	8005916 <HAL_TIM_ConfigClockSource+0x186>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80057ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057e4:	d03e      	beq.n	8005864 <HAL_TIM_ConfigClockSource+0xd4>
 80057e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ea:	f200 8087 	bhi.w	80058fc <HAL_TIM_ConfigClockSource+0x16c>
 80057ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057f2:	f000 8086 	beq.w	8005902 <HAL_TIM_ConfigClockSource+0x172>
 80057f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fa:	d87f      	bhi.n	80058fc <HAL_TIM_ConfigClockSource+0x16c>
 80057fc:	2b70      	cmp	r3, #112	@ 0x70
 80057fe:	d01a      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0xa6>
 8005800:	2b70      	cmp	r3, #112	@ 0x70
 8005802:	d87b      	bhi.n	80058fc <HAL_TIM_ConfigClockSource+0x16c>
 8005804:	2b60      	cmp	r3, #96	@ 0x60
 8005806:	d050      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x11a>
 8005808:	2b60      	cmp	r3, #96	@ 0x60
 800580a:	d877      	bhi.n	80058fc <HAL_TIM_ConfigClockSource+0x16c>
 800580c:	2b50      	cmp	r3, #80	@ 0x50
 800580e:	d03c      	beq.n	800588a <HAL_TIM_ConfigClockSource+0xfa>
 8005810:	2b50      	cmp	r3, #80	@ 0x50
 8005812:	d873      	bhi.n	80058fc <HAL_TIM_ConfigClockSource+0x16c>
 8005814:	2b40      	cmp	r3, #64	@ 0x40
 8005816:	d058      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0x13a>
 8005818:	2b40      	cmp	r3, #64	@ 0x40
 800581a:	d86f      	bhi.n	80058fc <HAL_TIM_ConfigClockSource+0x16c>
 800581c:	2b30      	cmp	r3, #48	@ 0x30
 800581e:	d064      	beq.n	80058ea <HAL_TIM_ConfigClockSource+0x15a>
 8005820:	2b30      	cmp	r3, #48	@ 0x30
 8005822:	d86b      	bhi.n	80058fc <HAL_TIM_ConfigClockSource+0x16c>
 8005824:	2b20      	cmp	r3, #32
 8005826:	d060      	beq.n	80058ea <HAL_TIM_ConfigClockSource+0x15a>
 8005828:	2b20      	cmp	r3, #32
 800582a:	d867      	bhi.n	80058fc <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d05c      	beq.n	80058ea <HAL_TIM_ConfigClockSource+0x15a>
 8005830:	2b10      	cmp	r3, #16
 8005832:	d05a      	beq.n	80058ea <HAL_TIM_ConfigClockSource+0x15a>
 8005834:	e062      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005846:	f000 fafc 	bl	8005e42 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005858:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	609a      	str	r2, [r3, #8]
      break;
 8005862:	e04f      	b.n	8005904 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005874:	f000 fae5 	bl	8005e42 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005886:	609a      	str	r2, [r3, #8]
      break;
 8005888:	e03c      	b.n	8005904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005896:	461a      	mov	r2, r3
 8005898:	f000 fa5c 	bl	8005d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2150      	movs	r1, #80	@ 0x50
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fab3 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 80058a8:	e02c      	b.n	8005904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058b6:	461a      	mov	r2, r3
 80058b8:	f000 fa7a 	bl	8005db0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2160      	movs	r1, #96	@ 0x60
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 faa3 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 80058c8:	e01c      	b.n	8005904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d6:	461a      	mov	r2, r3
 80058d8:	f000 fa3c 	bl	8005d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2140      	movs	r1, #64	@ 0x40
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fa93 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 80058e8:	e00c      	b.n	8005904 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4619      	mov	r1, r3
 80058f4:	4610      	mov	r0, r2
 80058f6:	f000 fa8a 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 80058fa:	e003      	b.n	8005904 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005900:	e000      	b.n	8005904 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005902:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr

08005942 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	bc80      	pop	{r7}
 8005964:	4770      	bx	lr
	...

08005968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a2f      	ldr	r2, [pc, #188]	@ (8005a38 <TIM_Base_SetConfig+0xd0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_Base_SetConfig+0x30>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005986:	d007      	beq.n	8005998 <TIM_Base_SetConfig+0x30>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a3c <TIM_Base_SetConfig+0xd4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0x30>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a2b      	ldr	r2, [pc, #172]	@ (8005a40 <TIM_Base_SetConfig+0xd8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d108      	bne.n	80059aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a22      	ldr	r2, [pc, #136]	@ (8005a38 <TIM_Base_SetConfig+0xd0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00b      	beq.n	80059ca <TIM_Base_SetConfig+0x62>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b8:	d007      	beq.n	80059ca <TIM_Base_SetConfig+0x62>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1f      	ldr	r2, [pc, #124]	@ (8005a3c <TIM_Base_SetConfig+0xd4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_Base_SetConfig+0x62>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a40 <TIM_Base_SetConfig+0xd8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a0d      	ldr	r2, [pc, #52]	@ (8005a38 <TIM_Base_SetConfig+0xd0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d103      	bne.n	8005a10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f023 0201 	bic.w	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	611a      	str	r2, [r3, #16]
  }
}
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800

08005a44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	f023 0201 	bic.w	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0303 	bic.w	r3, r3, #3
 8005a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f023 0302 	bic.w	r3, r3, #2
 8005a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b0c <TIM_OC1_SetConfig+0xc8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d10c      	bne.n	8005aba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f023 0308 	bic.w	r3, r3, #8
 8005aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f023 0304 	bic.w	r3, r3, #4
 8005ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a13      	ldr	r2, [pc, #76]	@ (8005b0c <TIM_OC1_SetConfig+0xc8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d111      	bne.n	8005ae6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	621a      	str	r2, [r3, #32]
}
 8005b00:	bf00      	nop
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40012c00 	.word	0x40012c00

08005b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f023 0210 	bic.w	r2, r3, #16
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f023 0320 	bic.w	r3, r3, #32
 8005b5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8005be0 <TIM_OC2_SetConfig+0xd0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d10d      	bne.n	8005b8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a14      	ldr	r2, [pc, #80]	@ (8005be0 <TIM_OC2_SetConfig+0xd0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d113      	bne.n	8005bbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	621a      	str	r2, [r3, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr
 8005be0:	40012c00 	.word	0x40012c00

08005be4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb4 <TIM_OC3_SetConfig+0xd0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d10d      	bne.n	8005c5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a14      	ldr	r2, [pc, #80]	@ (8005cb4 <TIM_OC3_SetConfig+0xd0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d113      	bne.n	8005c8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	621a      	str	r2, [r3, #32]
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40012c00 	.word	0x40012c00

08005cb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	031b      	lsls	r3, r3, #12
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a0f      	ldr	r2, [pc, #60]	@ (8005d50 <TIM_OC4_SetConfig+0x98>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d109      	bne.n	8005d2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	019b      	lsls	r3, r3, #6
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr
 8005d50:	40012c00 	.word	0x40012c00

08005d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f023 0201 	bic.w	r2, r3, #1
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f023 030a 	bic.w	r3, r3, #10
 8005d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr

08005db0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f023 0210 	bic.w	r2, r3, #16
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	031b      	lsls	r3, r3, #12
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	621a      	str	r2, [r3, #32]
}
 8005e04:	bf00      	nop
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr

08005e0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f043 0307 	orr.w	r3, r3, #7
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	609a      	str	r2, [r3, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr

08005e42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b087      	sub	sp, #28
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	607a      	str	r2, [r7, #4]
 8005e4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	021a      	lsls	r2, r3, #8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	609a      	str	r2, [r3, #8]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	2201      	movs	r2, #1
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a1a      	ldr	r2, [r3, #32]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	401a      	ands	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a1a      	ldr	r2, [r3, #32]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e046      	b.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a16      	ldr	r2, [pc, #88]	@ (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00e      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f2c:	d009      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a12      	ldr	r2, [pc, #72]	@ (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d004      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a10      	ldr	r2, [pc, #64]	@ (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d10c      	bne.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr
 8005f78:	40012c00 	.word	0x40012c00
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800

08005f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr

08005f96 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr

08005fa8 <__cvt>:
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fae:	461d      	mov	r5, r3
 8005fb0:	bfbb      	ittet	lt
 8005fb2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005fb6:	461d      	movlt	r5, r3
 8005fb8:	2300      	movge	r3, #0
 8005fba:	232d      	movlt	r3, #45	@ 0x2d
 8005fbc:	b088      	sub	sp, #32
 8005fbe:	4614      	mov	r4, r2
 8005fc0:	bfb8      	it	lt
 8005fc2:	4614      	movlt	r4, r2
 8005fc4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005fc6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005fc8:	7013      	strb	r3, [r2, #0]
 8005fca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fcc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005fd0:	f023 0820 	bic.w	r8, r3, #32
 8005fd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fd8:	d005      	beq.n	8005fe6 <__cvt+0x3e>
 8005fda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fde:	d100      	bne.n	8005fe2 <__cvt+0x3a>
 8005fe0:	3601      	adds	r6, #1
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e000      	b.n	8005fe8 <__cvt+0x40>
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	aa07      	add	r2, sp, #28
 8005fea:	9204      	str	r2, [sp, #16]
 8005fec:	aa06      	add	r2, sp, #24
 8005fee:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005ff2:	e9cd 3600 	strd	r3, r6, [sp]
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	462b      	mov	r3, r5
 8005ffa:	f000 fe8d 	bl	8006d18 <_dtoa_r>
 8005ffe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006002:	4607      	mov	r7, r0
 8006004:	d119      	bne.n	800603a <__cvt+0x92>
 8006006:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006008:	07db      	lsls	r3, r3, #31
 800600a:	d50e      	bpl.n	800602a <__cvt+0x82>
 800600c:	eb00 0906 	add.w	r9, r0, r6
 8006010:	2200      	movs	r2, #0
 8006012:	2300      	movs	r3, #0
 8006014:	4620      	mov	r0, r4
 8006016:	4629      	mov	r1, r5
 8006018:	f7fa fcc6 	bl	80009a8 <__aeabi_dcmpeq>
 800601c:	b108      	cbz	r0, 8006022 <__cvt+0x7a>
 800601e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006022:	2230      	movs	r2, #48	@ 0x30
 8006024:	9b07      	ldr	r3, [sp, #28]
 8006026:	454b      	cmp	r3, r9
 8006028:	d31e      	bcc.n	8006068 <__cvt+0xc0>
 800602a:	4638      	mov	r0, r7
 800602c:	9b07      	ldr	r3, [sp, #28]
 800602e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006030:	1bdb      	subs	r3, r3, r7
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	b008      	add	sp, #32
 8006036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800603e:	eb00 0906 	add.w	r9, r0, r6
 8006042:	d1e5      	bne.n	8006010 <__cvt+0x68>
 8006044:	7803      	ldrb	r3, [r0, #0]
 8006046:	2b30      	cmp	r3, #48	@ 0x30
 8006048:	d10a      	bne.n	8006060 <__cvt+0xb8>
 800604a:	2200      	movs	r2, #0
 800604c:	2300      	movs	r3, #0
 800604e:	4620      	mov	r0, r4
 8006050:	4629      	mov	r1, r5
 8006052:	f7fa fca9 	bl	80009a8 <__aeabi_dcmpeq>
 8006056:	b918      	cbnz	r0, 8006060 <__cvt+0xb8>
 8006058:	f1c6 0601 	rsb	r6, r6, #1
 800605c:	f8ca 6000 	str.w	r6, [sl]
 8006060:	f8da 3000 	ldr.w	r3, [sl]
 8006064:	4499      	add	r9, r3
 8006066:	e7d3      	b.n	8006010 <__cvt+0x68>
 8006068:	1c59      	adds	r1, r3, #1
 800606a:	9107      	str	r1, [sp, #28]
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	e7d9      	b.n	8006024 <__cvt+0x7c>

08006070 <__exponent>:
 8006070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006072:	2900      	cmp	r1, #0
 8006074:	bfb6      	itet	lt
 8006076:	232d      	movlt	r3, #45	@ 0x2d
 8006078:	232b      	movge	r3, #43	@ 0x2b
 800607a:	4249      	neglt	r1, r1
 800607c:	2909      	cmp	r1, #9
 800607e:	7002      	strb	r2, [r0, #0]
 8006080:	7043      	strb	r3, [r0, #1]
 8006082:	dd29      	ble.n	80060d8 <__exponent+0x68>
 8006084:	f10d 0307 	add.w	r3, sp, #7
 8006088:	461d      	mov	r5, r3
 800608a:	270a      	movs	r7, #10
 800608c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006090:	461a      	mov	r2, r3
 8006092:	fb07 1416 	mls	r4, r7, r6, r1
 8006096:	3430      	adds	r4, #48	@ 0x30
 8006098:	f802 4c01 	strb.w	r4, [r2, #-1]
 800609c:	460c      	mov	r4, r1
 800609e:	2c63      	cmp	r4, #99	@ 0x63
 80060a0:	4631      	mov	r1, r6
 80060a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80060a6:	dcf1      	bgt.n	800608c <__exponent+0x1c>
 80060a8:	3130      	adds	r1, #48	@ 0x30
 80060aa:	1e94      	subs	r4, r2, #2
 80060ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80060b0:	4623      	mov	r3, r4
 80060b2:	1c41      	adds	r1, r0, #1
 80060b4:	42ab      	cmp	r3, r5
 80060b6:	d30a      	bcc.n	80060ce <__exponent+0x5e>
 80060b8:	f10d 0309 	add.w	r3, sp, #9
 80060bc:	1a9b      	subs	r3, r3, r2
 80060be:	42ac      	cmp	r4, r5
 80060c0:	bf88      	it	hi
 80060c2:	2300      	movhi	r3, #0
 80060c4:	3302      	adds	r3, #2
 80060c6:	4403      	add	r3, r0
 80060c8:	1a18      	subs	r0, r3, r0
 80060ca:	b003      	add	sp, #12
 80060cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060d6:	e7ed      	b.n	80060b4 <__exponent+0x44>
 80060d8:	2330      	movs	r3, #48	@ 0x30
 80060da:	3130      	adds	r1, #48	@ 0x30
 80060dc:	7083      	strb	r3, [r0, #2]
 80060de:	70c1      	strb	r1, [r0, #3]
 80060e0:	1d03      	adds	r3, r0, #4
 80060e2:	e7f1      	b.n	80060c8 <__exponent+0x58>

080060e4 <_printf_float>:
 80060e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e8:	b091      	sub	sp, #68	@ 0x44
 80060ea:	460c      	mov	r4, r1
 80060ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80060f0:	4616      	mov	r6, r2
 80060f2:	461f      	mov	r7, r3
 80060f4:	4605      	mov	r5, r0
 80060f6:	f000 fcf1 	bl	8006adc <_localeconv_r>
 80060fa:	6803      	ldr	r3, [r0, #0]
 80060fc:	4618      	mov	r0, r3
 80060fe:	9308      	str	r3, [sp, #32]
 8006100:	f7fa f826 	bl	8000150 <strlen>
 8006104:	2300      	movs	r3, #0
 8006106:	930e      	str	r3, [sp, #56]	@ 0x38
 8006108:	f8d8 3000 	ldr.w	r3, [r8]
 800610c:	9009      	str	r0, [sp, #36]	@ 0x24
 800610e:	3307      	adds	r3, #7
 8006110:	f023 0307 	bic.w	r3, r3, #7
 8006114:	f103 0208 	add.w	r2, r3, #8
 8006118:	f894 a018 	ldrb.w	sl, [r4, #24]
 800611c:	f8d4 b000 	ldr.w	fp, [r4]
 8006120:	f8c8 2000 	str.w	r2, [r8]
 8006124:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006128:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800612c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800612e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006132:	f04f 32ff 	mov.w	r2, #4294967295
 8006136:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800613a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800613e:	4b9c      	ldr	r3, [pc, #624]	@ (80063b0 <_printf_float+0x2cc>)
 8006140:	f7fa fc64 	bl	8000a0c <__aeabi_dcmpun>
 8006144:	bb70      	cbnz	r0, 80061a4 <_printf_float+0xc0>
 8006146:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800614a:	f04f 32ff 	mov.w	r2, #4294967295
 800614e:	4b98      	ldr	r3, [pc, #608]	@ (80063b0 <_printf_float+0x2cc>)
 8006150:	f7fa fc3e 	bl	80009d0 <__aeabi_dcmple>
 8006154:	bb30      	cbnz	r0, 80061a4 <_printf_float+0xc0>
 8006156:	2200      	movs	r2, #0
 8006158:	2300      	movs	r3, #0
 800615a:	4640      	mov	r0, r8
 800615c:	4649      	mov	r1, r9
 800615e:	f7fa fc2d 	bl	80009bc <__aeabi_dcmplt>
 8006162:	b110      	cbz	r0, 800616a <_printf_float+0x86>
 8006164:	232d      	movs	r3, #45	@ 0x2d
 8006166:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800616a:	4a92      	ldr	r2, [pc, #584]	@ (80063b4 <_printf_float+0x2d0>)
 800616c:	4b92      	ldr	r3, [pc, #584]	@ (80063b8 <_printf_float+0x2d4>)
 800616e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006172:	bf94      	ite	ls
 8006174:	4690      	movls	r8, r2
 8006176:	4698      	movhi	r8, r3
 8006178:	2303      	movs	r3, #3
 800617a:	f04f 0900 	mov.w	r9, #0
 800617e:	6123      	str	r3, [r4, #16]
 8006180:	f02b 0304 	bic.w	r3, fp, #4
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	4633      	mov	r3, r6
 8006188:	4621      	mov	r1, r4
 800618a:	4628      	mov	r0, r5
 800618c:	9700      	str	r7, [sp, #0]
 800618e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006190:	f000 f9d4 	bl	800653c <_printf_common>
 8006194:	3001      	adds	r0, #1
 8006196:	f040 8090 	bne.w	80062ba <_printf_float+0x1d6>
 800619a:	f04f 30ff 	mov.w	r0, #4294967295
 800619e:	b011      	add	sp, #68	@ 0x44
 80061a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a4:	4642      	mov	r2, r8
 80061a6:	464b      	mov	r3, r9
 80061a8:	4640      	mov	r0, r8
 80061aa:	4649      	mov	r1, r9
 80061ac:	f7fa fc2e 	bl	8000a0c <__aeabi_dcmpun>
 80061b0:	b148      	cbz	r0, 80061c6 <_printf_float+0xe2>
 80061b2:	464b      	mov	r3, r9
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bfb8      	it	lt
 80061b8:	232d      	movlt	r3, #45	@ 0x2d
 80061ba:	4a80      	ldr	r2, [pc, #512]	@ (80063bc <_printf_float+0x2d8>)
 80061bc:	bfb8      	it	lt
 80061be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061c2:	4b7f      	ldr	r3, [pc, #508]	@ (80063c0 <_printf_float+0x2dc>)
 80061c4:	e7d3      	b.n	800616e <_printf_float+0x8a>
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	d13f      	bne.n	8006250 <_printf_float+0x16c>
 80061d0:	2306      	movs	r3, #6
 80061d2:	6063      	str	r3, [r4, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80061da:	6023      	str	r3, [r4, #0]
 80061dc:	9206      	str	r2, [sp, #24]
 80061de:	aa0e      	add	r2, sp, #56	@ 0x38
 80061e0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80061e4:	aa0d      	add	r2, sp, #52	@ 0x34
 80061e6:	9203      	str	r2, [sp, #12]
 80061e8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80061ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80061f0:	6863      	ldr	r3, [r4, #4]
 80061f2:	4642      	mov	r2, r8
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	4628      	mov	r0, r5
 80061f8:	464b      	mov	r3, r9
 80061fa:	910a      	str	r1, [sp, #40]	@ 0x28
 80061fc:	f7ff fed4 	bl	8005fa8 <__cvt>
 8006200:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006202:	4680      	mov	r8, r0
 8006204:	2947      	cmp	r1, #71	@ 0x47
 8006206:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006208:	d128      	bne.n	800625c <_printf_float+0x178>
 800620a:	1cc8      	adds	r0, r1, #3
 800620c:	db02      	blt.n	8006214 <_printf_float+0x130>
 800620e:	6863      	ldr	r3, [r4, #4]
 8006210:	4299      	cmp	r1, r3
 8006212:	dd40      	ble.n	8006296 <_printf_float+0x1b2>
 8006214:	f1aa 0a02 	sub.w	sl, sl, #2
 8006218:	fa5f fa8a 	uxtb.w	sl, sl
 800621c:	4652      	mov	r2, sl
 800621e:	3901      	subs	r1, #1
 8006220:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006224:	910d      	str	r1, [sp, #52]	@ 0x34
 8006226:	f7ff ff23 	bl	8006070 <__exponent>
 800622a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800622c:	4681      	mov	r9, r0
 800622e:	1813      	adds	r3, r2, r0
 8006230:	2a01      	cmp	r2, #1
 8006232:	6123      	str	r3, [r4, #16]
 8006234:	dc02      	bgt.n	800623c <_printf_float+0x158>
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	07d2      	lsls	r2, r2, #31
 800623a:	d501      	bpl.n	8006240 <_printf_float+0x15c>
 800623c:	3301      	adds	r3, #1
 800623e:	6123      	str	r3, [r4, #16]
 8006240:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006244:	2b00      	cmp	r3, #0
 8006246:	d09e      	beq.n	8006186 <_printf_float+0xa2>
 8006248:	232d      	movs	r3, #45	@ 0x2d
 800624a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800624e:	e79a      	b.n	8006186 <_printf_float+0xa2>
 8006250:	2947      	cmp	r1, #71	@ 0x47
 8006252:	d1bf      	bne.n	80061d4 <_printf_float+0xf0>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1bd      	bne.n	80061d4 <_printf_float+0xf0>
 8006258:	2301      	movs	r3, #1
 800625a:	e7ba      	b.n	80061d2 <_printf_float+0xee>
 800625c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006260:	d9dc      	bls.n	800621c <_printf_float+0x138>
 8006262:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006266:	d118      	bne.n	800629a <_printf_float+0x1b6>
 8006268:	2900      	cmp	r1, #0
 800626a:	6863      	ldr	r3, [r4, #4]
 800626c:	dd0b      	ble.n	8006286 <_printf_float+0x1a2>
 800626e:	6121      	str	r1, [r4, #16]
 8006270:	b913      	cbnz	r3, 8006278 <_printf_float+0x194>
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	07d0      	lsls	r0, r2, #31
 8006276:	d502      	bpl.n	800627e <_printf_float+0x19a>
 8006278:	3301      	adds	r3, #1
 800627a:	440b      	add	r3, r1
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	f04f 0900 	mov.w	r9, #0
 8006282:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006284:	e7dc      	b.n	8006240 <_printf_float+0x15c>
 8006286:	b913      	cbnz	r3, 800628e <_printf_float+0x1aa>
 8006288:	6822      	ldr	r2, [r4, #0]
 800628a:	07d2      	lsls	r2, r2, #31
 800628c:	d501      	bpl.n	8006292 <_printf_float+0x1ae>
 800628e:	3302      	adds	r3, #2
 8006290:	e7f4      	b.n	800627c <_printf_float+0x198>
 8006292:	2301      	movs	r3, #1
 8006294:	e7f2      	b.n	800627c <_printf_float+0x198>
 8006296:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800629a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800629c:	4299      	cmp	r1, r3
 800629e:	db05      	blt.n	80062ac <_printf_float+0x1c8>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	6121      	str	r1, [r4, #16]
 80062a4:	07d8      	lsls	r0, r3, #31
 80062a6:	d5ea      	bpl.n	800627e <_printf_float+0x19a>
 80062a8:	1c4b      	adds	r3, r1, #1
 80062aa:	e7e7      	b.n	800627c <_printf_float+0x198>
 80062ac:	2900      	cmp	r1, #0
 80062ae:	bfcc      	ite	gt
 80062b0:	2201      	movgt	r2, #1
 80062b2:	f1c1 0202 	rsble	r2, r1, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	e7e0      	b.n	800627c <_printf_float+0x198>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	055a      	lsls	r2, r3, #21
 80062be:	d407      	bmi.n	80062d0 <_printf_float+0x1ec>
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	4642      	mov	r2, r8
 80062c4:	4631      	mov	r1, r6
 80062c6:	4628      	mov	r0, r5
 80062c8:	47b8      	blx	r7
 80062ca:	3001      	adds	r0, #1
 80062cc:	d12b      	bne.n	8006326 <_printf_float+0x242>
 80062ce:	e764      	b.n	800619a <_printf_float+0xb6>
 80062d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062d4:	f240 80dc 	bls.w	8006490 <_printf_float+0x3ac>
 80062d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062dc:	2200      	movs	r2, #0
 80062de:	2300      	movs	r3, #0
 80062e0:	f7fa fb62 	bl	80009a8 <__aeabi_dcmpeq>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d033      	beq.n	8006350 <_printf_float+0x26c>
 80062e8:	2301      	movs	r3, #1
 80062ea:	4631      	mov	r1, r6
 80062ec:	4628      	mov	r0, r5
 80062ee:	4a35      	ldr	r2, [pc, #212]	@ (80063c4 <_printf_float+0x2e0>)
 80062f0:	47b8      	blx	r7
 80062f2:	3001      	adds	r0, #1
 80062f4:	f43f af51 	beq.w	800619a <_printf_float+0xb6>
 80062f8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80062fc:	4543      	cmp	r3, r8
 80062fe:	db02      	blt.n	8006306 <_printf_float+0x222>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	07d8      	lsls	r0, r3, #31
 8006304:	d50f      	bpl.n	8006326 <_printf_float+0x242>
 8006306:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800630a:	4631      	mov	r1, r6
 800630c:	4628      	mov	r0, r5
 800630e:	47b8      	blx	r7
 8006310:	3001      	adds	r0, #1
 8006312:	f43f af42 	beq.w	800619a <_printf_float+0xb6>
 8006316:	f04f 0900 	mov.w	r9, #0
 800631a:	f108 38ff 	add.w	r8, r8, #4294967295
 800631e:	f104 0a1a 	add.w	sl, r4, #26
 8006322:	45c8      	cmp	r8, r9
 8006324:	dc09      	bgt.n	800633a <_printf_float+0x256>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	079b      	lsls	r3, r3, #30
 800632a:	f100 8102 	bmi.w	8006532 <_printf_float+0x44e>
 800632e:	68e0      	ldr	r0, [r4, #12]
 8006330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006332:	4298      	cmp	r0, r3
 8006334:	bfb8      	it	lt
 8006336:	4618      	movlt	r0, r3
 8006338:	e731      	b.n	800619e <_printf_float+0xba>
 800633a:	2301      	movs	r3, #1
 800633c:	4652      	mov	r2, sl
 800633e:	4631      	mov	r1, r6
 8006340:	4628      	mov	r0, r5
 8006342:	47b8      	blx	r7
 8006344:	3001      	adds	r0, #1
 8006346:	f43f af28 	beq.w	800619a <_printf_float+0xb6>
 800634a:	f109 0901 	add.w	r9, r9, #1
 800634e:	e7e8      	b.n	8006322 <_printf_float+0x23e>
 8006350:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006352:	2b00      	cmp	r3, #0
 8006354:	dc38      	bgt.n	80063c8 <_printf_float+0x2e4>
 8006356:	2301      	movs	r3, #1
 8006358:	4631      	mov	r1, r6
 800635a:	4628      	mov	r0, r5
 800635c:	4a19      	ldr	r2, [pc, #100]	@ (80063c4 <_printf_float+0x2e0>)
 800635e:	47b8      	blx	r7
 8006360:	3001      	adds	r0, #1
 8006362:	f43f af1a 	beq.w	800619a <_printf_float+0xb6>
 8006366:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800636a:	ea59 0303 	orrs.w	r3, r9, r3
 800636e:	d102      	bne.n	8006376 <_printf_float+0x292>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	07d9      	lsls	r1, r3, #31
 8006374:	d5d7      	bpl.n	8006326 <_printf_float+0x242>
 8006376:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800637a:	4631      	mov	r1, r6
 800637c:	4628      	mov	r0, r5
 800637e:	47b8      	blx	r7
 8006380:	3001      	adds	r0, #1
 8006382:	f43f af0a 	beq.w	800619a <_printf_float+0xb6>
 8006386:	f04f 0a00 	mov.w	sl, #0
 800638a:	f104 0b1a 	add.w	fp, r4, #26
 800638e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006390:	425b      	negs	r3, r3
 8006392:	4553      	cmp	r3, sl
 8006394:	dc01      	bgt.n	800639a <_printf_float+0x2b6>
 8006396:	464b      	mov	r3, r9
 8006398:	e793      	b.n	80062c2 <_printf_float+0x1de>
 800639a:	2301      	movs	r3, #1
 800639c:	465a      	mov	r2, fp
 800639e:	4631      	mov	r1, r6
 80063a0:	4628      	mov	r0, r5
 80063a2:	47b8      	blx	r7
 80063a4:	3001      	adds	r0, #1
 80063a6:	f43f aef8 	beq.w	800619a <_printf_float+0xb6>
 80063aa:	f10a 0a01 	add.w	sl, sl, #1
 80063ae:	e7ee      	b.n	800638e <_printf_float+0x2aa>
 80063b0:	7fefffff 	.word	0x7fefffff
 80063b4:	0800974a 	.word	0x0800974a
 80063b8:	0800974e 	.word	0x0800974e
 80063bc:	08009752 	.word	0x08009752
 80063c0:	08009756 	.word	0x08009756
 80063c4:	0800975a 	.word	0x0800975a
 80063c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063ca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80063ce:	4553      	cmp	r3, sl
 80063d0:	bfa8      	it	ge
 80063d2:	4653      	movge	r3, sl
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	4699      	mov	r9, r3
 80063d8:	dc36      	bgt.n	8006448 <_printf_float+0x364>
 80063da:	f04f 0b00 	mov.w	fp, #0
 80063de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063e2:	f104 021a 	add.w	r2, r4, #26
 80063e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80063ea:	eba3 0309 	sub.w	r3, r3, r9
 80063ee:	455b      	cmp	r3, fp
 80063f0:	dc31      	bgt.n	8006456 <_printf_float+0x372>
 80063f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063f4:	459a      	cmp	sl, r3
 80063f6:	dc3a      	bgt.n	800646e <_printf_float+0x38a>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	07da      	lsls	r2, r3, #31
 80063fc:	d437      	bmi.n	800646e <_printf_float+0x38a>
 80063fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006400:	ebaa 0903 	sub.w	r9, sl, r3
 8006404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006406:	ebaa 0303 	sub.w	r3, sl, r3
 800640a:	4599      	cmp	r9, r3
 800640c:	bfa8      	it	ge
 800640e:	4699      	movge	r9, r3
 8006410:	f1b9 0f00 	cmp.w	r9, #0
 8006414:	dc33      	bgt.n	800647e <_printf_float+0x39a>
 8006416:	f04f 0800 	mov.w	r8, #0
 800641a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800641e:	f104 0b1a 	add.w	fp, r4, #26
 8006422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006424:	ebaa 0303 	sub.w	r3, sl, r3
 8006428:	eba3 0309 	sub.w	r3, r3, r9
 800642c:	4543      	cmp	r3, r8
 800642e:	f77f af7a 	ble.w	8006326 <_printf_float+0x242>
 8006432:	2301      	movs	r3, #1
 8006434:	465a      	mov	r2, fp
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	f43f aeac 	beq.w	800619a <_printf_float+0xb6>
 8006442:	f108 0801 	add.w	r8, r8, #1
 8006446:	e7ec      	b.n	8006422 <_printf_float+0x33e>
 8006448:	4642      	mov	r2, r8
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	d1c2      	bne.n	80063da <_printf_float+0x2f6>
 8006454:	e6a1      	b.n	800619a <_printf_float+0xb6>
 8006456:	2301      	movs	r3, #1
 8006458:	4631      	mov	r1, r6
 800645a:	4628      	mov	r0, r5
 800645c:	920a      	str	r2, [sp, #40]	@ 0x28
 800645e:	47b8      	blx	r7
 8006460:	3001      	adds	r0, #1
 8006462:	f43f ae9a 	beq.w	800619a <_printf_float+0xb6>
 8006466:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006468:	f10b 0b01 	add.w	fp, fp, #1
 800646c:	e7bb      	b.n	80063e6 <_printf_float+0x302>
 800646e:	4631      	mov	r1, r6
 8006470:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006474:	4628      	mov	r0, r5
 8006476:	47b8      	blx	r7
 8006478:	3001      	adds	r0, #1
 800647a:	d1c0      	bne.n	80063fe <_printf_float+0x31a>
 800647c:	e68d      	b.n	800619a <_printf_float+0xb6>
 800647e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006480:	464b      	mov	r3, r9
 8006482:	4631      	mov	r1, r6
 8006484:	4628      	mov	r0, r5
 8006486:	4442      	add	r2, r8
 8006488:	47b8      	blx	r7
 800648a:	3001      	adds	r0, #1
 800648c:	d1c3      	bne.n	8006416 <_printf_float+0x332>
 800648e:	e684      	b.n	800619a <_printf_float+0xb6>
 8006490:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006494:	f1ba 0f01 	cmp.w	sl, #1
 8006498:	dc01      	bgt.n	800649e <_printf_float+0x3ba>
 800649a:	07db      	lsls	r3, r3, #31
 800649c:	d536      	bpl.n	800650c <_printf_float+0x428>
 800649e:	2301      	movs	r3, #1
 80064a0:	4642      	mov	r2, r8
 80064a2:	4631      	mov	r1, r6
 80064a4:	4628      	mov	r0, r5
 80064a6:	47b8      	blx	r7
 80064a8:	3001      	adds	r0, #1
 80064aa:	f43f ae76 	beq.w	800619a <_printf_float+0xb6>
 80064ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064b2:	4631      	mov	r1, r6
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b8      	blx	r7
 80064b8:	3001      	adds	r0, #1
 80064ba:	f43f ae6e 	beq.w	800619a <_printf_float+0xb6>
 80064be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064c2:	2200      	movs	r2, #0
 80064c4:	2300      	movs	r3, #0
 80064c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064ca:	f7fa fa6d 	bl	80009a8 <__aeabi_dcmpeq>
 80064ce:	b9c0      	cbnz	r0, 8006502 <_printf_float+0x41e>
 80064d0:	4653      	mov	r3, sl
 80064d2:	f108 0201 	add.w	r2, r8, #1
 80064d6:	4631      	mov	r1, r6
 80064d8:	4628      	mov	r0, r5
 80064da:	47b8      	blx	r7
 80064dc:	3001      	adds	r0, #1
 80064de:	d10c      	bne.n	80064fa <_printf_float+0x416>
 80064e0:	e65b      	b.n	800619a <_printf_float+0xb6>
 80064e2:	2301      	movs	r3, #1
 80064e4:	465a      	mov	r2, fp
 80064e6:	4631      	mov	r1, r6
 80064e8:	4628      	mov	r0, r5
 80064ea:	47b8      	blx	r7
 80064ec:	3001      	adds	r0, #1
 80064ee:	f43f ae54 	beq.w	800619a <_printf_float+0xb6>
 80064f2:	f108 0801 	add.w	r8, r8, #1
 80064f6:	45d0      	cmp	r8, sl
 80064f8:	dbf3      	blt.n	80064e2 <_printf_float+0x3fe>
 80064fa:	464b      	mov	r3, r9
 80064fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006500:	e6e0      	b.n	80062c4 <_printf_float+0x1e0>
 8006502:	f04f 0800 	mov.w	r8, #0
 8006506:	f104 0b1a 	add.w	fp, r4, #26
 800650a:	e7f4      	b.n	80064f6 <_printf_float+0x412>
 800650c:	2301      	movs	r3, #1
 800650e:	4642      	mov	r2, r8
 8006510:	e7e1      	b.n	80064d6 <_printf_float+0x3f2>
 8006512:	2301      	movs	r3, #1
 8006514:	464a      	mov	r2, r9
 8006516:	4631      	mov	r1, r6
 8006518:	4628      	mov	r0, r5
 800651a:	47b8      	blx	r7
 800651c:	3001      	adds	r0, #1
 800651e:	f43f ae3c 	beq.w	800619a <_printf_float+0xb6>
 8006522:	f108 0801 	add.w	r8, r8, #1
 8006526:	68e3      	ldr	r3, [r4, #12]
 8006528:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800652a:	1a5b      	subs	r3, r3, r1
 800652c:	4543      	cmp	r3, r8
 800652e:	dcf0      	bgt.n	8006512 <_printf_float+0x42e>
 8006530:	e6fd      	b.n	800632e <_printf_float+0x24a>
 8006532:	f04f 0800 	mov.w	r8, #0
 8006536:	f104 0919 	add.w	r9, r4, #25
 800653a:	e7f4      	b.n	8006526 <_printf_float+0x442>

0800653c <_printf_common>:
 800653c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006540:	4616      	mov	r6, r2
 8006542:	4698      	mov	r8, r3
 8006544:	688a      	ldr	r2, [r1, #8]
 8006546:	690b      	ldr	r3, [r1, #16]
 8006548:	4607      	mov	r7, r0
 800654a:	4293      	cmp	r3, r2
 800654c:	bfb8      	it	lt
 800654e:	4613      	movlt	r3, r2
 8006550:	6033      	str	r3, [r6, #0]
 8006552:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006556:	460c      	mov	r4, r1
 8006558:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800655c:	b10a      	cbz	r2, 8006562 <_printf_common+0x26>
 800655e:	3301      	adds	r3, #1
 8006560:	6033      	str	r3, [r6, #0]
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	0699      	lsls	r1, r3, #26
 8006566:	bf42      	ittt	mi
 8006568:	6833      	ldrmi	r3, [r6, #0]
 800656a:	3302      	addmi	r3, #2
 800656c:	6033      	strmi	r3, [r6, #0]
 800656e:	6825      	ldr	r5, [r4, #0]
 8006570:	f015 0506 	ands.w	r5, r5, #6
 8006574:	d106      	bne.n	8006584 <_printf_common+0x48>
 8006576:	f104 0a19 	add.w	sl, r4, #25
 800657a:	68e3      	ldr	r3, [r4, #12]
 800657c:	6832      	ldr	r2, [r6, #0]
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	42ab      	cmp	r3, r5
 8006582:	dc2b      	bgt.n	80065dc <_printf_common+0xa0>
 8006584:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	3b00      	subs	r3, #0
 800658c:	bf18      	it	ne
 800658e:	2301      	movne	r3, #1
 8006590:	0692      	lsls	r2, r2, #26
 8006592:	d430      	bmi.n	80065f6 <_printf_common+0xba>
 8006594:	4641      	mov	r1, r8
 8006596:	4638      	mov	r0, r7
 8006598:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800659c:	47c8      	blx	r9
 800659e:	3001      	adds	r0, #1
 80065a0:	d023      	beq.n	80065ea <_printf_common+0xae>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	6922      	ldr	r2, [r4, #16]
 80065a6:	f003 0306 	and.w	r3, r3, #6
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	bf14      	ite	ne
 80065ae:	2500      	movne	r5, #0
 80065b0:	6833      	ldreq	r3, [r6, #0]
 80065b2:	f04f 0600 	mov.w	r6, #0
 80065b6:	bf08      	it	eq
 80065b8:	68e5      	ldreq	r5, [r4, #12]
 80065ba:	f104 041a 	add.w	r4, r4, #26
 80065be:	bf08      	it	eq
 80065c0:	1aed      	subeq	r5, r5, r3
 80065c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80065c6:	bf08      	it	eq
 80065c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065cc:	4293      	cmp	r3, r2
 80065ce:	bfc4      	itt	gt
 80065d0:	1a9b      	subgt	r3, r3, r2
 80065d2:	18ed      	addgt	r5, r5, r3
 80065d4:	42b5      	cmp	r5, r6
 80065d6:	d11a      	bne.n	800660e <_printf_common+0xd2>
 80065d8:	2000      	movs	r0, #0
 80065da:	e008      	b.n	80065ee <_printf_common+0xb2>
 80065dc:	2301      	movs	r3, #1
 80065de:	4652      	mov	r2, sl
 80065e0:	4641      	mov	r1, r8
 80065e2:	4638      	mov	r0, r7
 80065e4:	47c8      	blx	r9
 80065e6:	3001      	adds	r0, #1
 80065e8:	d103      	bne.n	80065f2 <_printf_common+0xb6>
 80065ea:	f04f 30ff 	mov.w	r0, #4294967295
 80065ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f2:	3501      	adds	r5, #1
 80065f4:	e7c1      	b.n	800657a <_printf_common+0x3e>
 80065f6:	2030      	movs	r0, #48	@ 0x30
 80065f8:	18e1      	adds	r1, r4, r3
 80065fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006604:	4422      	add	r2, r4
 8006606:	3302      	adds	r3, #2
 8006608:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800660c:	e7c2      	b.n	8006594 <_printf_common+0x58>
 800660e:	2301      	movs	r3, #1
 8006610:	4622      	mov	r2, r4
 8006612:	4641      	mov	r1, r8
 8006614:	4638      	mov	r0, r7
 8006616:	47c8      	blx	r9
 8006618:	3001      	adds	r0, #1
 800661a:	d0e6      	beq.n	80065ea <_printf_common+0xae>
 800661c:	3601      	adds	r6, #1
 800661e:	e7d9      	b.n	80065d4 <_printf_common+0x98>

08006620 <_printf_i>:
 8006620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006624:	7e0f      	ldrb	r7, [r1, #24]
 8006626:	4691      	mov	r9, r2
 8006628:	2f78      	cmp	r7, #120	@ 0x78
 800662a:	4680      	mov	r8, r0
 800662c:	460c      	mov	r4, r1
 800662e:	469a      	mov	sl, r3
 8006630:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006632:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006636:	d807      	bhi.n	8006648 <_printf_i+0x28>
 8006638:	2f62      	cmp	r7, #98	@ 0x62
 800663a:	d80a      	bhi.n	8006652 <_printf_i+0x32>
 800663c:	2f00      	cmp	r7, #0
 800663e:	f000 80d3 	beq.w	80067e8 <_printf_i+0x1c8>
 8006642:	2f58      	cmp	r7, #88	@ 0x58
 8006644:	f000 80ba 	beq.w	80067bc <_printf_i+0x19c>
 8006648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800664c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006650:	e03a      	b.n	80066c8 <_printf_i+0xa8>
 8006652:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006656:	2b15      	cmp	r3, #21
 8006658:	d8f6      	bhi.n	8006648 <_printf_i+0x28>
 800665a:	a101      	add	r1, pc, #4	@ (adr r1, 8006660 <_printf_i+0x40>)
 800665c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006660:	080066b9 	.word	0x080066b9
 8006664:	080066cd 	.word	0x080066cd
 8006668:	08006649 	.word	0x08006649
 800666c:	08006649 	.word	0x08006649
 8006670:	08006649 	.word	0x08006649
 8006674:	08006649 	.word	0x08006649
 8006678:	080066cd 	.word	0x080066cd
 800667c:	08006649 	.word	0x08006649
 8006680:	08006649 	.word	0x08006649
 8006684:	08006649 	.word	0x08006649
 8006688:	08006649 	.word	0x08006649
 800668c:	080067cf 	.word	0x080067cf
 8006690:	080066f7 	.word	0x080066f7
 8006694:	08006789 	.word	0x08006789
 8006698:	08006649 	.word	0x08006649
 800669c:	08006649 	.word	0x08006649
 80066a0:	080067f1 	.word	0x080067f1
 80066a4:	08006649 	.word	0x08006649
 80066a8:	080066f7 	.word	0x080066f7
 80066ac:	08006649 	.word	0x08006649
 80066b0:	08006649 	.word	0x08006649
 80066b4:	08006791 	.word	0x08006791
 80066b8:	6833      	ldr	r3, [r6, #0]
 80066ba:	1d1a      	adds	r2, r3, #4
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6032      	str	r2, [r6, #0]
 80066c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066c8:	2301      	movs	r3, #1
 80066ca:	e09e      	b.n	800680a <_printf_i+0x1ea>
 80066cc:	6833      	ldr	r3, [r6, #0]
 80066ce:	6820      	ldr	r0, [r4, #0]
 80066d0:	1d19      	adds	r1, r3, #4
 80066d2:	6031      	str	r1, [r6, #0]
 80066d4:	0606      	lsls	r6, r0, #24
 80066d6:	d501      	bpl.n	80066dc <_printf_i+0xbc>
 80066d8:	681d      	ldr	r5, [r3, #0]
 80066da:	e003      	b.n	80066e4 <_printf_i+0xc4>
 80066dc:	0645      	lsls	r5, r0, #25
 80066de:	d5fb      	bpl.n	80066d8 <_printf_i+0xb8>
 80066e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066e4:	2d00      	cmp	r5, #0
 80066e6:	da03      	bge.n	80066f0 <_printf_i+0xd0>
 80066e8:	232d      	movs	r3, #45	@ 0x2d
 80066ea:	426d      	negs	r5, r5
 80066ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066f0:	230a      	movs	r3, #10
 80066f2:	4859      	ldr	r0, [pc, #356]	@ (8006858 <_printf_i+0x238>)
 80066f4:	e011      	b.n	800671a <_printf_i+0xfa>
 80066f6:	6821      	ldr	r1, [r4, #0]
 80066f8:	6833      	ldr	r3, [r6, #0]
 80066fa:	0608      	lsls	r0, r1, #24
 80066fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006700:	d402      	bmi.n	8006708 <_printf_i+0xe8>
 8006702:	0649      	lsls	r1, r1, #25
 8006704:	bf48      	it	mi
 8006706:	b2ad      	uxthmi	r5, r5
 8006708:	2f6f      	cmp	r7, #111	@ 0x6f
 800670a:	6033      	str	r3, [r6, #0]
 800670c:	bf14      	ite	ne
 800670e:	230a      	movne	r3, #10
 8006710:	2308      	moveq	r3, #8
 8006712:	4851      	ldr	r0, [pc, #324]	@ (8006858 <_printf_i+0x238>)
 8006714:	2100      	movs	r1, #0
 8006716:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800671a:	6866      	ldr	r6, [r4, #4]
 800671c:	2e00      	cmp	r6, #0
 800671e:	bfa8      	it	ge
 8006720:	6821      	ldrge	r1, [r4, #0]
 8006722:	60a6      	str	r6, [r4, #8]
 8006724:	bfa4      	itt	ge
 8006726:	f021 0104 	bicge.w	r1, r1, #4
 800672a:	6021      	strge	r1, [r4, #0]
 800672c:	b90d      	cbnz	r5, 8006732 <_printf_i+0x112>
 800672e:	2e00      	cmp	r6, #0
 8006730:	d04b      	beq.n	80067ca <_printf_i+0x1aa>
 8006732:	4616      	mov	r6, r2
 8006734:	fbb5 f1f3 	udiv	r1, r5, r3
 8006738:	fb03 5711 	mls	r7, r3, r1, r5
 800673c:	5dc7      	ldrb	r7, [r0, r7]
 800673e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006742:	462f      	mov	r7, r5
 8006744:	42bb      	cmp	r3, r7
 8006746:	460d      	mov	r5, r1
 8006748:	d9f4      	bls.n	8006734 <_printf_i+0x114>
 800674a:	2b08      	cmp	r3, #8
 800674c:	d10b      	bne.n	8006766 <_printf_i+0x146>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	07df      	lsls	r7, r3, #31
 8006752:	d508      	bpl.n	8006766 <_printf_i+0x146>
 8006754:	6923      	ldr	r3, [r4, #16]
 8006756:	6861      	ldr	r1, [r4, #4]
 8006758:	4299      	cmp	r1, r3
 800675a:	bfde      	ittt	le
 800675c:	2330      	movle	r3, #48	@ 0x30
 800675e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006762:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006766:	1b92      	subs	r2, r2, r6
 8006768:	6122      	str	r2, [r4, #16]
 800676a:	464b      	mov	r3, r9
 800676c:	4621      	mov	r1, r4
 800676e:	4640      	mov	r0, r8
 8006770:	f8cd a000 	str.w	sl, [sp]
 8006774:	aa03      	add	r2, sp, #12
 8006776:	f7ff fee1 	bl	800653c <_printf_common>
 800677a:	3001      	adds	r0, #1
 800677c:	d14a      	bne.n	8006814 <_printf_i+0x1f4>
 800677e:	f04f 30ff 	mov.w	r0, #4294967295
 8006782:	b004      	add	sp, #16
 8006784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	f043 0320 	orr.w	r3, r3, #32
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	2778      	movs	r7, #120	@ 0x78
 8006792:	4832      	ldr	r0, [pc, #200]	@ (800685c <_printf_i+0x23c>)
 8006794:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	6831      	ldr	r1, [r6, #0]
 800679c:	061f      	lsls	r7, r3, #24
 800679e:	f851 5b04 	ldr.w	r5, [r1], #4
 80067a2:	d402      	bmi.n	80067aa <_printf_i+0x18a>
 80067a4:	065f      	lsls	r7, r3, #25
 80067a6:	bf48      	it	mi
 80067a8:	b2ad      	uxthmi	r5, r5
 80067aa:	6031      	str	r1, [r6, #0]
 80067ac:	07d9      	lsls	r1, r3, #31
 80067ae:	bf44      	itt	mi
 80067b0:	f043 0320 	orrmi.w	r3, r3, #32
 80067b4:	6023      	strmi	r3, [r4, #0]
 80067b6:	b11d      	cbz	r5, 80067c0 <_printf_i+0x1a0>
 80067b8:	2310      	movs	r3, #16
 80067ba:	e7ab      	b.n	8006714 <_printf_i+0xf4>
 80067bc:	4826      	ldr	r0, [pc, #152]	@ (8006858 <_printf_i+0x238>)
 80067be:	e7e9      	b.n	8006794 <_printf_i+0x174>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	f023 0320 	bic.w	r3, r3, #32
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	e7f6      	b.n	80067b8 <_printf_i+0x198>
 80067ca:	4616      	mov	r6, r2
 80067cc:	e7bd      	b.n	800674a <_printf_i+0x12a>
 80067ce:	6833      	ldr	r3, [r6, #0]
 80067d0:	6825      	ldr	r5, [r4, #0]
 80067d2:	1d18      	adds	r0, r3, #4
 80067d4:	6961      	ldr	r1, [r4, #20]
 80067d6:	6030      	str	r0, [r6, #0]
 80067d8:	062e      	lsls	r6, r5, #24
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	d501      	bpl.n	80067e2 <_printf_i+0x1c2>
 80067de:	6019      	str	r1, [r3, #0]
 80067e0:	e002      	b.n	80067e8 <_printf_i+0x1c8>
 80067e2:	0668      	lsls	r0, r5, #25
 80067e4:	d5fb      	bpl.n	80067de <_printf_i+0x1be>
 80067e6:	8019      	strh	r1, [r3, #0]
 80067e8:	2300      	movs	r3, #0
 80067ea:	4616      	mov	r6, r2
 80067ec:	6123      	str	r3, [r4, #16]
 80067ee:	e7bc      	b.n	800676a <_printf_i+0x14a>
 80067f0:	6833      	ldr	r3, [r6, #0]
 80067f2:	2100      	movs	r1, #0
 80067f4:	1d1a      	adds	r2, r3, #4
 80067f6:	6032      	str	r2, [r6, #0]
 80067f8:	681e      	ldr	r6, [r3, #0]
 80067fa:	6862      	ldr	r2, [r4, #4]
 80067fc:	4630      	mov	r0, r6
 80067fe:	f000 f9e4 	bl	8006bca <memchr>
 8006802:	b108      	cbz	r0, 8006808 <_printf_i+0x1e8>
 8006804:	1b80      	subs	r0, r0, r6
 8006806:	6060      	str	r0, [r4, #4]
 8006808:	6863      	ldr	r3, [r4, #4]
 800680a:	6123      	str	r3, [r4, #16]
 800680c:	2300      	movs	r3, #0
 800680e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006812:	e7aa      	b.n	800676a <_printf_i+0x14a>
 8006814:	4632      	mov	r2, r6
 8006816:	4649      	mov	r1, r9
 8006818:	4640      	mov	r0, r8
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	47d0      	blx	sl
 800681e:	3001      	adds	r0, #1
 8006820:	d0ad      	beq.n	800677e <_printf_i+0x15e>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	079b      	lsls	r3, r3, #30
 8006826:	d413      	bmi.n	8006850 <_printf_i+0x230>
 8006828:	68e0      	ldr	r0, [r4, #12]
 800682a:	9b03      	ldr	r3, [sp, #12]
 800682c:	4298      	cmp	r0, r3
 800682e:	bfb8      	it	lt
 8006830:	4618      	movlt	r0, r3
 8006832:	e7a6      	b.n	8006782 <_printf_i+0x162>
 8006834:	2301      	movs	r3, #1
 8006836:	4632      	mov	r2, r6
 8006838:	4649      	mov	r1, r9
 800683a:	4640      	mov	r0, r8
 800683c:	47d0      	blx	sl
 800683e:	3001      	adds	r0, #1
 8006840:	d09d      	beq.n	800677e <_printf_i+0x15e>
 8006842:	3501      	adds	r5, #1
 8006844:	68e3      	ldr	r3, [r4, #12]
 8006846:	9903      	ldr	r1, [sp, #12]
 8006848:	1a5b      	subs	r3, r3, r1
 800684a:	42ab      	cmp	r3, r5
 800684c:	dcf2      	bgt.n	8006834 <_printf_i+0x214>
 800684e:	e7eb      	b.n	8006828 <_printf_i+0x208>
 8006850:	2500      	movs	r5, #0
 8006852:	f104 0619 	add.w	r6, r4, #25
 8006856:	e7f5      	b.n	8006844 <_printf_i+0x224>
 8006858:	0800975c 	.word	0x0800975c
 800685c:	0800976d 	.word	0x0800976d

08006860 <std>:
 8006860:	2300      	movs	r3, #0
 8006862:	b510      	push	{r4, lr}
 8006864:	4604      	mov	r4, r0
 8006866:	e9c0 3300 	strd	r3, r3, [r0]
 800686a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800686e:	6083      	str	r3, [r0, #8]
 8006870:	8181      	strh	r1, [r0, #12]
 8006872:	6643      	str	r3, [r0, #100]	@ 0x64
 8006874:	81c2      	strh	r2, [r0, #14]
 8006876:	6183      	str	r3, [r0, #24]
 8006878:	4619      	mov	r1, r3
 800687a:	2208      	movs	r2, #8
 800687c:	305c      	adds	r0, #92	@ 0x5c
 800687e:	f000 f924 	bl	8006aca <memset>
 8006882:	4b0d      	ldr	r3, [pc, #52]	@ (80068b8 <std+0x58>)
 8006884:	6224      	str	r4, [r4, #32]
 8006886:	6263      	str	r3, [r4, #36]	@ 0x24
 8006888:	4b0c      	ldr	r3, [pc, #48]	@ (80068bc <std+0x5c>)
 800688a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800688c:	4b0c      	ldr	r3, [pc, #48]	@ (80068c0 <std+0x60>)
 800688e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006890:	4b0c      	ldr	r3, [pc, #48]	@ (80068c4 <std+0x64>)
 8006892:	6323      	str	r3, [r4, #48]	@ 0x30
 8006894:	4b0c      	ldr	r3, [pc, #48]	@ (80068c8 <std+0x68>)
 8006896:	429c      	cmp	r4, r3
 8006898:	d006      	beq.n	80068a8 <std+0x48>
 800689a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800689e:	4294      	cmp	r4, r2
 80068a0:	d002      	beq.n	80068a8 <std+0x48>
 80068a2:	33d0      	adds	r3, #208	@ 0xd0
 80068a4:	429c      	cmp	r4, r3
 80068a6:	d105      	bne.n	80068b4 <std+0x54>
 80068a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b0:	f000 b988 	b.w	8006bc4 <__retarget_lock_init_recursive>
 80068b4:	bd10      	pop	{r4, pc}
 80068b6:	bf00      	nop
 80068b8:	08006a25 	.word	0x08006a25
 80068bc:	08006a47 	.word	0x08006a47
 80068c0:	08006a7f 	.word	0x08006a7f
 80068c4:	08006aa3 	.word	0x08006aa3
 80068c8:	200008fc 	.word	0x200008fc

080068cc <stdio_exit_handler>:
 80068cc:	4a02      	ldr	r2, [pc, #8]	@ (80068d8 <stdio_exit_handler+0xc>)
 80068ce:	4903      	ldr	r1, [pc, #12]	@ (80068dc <stdio_exit_handler+0x10>)
 80068d0:	4803      	ldr	r0, [pc, #12]	@ (80068e0 <stdio_exit_handler+0x14>)
 80068d2:	f000 b869 	b.w	80069a8 <_fwalk_sglue>
 80068d6:	bf00      	nop
 80068d8:	20000014 	.word	0x20000014
 80068dc:	08008555 	.word	0x08008555
 80068e0:	20000024 	.word	0x20000024

080068e4 <cleanup_stdio>:
 80068e4:	6841      	ldr	r1, [r0, #4]
 80068e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006918 <cleanup_stdio+0x34>)
 80068e8:	b510      	push	{r4, lr}
 80068ea:	4299      	cmp	r1, r3
 80068ec:	4604      	mov	r4, r0
 80068ee:	d001      	beq.n	80068f4 <cleanup_stdio+0x10>
 80068f0:	f001 fe30 	bl	8008554 <_fflush_r>
 80068f4:	68a1      	ldr	r1, [r4, #8]
 80068f6:	4b09      	ldr	r3, [pc, #36]	@ (800691c <cleanup_stdio+0x38>)
 80068f8:	4299      	cmp	r1, r3
 80068fa:	d002      	beq.n	8006902 <cleanup_stdio+0x1e>
 80068fc:	4620      	mov	r0, r4
 80068fe:	f001 fe29 	bl	8008554 <_fflush_r>
 8006902:	68e1      	ldr	r1, [r4, #12]
 8006904:	4b06      	ldr	r3, [pc, #24]	@ (8006920 <cleanup_stdio+0x3c>)
 8006906:	4299      	cmp	r1, r3
 8006908:	d004      	beq.n	8006914 <cleanup_stdio+0x30>
 800690a:	4620      	mov	r0, r4
 800690c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006910:	f001 be20 	b.w	8008554 <_fflush_r>
 8006914:	bd10      	pop	{r4, pc}
 8006916:	bf00      	nop
 8006918:	200008fc 	.word	0x200008fc
 800691c:	20000964 	.word	0x20000964
 8006920:	200009cc 	.word	0x200009cc

08006924 <global_stdio_init.part.0>:
 8006924:	b510      	push	{r4, lr}
 8006926:	4b0b      	ldr	r3, [pc, #44]	@ (8006954 <global_stdio_init.part.0+0x30>)
 8006928:	4c0b      	ldr	r4, [pc, #44]	@ (8006958 <global_stdio_init.part.0+0x34>)
 800692a:	4a0c      	ldr	r2, [pc, #48]	@ (800695c <global_stdio_init.part.0+0x38>)
 800692c:	4620      	mov	r0, r4
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	2104      	movs	r1, #4
 8006932:	2200      	movs	r2, #0
 8006934:	f7ff ff94 	bl	8006860 <std>
 8006938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800693c:	2201      	movs	r2, #1
 800693e:	2109      	movs	r1, #9
 8006940:	f7ff ff8e 	bl	8006860 <std>
 8006944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006948:	2202      	movs	r2, #2
 800694a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800694e:	2112      	movs	r1, #18
 8006950:	f7ff bf86 	b.w	8006860 <std>
 8006954:	20000a34 	.word	0x20000a34
 8006958:	200008fc 	.word	0x200008fc
 800695c:	080068cd 	.word	0x080068cd

08006960 <__sfp_lock_acquire>:
 8006960:	4801      	ldr	r0, [pc, #4]	@ (8006968 <__sfp_lock_acquire+0x8>)
 8006962:	f000 b930 	b.w	8006bc6 <__retarget_lock_acquire_recursive>
 8006966:	bf00      	nop
 8006968:	20000a3d 	.word	0x20000a3d

0800696c <__sfp_lock_release>:
 800696c:	4801      	ldr	r0, [pc, #4]	@ (8006974 <__sfp_lock_release+0x8>)
 800696e:	f000 b92b 	b.w	8006bc8 <__retarget_lock_release_recursive>
 8006972:	bf00      	nop
 8006974:	20000a3d 	.word	0x20000a3d

08006978 <__sinit>:
 8006978:	b510      	push	{r4, lr}
 800697a:	4604      	mov	r4, r0
 800697c:	f7ff fff0 	bl	8006960 <__sfp_lock_acquire>
 8006980:	6a23      	ldr	r3, [r4, #32]
 8006982:	b11b      	cbz	r3, 800698c <__sinit+0x14>
 8006984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006988:	f7ff bff0 	b.w	800696c <__sfp_lock_release>
 800698c:	4b04      	ldr	r3, [pc, #16]	@ (80069a0 <__sinit+0x28>)
 800698e:	6223      	str	r3, [r4, #32]
 8006990:	4b04      	ldr	r3, [pc, #16]	@ (80069a4 <__sinit+0x2c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1f5      	bne.n	8006984 <__sinit+0xc>
 8006998:	f7ff ffc4 	bl	8006924 <global_stdio_init.part.0>
 800699c:	e7f2      	b.n	8006984 <__sinit+0xc>
 800699e:	bf00      	nop
 80069a0:	080068e5 	.word	0x080068e5
 80069a4:	20000a34 	.word	0x20000a34

080069a8 <_fwalk_sglue>:
 80069a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ac:	4607      	mov	r7, r0
 80069ae:	4688      	mov	r8, r1
 80069b0:	4614      	mov	r4, r2
 80069b2:	2600      	movs	r6, #0
 80069b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069b8:	f1b9 0901 	subs.w	r9, r9, #1
 80069bc:	d505      	bpl.n	80069ca <_fwalk_sglue+0x22>
 80069be:	6824      	ldr	r4, [r4, #0]
 80069c0:	2c00      	cmp	r4, #0
 80069c2:	d1f7      	bne.n	80069b4 <_fwalk_sglue+0xc>
 80069c4:	4630      	mov	r0, r6
 80069c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ca:	89ab      	ldrh	r3, [r5, #12]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d907      	bls.n	80069e0 <_fwalk_sglue+0x38>
 80069d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069d4:	3301      	adds	r3, #1
 80069d6:	d003      	beq.n	80069e0 <_fwalk_sglue+0x38>
 80069d8:	4629      	mov	r1, r5
 80069da:	4638      	mov	r0, r7
 80069dc:	47c0      	blx	r8
 80069de:	4306      	orrs	r6, r0
 80069e0:	3568      	adds	r5, #104	@ 0x68
 80069e2:	e7e9      	b.n	80069b8 <_fwalk_sglue+0x10>

080069e4 <siprintf>:
 80069e4:	b40e      	push	{r1, r2, r3}
 80069e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069ea:	b500      	push	{lr}
 80069ec:	b09c      	sub	sp, #112	@ 0x70
 80069ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80069f0:	9002      	str	r0, [sp, #8]
 80069f2:	9006      	str	r0, [sp, #24]
 80069f4:	9107      	str	r1, [sp, #28]
 80069f6:	9104      	str	r1, [sp, #16]
 80069f8:	4808      	ldr	r0, [pc, #32]	@ (8006a1c <siprintf+0x38>)
 80069fa:	4909      	ldr	r1, [pc, #36]	@ (8006a20 <siprintf+0x3c>)
 80069fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a00:	9105      	str	r1, [sp, #20]
 8006a02:	6800      	ldr	r0, [r0, #0]
 8006a04:	a902      	add	r1, sp, #8
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	f001 fc28 	bl	800825c <_svfiprintf_r>
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	9b02      	ldr	r3, [sp, #8]
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	b01c      	add	sp, #112	@ 0x70
 8006a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a18:	b003      	add	sp, #12
 8006a1a:	4770      	bx	lr
 8006a1c:	20000020 	.word	0x20000020
 8006a20:	ffff0208 	.word	0xffff0208

08006a24 <__sread>:
 8006a24:	b510      	push	{r4, lr}
 8006a26:	460c      	mov	r4, r1
 8006a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a2c:	f000 f87c 	bl	8006b28 <_read_r>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	bfab      	itete	ge
 8006a34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a36:	89a3      	ldrhlt	r3, [r4, #12]
 8006a38:	181b      	addge	r3, r3, r0
 8006a3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a3e:	bfac      	ite	ge
 8006a40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a42:	81a3      	strhlt	r3, [r4, #12]
 8006a44:	bd10      	pop	{r4, pc}

08006a46 <__swrite>:
 8006a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4a:	461f      	mov	r7, r3
 8006a4c:	898b      	ldrh	r3, [r1, #12]
 8006a4e:	4605      	mov	r5, r0
 8006a50:	05db      	lsls	r3, r3, #23
 8006a52:	460c      	mov	r4, r1
 8006a54:	4616      	mov	r6, r2
 8006a56:	d505      	bpl.n	8006a64 <__swrite+0x1e>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a60:	f000 f850 	bl	8006b04 <_lseek_r>
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	4632      	mov	r2, r6
 8006a68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	4628      	mov	r0, r5
 8006a70:	463b      	mov	r3, r7
 8006a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7a:	f000 b867 	b.w	8006b4c <_write_r>

08006a7e <__sseek>:
 8006a7e:	b510      	push	{r4, lr}
 8006a80:	460c      	mov	r4, r1
 8006a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a86:	f000 f83d 	bl	8006b04 <_lseek_r>
 8006a8a:	1c43      	adds	r3, r0, #1
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	bf15      	itete	ne
 8006a90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a9a:	81a3      	strheq	r3, [r4, #12]
 8006a9c:	bf18      	it	ne
 8006a9e:	81a3      	strhne	r3, [r4, #12]
 8006aa0:	bd10      	pop	{r4, pc}

08006aa2 <__sclose>:
 8006aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa6:	f000 b81d 	b.w	8006ae4 <_close_r>

08006aaa <memcmp>:
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	3901      	subs	r1, #1
 8006aae:	4402      	add	r2, r0
 8006ab0:	4290      	cmp	r0, r2
 8006ab2:	d101      	bne.n	8006ab8 <memcmp+0xe>
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	e005      	b.n	8006ac4 <memcmp+0x1a>
 8006ab8:	7803      	ldrb	r3, [r0, #0]
 8006aba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006abe:	42a3      	cmp	r3, r4
 8006ac0:	d001      	beq.n	8006ac6 <memcmp+0x1c>
 8006ac2:	1b18      	subs	r0, r3, r4
 8006ac4:	bd10      	pop	{r4, pc}
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	e7f2      	b.n	8006ab0 <memcmp+0x6>

08006aca <memset>:
 8006aca:	4603      	mov	r3, r0
 8006acc:	4402      	add	r2, r0
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d100      	bne.n	8006ad4 <memset+0xa>
 8006ad2:	4770      	bx	lr
 8006ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ad8:	e7f9      	b.n	8006ace <memset+0x4>
	...

08006adc <_localeconv_r>:
 8006adc:	4800      	ldr	r0, [pc, #0]	@ (8006ae0 <_localeconv_r+0x4>)
 8006ade:	4770      	bx	lr
 8006ae0:	20000160 	.word	0x20000160

08006ae4 <_close_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	4d05      	ldr	r5, [pc, #20]	@ (8006b00 <_close_r+0x1c>)
 8006aea:	4604      	mov	r4, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	f7fb fd67 	bl	80025c2 <_close>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_close_r+0x1a>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_close_r+0x1a>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	20000a38 	.word	0x20000a38

08006b04 <_lseek_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4604      	mov	r4, r0
 8006b08:	4608      	mov	r0, r1
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	4d05      	ldr	r5, [pc, #20]	@ (8006b24 <_lseek_r+0x20>)
 8006b10:	602a      	str	r2, [r5, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	f7fb fd79 	bl	800260a <_lseek>
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d102      	bne.n	8006b22 <_lseek_r+0x1e>
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	b103      	cbz	r3, 8006b22 <_lseek_r+0x1e>
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
 8006b24:	20000a38 	.word	0x20000a38

08006b28 <_read_r>:
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	2200      	movs	r2, #0
 8006b32:	4d05      	ldr	r5, [pc, #20]	@ (8006b48 <_read_r+0x20>)
 8006b34:	602a      	str	r2, [r5, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	f7fb fd0a 	bl	8002550 <_read>
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	d102      	bne.n	8006b46 <_read_r+0x1e>
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	b103      	cbz	r3, 8006b46 <_read_r+0x1e>
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	bd38      	pop	{r3, r4, r5, pc}
 8006b48:	20000a38 	.word	0x20000a38

08006b4c <_write_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4608      	mov	r0, r1
 8006b52:	4611      	mov	r1, r2
 8006b54:	2200      	movs	r2, #0
 8006b56:	4d05      	ldr	r5, [pc, #20]	@ (8006b6c <_write_r+0x20>)
 8006b58:	602a      	str	r2, [r5, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f7fb fd15 	bl	800258a <_write>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_write_r+0x1e>
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_write_r+0x1e>
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	20000a38 	.word	0x20000a38

08006b70 <__errno>:
 8006b70:	4b01      	ldr	r3, [pc, #4]	@ (8006b78 <__errno+0x8>)
 8006b72:	6818      	ldr	r0, [r3, #0]
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	20000020 	.word	0x20000020

08006b7c <__libc_init_array>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	2600      	movs	r6, #0
 8006b80:	4d0c      	ldr	r5, [pc, #48]	@ (8006bb4 <__libc_init_array+0x38>)
 8006b82:	4c0d      	ldr	r4, [pc, #52]	@ (8006bb8 <__libc_init_array+0x3c>)
 8006b84:	1b64      	subs	r4, r4, r5
 8006b86:	10a4      	asrs	r4, r4, #2
 8006b88:	42a6      	cmp	r6, r4
 8006b8a:	d109      	bne.n	8006ba0 <__libc_init_array+0x24>
 8006b8c:	f002 f870 	bl	8008c70 <_init>
 8006b90:	2600      	movs	r6, #0
 8006b92:	4d0a      	ldr	r5, [pc, #40]	@ (8006bbc <__libc_init_array+0x40>)
 8006b94:	4c0a      	ldr	r4, [pc, #40]	@ (8006bc0 <__libc_init_array+0x44>)
 8006b96:	1b64      	subs	r4, r4, r5
 8006b98:	10a4      	asrs	r4, r4, #2
 8006b9a:	42a6      	cmp	r6, r4
 8006b9c:	d105      	bne.n	8006baa <__libc_init_array+0x2e>
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba4:	4798      	blx	r3
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	e7ee      	b.n	8006b88 <__libc_init_array+0xc>
 8006baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bae:	4798      	blx	r3
 8006bb0:	3601      	adds	r6, #1
 8006bb2:	e7f2      	b.n	8006b9a <__libc_init_array+0x1e>
 8006bb4:	08009ac0 	.word	0x08009ac0
 8006bb8:	08009ac0 	.word	0x08009ac0
 8006bbc:	08009ac0 	.word	0x08009ac0
 8006bc0:	08009ac4 	.word	0x08009ac4

08006bc4 <__retarget_lock_init_recursive>:
 8006bc4:	4770      	bx	lr

08006bc6 <__retarget_lock_acquire_recursive>:
 8006bc6:	4770      	bx	lr

08006bc8 <__retarget_lock_release_recursive>:
 8006bc8:	4770      	bx	lr

08006bca <memchr>:
 8006bca:	4603      	mov	r3, r0
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	b2c9      	uxtb	r1, r1
 8006bd0:	4402      	add	r2, r0
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	d101      	bne.n	8006bdc <memchr+0x12>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	e003      	b.n	8006be4 <memchr+0x1a>
 8006bdc:	7804      	ldrb	r4, [r0, #0]
 8006bde:	3301      	adds	r3, #1
 8006be0:	428c      	cmp	r4, r1
 8006be2:	d1f6      	bne.n	8006bd2 <memchr+0x8>
 8006be4:	bd10      	pop	{r4, pc}

08006be6 <memcpy>:
 8006be6:	440a      	add	r2, r1
 8006be8:	4291      	cmp	r1, r2
 8006bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bee:	d100      	bne.n	8006bf2 <memcpy+0xc>
 8006bf0:	4770      	bx	lr
 8006bf2:	b510      	push	{r4, lr}
 8006bf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bf8:	4291      	cmp	r1, r2
 8006bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bfe:	d1f9      	bne.n	8006bf4 <memcpy+0xe>
 8006c00:	bd10      	pop	{r4, pc}

08006c02 <quorem>:
 8006c02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c06:	6903      	ldr	r3, [r0, #16]
 8006c08:	690c      	ldr	r4, [r1, #16]
 8006c0a:	4607      	mov	r7, r0
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	db7e      	blt.n	8006d0e <quorem+0x10c>
 8006c10:	3c01      	subs	r4, #1
 8006c12:	00a3      	lsls	r3, r4, #2
 8006c14:	f100 0514 	add.w	r5, r0, #20
 8006c18:	f101 0814 	add.w	r8, r1, #20
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c22:	9301      	str	r3, [sp, #4]
 8006c24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c38:	d32e      	bcc.n	8006c98 <quorem+0x96>
 8006c3a:	f04f 0a00 	mov.w	sl, #0
 8006c3e:	46c4      	mov	ip, r8
 8006c40:	46ae      	mov	lr, r5
 8006c42:	46d3      	mov	fp, sl
 8006c44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c48:	b298      	uxth	r0, r3
 8006c4a:	fb06 a000 	mla	r0, r6, r0, sl
 8006c4e:	0c1b      	lsrs	r3, r3, #16
 8006c50:	0c02      	lsrs	r2, r0, #16
 8006c52:	fb06 2303 	mla	r3, r6, r3, r2
 8006c56:	f8de 2000 	ldr.w	r2, [lr]
 8006c5a:	b280      	uxth	r0, r0
 8006c5c:	b292      	uxth	r2, r2
 8006c5e:	1a12      	subs	r2, r2, r0
 8006c60:	445a      	add	r2, fp
 8006c62:	f8de 0000 	ldr.w	r0, [lr]
 8006c66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c70:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c74:	b292      	uxth	r2, r2
 8006c76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c7a:	45e1      	cmp	r9, ip
 8006c7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c80:	f84e 2b04 	str.w	r2, [lr], #4
 8006c84:	d2de      	bcs.n	8006c44 <quorem+0x42>
 8006c86:	9b00      	ldr	r3, [sp, #0]
 8006c88:	58eb      	ldr	r3, [r5, r3]
 8006c8a:	b92b      	cbnz	r3, 8006c98 <quorem+0x96>
 8006c8c:	9b01      	ldr	r3, [sp, #4]
 8006c8e:	3b04      	subs	r3, #4
 8006c90:	429d      	cmp	r5, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	d32f      	bcc.n	8006cf6 <quorem+0xf4>
 8006c96:	613c      	str	r4, [r7, #16]
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f001 f97b 	bl	8007f94 <__mcmp>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	db25      	blt.n	8006cee <quorem+0xec>
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	f858 2b04 	ldr.w	r2, [r8], #4
 8006caa:	f8d1 c000 	ldr.w	ip, [r1]
 8006cae:	fa1f fe82 	uxth.w	lr, r2
 8006cb2:	fa1f f38c 	uxth.w	r3, ip
 8006cb6:	eba3 030e 	sub.w	r3, r3, lr
 8006cba:	4403      	add	r3, r0
 8006cbc:	0c12      	lsrs	r2, r2, #16
 8006cbe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006cc2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ccc:	45c1      	cmp	r9, r8
 8006cce:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cd2:	f841 3b04 	str.w	r3, [r1], #4
 8006cd6:	d2e6      	bcs.n	8006ca6 <quorem+0xa4>
 8006cd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ce0:	b922      	cbnz	r2, 8006cec <quorem+0xea>
 8006ce2:	3b04      	subs	r3, #4
 8006ce4:	429d      	cmp	r5, r3
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	d30b      	bcc.n	8006d02 <quorem+0x100>
 8006cea:	613c      	str	r4, [r7, #16]
 8006cec:	3601      	adds	r6, #1
 8006cee:	4630      	mov	r0, r6
 8006cf0:	b003      	add	sp, #12
 8006cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf6:	6812      	ldr	r2, [r2, #0]
 8006cf8:	3b04      	subs	r3, #4
 8006cfa:	2a00      	cmp	r2, #0
 8006cfc:	d1cb      	bne.n	8006c96 <quorem+0x94>
 8006cfe:	3c01      	subs	r4, #1
 8006d00:	e7c6      	b.n	8006c90 <quorem+0x8e>
 8006d02:	6812      	ldr	r2, [r2, #0]
 8006d04:	3b04      	subs	r3, #4
 8006d06:	2a00      	cmp	r2, #0
 8006d08:	d1ef      	bne.n	8006cea <quorem+0xe8>
 8006d0a:	3c01      	subs	r4, #1
 8006d0c:	e7ea      	b.n	8006ce4 <quorem+0xe2>
 8006d0e:	2000      	movs	r0, #0
 8006d10:	e7ee      	b.n	8006cf0 <quorem+0xee>
 8006d12:	0000      	movs	r0, r0
 8006d14:	0000      	movs	r0, r0
	...

08006d18 <_dtoa_r>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	461d      	mov	r5, r3
 8006d20:	69c7      	ldr	r7, [r0, #28]
 8006d22:	b097      	sub	sp, #92	@ 0x5c
 8006d24:	4683      	mov	fp, r0
 8006d26:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006d2a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006d2c:	b97f      	cbnz	r7, 8006d4e <_dtoa_r+0x36>
 8006d2e:	2010      	movs	r0, #16
 8006d30:	f000 fe02 	bl	8007938 <malloc>
 8006d34:	4602      	mov	r2, r0
 8006d36:	f8cb 001c 	str.w	r0, [fp, #28]
 8006d3a:	b920      	cbnz	r0, 8006d46 <_dtoa_r+0x2e>
 8006d3c:	21ef      	movs	r1, #239	@ 0xef
 8006d3e:	4ba8      	ldr	r3, [pc, #672]	@ (8006fe0 <_dtoa_r+0x2c8>)
 8006d40:	48a8      	ldr	r0, [pc, #672]	@ (8006fe4 <_dtoa_r+0x2cc>)
 8006d42:	f001 fc59 	bl	80085f8 <__assert_func>
 8006d46:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d4a:	6007      	str	r7, [r0, #0]
 8006d4c:	60c7      	str	r7, [r0, #12]
 8006d4e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d52:	6819      	ldr	r1, [r3, #0]
 8006d54:	b159      	cbz	r1, 8006d6e <_dtoa_r+0x56>
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	2301      	movs	r3, #1
 8006d5a:	4093      	lsls	r3, r2
 8006d5c:	604a      	str	r2, [r1, #4]
 8006d5e:	608b      	str	r3, [r1, #8]
 8006d60:	4658      	mov	r0, fp
 8006d62:	f000 fedf 	bl	8007b24 <_Bfree>
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	1e2b      	subs	r3, r5, #0
 8006d70:	bfaf      	iteee	ge
 8006d72:	2300      	movge	r3, #0
 8006d74:	2201      	movlt	r2, #1
 8006d76:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d7a:	9303      	strlt	r3, [sp, #12]
 8006d7c:	bfa8      	it	ge
 8006d7e:	6033      	strge	r3, [r6, #0]
 8006d80:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006d84:	4b98      	ldr	r3, [pc, #608]	@ (8006fe8 <_dtoa_r+0x2d0>)
 8006d86:	bfb8      	it	lt
 8006d88:	6032      	strlt	r2, [r6, #0]
 8006d8a:	ea33 0308 	bics.w	r3, r3, r8
 8006d8e:	d112      	bne.n	8006db6 <_dtoa_r+0x9e>
 8006d90:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d94:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006d9c:	4323      	orrs	r3, r4
 8006d9e:	f000 8550 	beq.w	8007842 <_dtoa_r+0xb2a>
 8006da2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006da4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006fec <_dtoa_r+0x2d4>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8552 	beq.w	8007852 <_dtoa_r+0xb3a>
 8006dae:	f10a 0303 	add.w	r3, sl, #3
 8006db2:	f000 bd4c 	b.w	800784e <_dtoa_r+0xb36>
 8006db6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006dbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f7f9 fdef 	bl	80009a8 <__aeabi_dcmpeq>
 8006dca:	4607      	mov	r7, r0
 8006dcc:	b158      	cbz	r0, 8006de6 <_dtoa_r+0xce>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006dd6:	b113      	cbz	r3, 8006dde <_dtoa_r+0xc6>
 8006dd8:	4b85      	ldr	r3, [pc, #532]	@ (8006ff0 <_dtoa_r+0x2d8>)
 8006dda:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006ff4 <_dtoa_r+0x2dc>
 8006de2:	f000 bd36 	b.w	8007852 <_dtoa_r+0xb3a>
 8006de6:	ab14      	add	r3, sp, #80	@ 0x50
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	ab15      	add	r3, sp, #84	@ 0x54
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	4658      	mov	r0, fp
 8006df0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006df4:	f001 f97e 	bl	80080f4 <__d2b>
 8006df8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006dfc:	4681      	mov	r9, r0
 8006dfe:	2e00      	cmp	r6, #0
 8006e00:	d077      	beq.n	8006ef2 <_dtoa_r+0x1da>
 8006e02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e08:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e10:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e14:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006e18:	9712      	str	r7, [sp, #72]	@ 0x48
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4b76      	ldr	r3, [pc, #472]	@ (8006ff8 <_dtoa_r+0x2e0>)
 8006e20:	f7f9 f9a2 	bl	8000168 <__aeabi_dsub>
 8006e24:	a368      	add	r3, pc, #416	@ (adr r3, 8006fc8 <_dtoa_r+0x2b0>)
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f7f9 fb55 	bl	80004d8 <__aeabi_dmul>
 8006e2e:	a368      	add	r3, pc, #416	@ (adr r3, 8006fd0 <_dtoa_r+0x2b8>)
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f7f9 f99a 	bl	800016c <__adddf3>
 8006e38:	4604      	mov	r4, r0
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	460d      	mov	r5, r1
 8006e3e:	f7f9 fae1 	bl	8000404 <__aeabi_i2d>
 8006e42:	a365      	add	r3, pc, #404	@ (adr r3, 8006fd8 <_dtoa_r+0x2c0>)
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	f7f9 fb46 	bl	80004d8 <__aeabi_dmul>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4620      	mov	r0, r4
 8006e52:	4629      	mov	r1, r5
 8006e54:	f7f9 f98a 	bl	800016c <__adddf3>
 8006e58:	4604      	mov	r4, r0
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	f7f9 fdec 	bl	8000a38 <__aeabi_d2iz>
 8006e60:	2200      	movs	r2, #0
 8006e62:	4607      	mov	r7, r0
 8006e64:	2300      	movs	r3, #0
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f7f9 fda7 	bl	80009bc <__aeabi_dcmplt>
 8006e6e:	b140      	cbz	r0, 8006e82 <_dtoa_r+0x16a>
 8006e70:	4638      	mov	r0, r7
 8006e72:	f7f9 fac7 	bl	8000404 <__aeabi_i2d>
 8006e76:	4622      	mov	r2, r4
 8006e78:	462b      	mov	r3, r5
 8006e7a:	f7f9 fd95 	bl	80009a8 <__aeabi_dcmpeq>
 8006e7e:	b900      	cbnz	r0, 8006e82 <_dtoa_r+0x16a>
 8006e80:	3f01      	subs	r7, #1
 8006e82:	2f16      	cmp	r7, #22
 8006e84:	d853      	bhi.n	8006f2e <_dtoa_r+0x216>
 8006e86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8006ffc <_dtoa_r+0x2e4>)
 8006e8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f7f9 fd92 	bl	80009bc <__aeabi_dcmplt>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d04a      	beq.n	8006f32 <_dtoa_r+0x21a>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	3f01      	subs	r7, #1
 8006ea0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ea2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ea4:	1b9b      	subs	r3, r3, r6
 8006ea6:	1e5a      	subs	r2, r3, #1
 8006ea8:	bf46      	itte	mi
 8006eaa:	f1c3 0801 	rsbmi	r8, r3, #1
 8006eae:	2300      	movmi	r3, #0
 8006eb0:	f04f 0800 	movpl.w	r8, #0
 8006eb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eb6:	bf48      	it	mi
 8006eb8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006eba:	2f00      	cmp	r7, #0
 8006ebc:	db3b      	blt.n	8006f36 <_dtoa_r+0x21e>
 8006ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec0:	970e      	str	r7, [sp, #56]	@ 0x38
 8006ec2:	443b      	add	r3, r7
 8006ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ecc:	2b09      	cmp	r3, #9
 8006ece:	d866      	bhi.n	8006f9e <_dtoa_r+0x286>
 8006ed0:	2b05      	cmp	r3, #5
 8006ed2:	bfc4      	itt	gt
 8006ed4:	3b04      	subgt	r3, #4
 8006ed6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006ed8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006eda:	bfc8      	it	gt
 8006edc:	2400      	movgt	r4, #0
 8006ede:	f1a3 0302 	sub.w	r3, r3, #2
 8006ee2:	bfd8      	it	le
 8006ee4:	2401      	movle	r4, #1
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d864      	bhi.n	8006fb4 <_dtoa_r+0x29c>
 8006eea:	e8df f003 	tbb	[pc, r3]
 8006eee:	382b      	.short	0x382b
 8006ef0:	5636      	.short	0x5636
 8006ef2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006ef6:	441e      	add	r6, r3
 8006ef8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	bfc1      	itttt	gt
 8006f00:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006f04:	fa08 f803 	lslgt.w	r8, r8, r3
 8006f08:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006f0c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006f10:	bfd6      	itet	le
 8006f12:	f1c3 0320 	rsble	r3, r3, #32
 8006f16:	ea48 0003 	orrgt.w	r0, r8, r3
 8006f1a:	fa04 f003 	lslle.w	r0, r4, r3
 8006f1e:	f7f9 fa61 	bl	80003e4 <__aeabi_ui2d>
 8006f22:	2201      	movs	r2, #1
 8006f24:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f28:	3e01      	subs	r6, #1
 8006f2a:	9212      	str	r2, [sp, #72]	@ 0x48
 8006f2c:	e775      	b.n	8006e1a <_dtoa_r+0x102>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e7b6      	b.n	8006ea0 <_dtoa_r+0x188>
 8006f32:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006f34:	e7b5      	b.n	8006ea2 <_dtoa_r+0x18a>
 8006f36:	427b      	negs	r3, r7
 8006f38:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	eba8 0807 	sub.w	r8, r8, r7
 8006f40:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f42:	e7c2      	b.n	8006eca <_dtoa_r+0x1b2>
 8006f44:	2300      	movs	r3, #0
 8006f46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	dc35      	bgt.n	8006fba <_dtoa_r+0x2a2>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	461a      	mov	r2, r3
 8006f52:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006f56:	9221      	str	r2, [sp, #132]	@ 0x84
 8006f58:	e00b      	b.n	8006f72 <_dtoa_r+0x25a>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e7f3      	b.n	8006f46 <_dtoa_r+0x22e>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	9308      	str	r3, [sp, #32]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	9307      	str	r3, [sp, #28]
 8006f6e:	bfb8      	it	lt
 8006f70:	2301      	movlt	r3, #1
 8006f72:	2100      	movs	r1, #0
 8006f74:	2204      	movs	r2, #4
 8006f76:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f7a:	f102 0514 	add.w	r5, r2, #20
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	d91f      	bls.n	8006fc2 <_dtoa_r+0x2aa>
 8006f82:	6041      	str	r1, [r0, #4]
 8006f84:	4658      	mov	r0, fp
 8006f86:	f000 fd8d 	bl	8007aa4 <_Balloc>
 8006f8a:	4682      	mov	sl, r0
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d139      	bne.n	8007004 <_dtoa_r+0x2ec>
 8006f90:	4602      	mov	r2, r0
 8006f92:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f96:	4b1a      	ldr	r3, [pc, #104]	@ (8007000 <_dtoa_r+0x2e8>)
 8006f98:	e6d2      	b.n	8006d40 <_dtoa_r+0x28>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e7e0      	b.n	8006f60 <_dtoa_r+0x248>
 8006f9e:	2401      	movs	r4, #1
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006fa4:	9320      	str	r3, [sp, #128]	@ 0x80
 8006fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006faa:	2200      	movs	r2, #0
 8006fac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006fb0:	2312      	movs	r3, #18
 8006fb2:	e7d0      	b.n	8006f56 <_dtoa_r+0x23e>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fb8:	e7f5      	b.n	8006fa6 <_dtoa_r+0x28e>
 8006fba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fbc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006fc0:	e7d7      	b.n	8006f72 <_dtoa_r+0x25a>
 8006fc2:	3101      	adds	r1, #1
 8006fc4:	0052      	lsls	r2, r2, #1
 8006fc6:	e7d8      	b.n	8006f7a <_dtoa_r+0x262>
 8006fc8:	636f4361 	.word	0x636f4361
 8006fcc:	3fd287a7 	.word	0x3fd287a7
 8006fd0:	8b60c8b3 	.word	0x8b60c8b3
 8006fd4:	3fc68a28 	.word	0x3fc68a28
 8006fd8:	509f79fb 	.word	0x509f79fb
 8006fdc:	3fd34413 	.word	0x3fd34413
 8006fe0:	0800978b 	.word	0x0800978b
 8006fe4:	080097a2 	.word	0x080097a2
 8006fe8:	7ff00000 	.word	0x7ff00000
 8006fec:	08009787 	.word	0x08009787
 8006ff0:	0800975b 	.word	0x0800975b
 8006ff4:	0800975a 	.word	0x0800975a
 8006ff8:	3ff80000 	.word	0x3ff80000
 8006ffc:	08009898 	.word	0x08009898
 8007000:	080097fa 	.word	0x080097fa
 8007004:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007008:	6018      	str	r0, [r3, #0]
 800700a:	9b07      	ldr	r3, [sp, #28]
 800700c:	2b0e      	cmp	r3, #14
 800700e:	f200 80a4 	bhi.w	800715a <_dtoa_r+0x442>
 8007012:	2c00      	cmp	r4, #0
 8007014:	f000 80a1 	beq.w	800715a <_dtoa_r+0x442>
 8007018:	2f00      	cmp	r7, #0
 800701a:	dd33      	ble.n	8007084 <_dtoa_r+0x36c>
 800701c:	4b86      	ldr	r3, [pc, #536]	@ (8007238 <_dtoa_r+0x520>)
 800701e:	f007 020f 	and.w	r2, r7, #15
 8007022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007026:	05f8      	lsls	r0, r7, #23
 8007028:	e9d3 3400 	ldrd	r3, r4, [r3]
 800702c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007030:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007034:	d516      	bpl.n	8007064 <_dtoa_r+0x34c>
 8007036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800703a:	4b80      	ldr	r3, [pc, #512]	@ (800723c <_dtoa_r+0x524>)
 800703c:	2603      	movs	r6, #3
 800703e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007042:	f7f9 fb73 	bl	800072c <__aeabi_ddiv>
 8007046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800704a:	f004 040f 	and.w	r4, r4, #15
 800704e:	4d7b      	ldr	r5, [pc, #492]	@ (800723c <_dtoa_r+0x524>)
 8007050:	b954      	cbnz	r4, 8007068 <_dtoa_r+0x350>
 8007052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800705a:	f7f9 fb67 	bl	800072c <__aeabi_ddiv>
 800705e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007062:	e028      	b.n	80070b6 <_dtoa_r+0x39e>
 8007064:	2602      	movs	r6, #2
 8007066:	e7f2      	b.n	800704e <_dtoa_r+0x336>
 8007068:	07e1      	lsls	r1, r4, #31
 800706a:	d508      	bpl.n	800707e <_dtoa_r+0x366>
 800706c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007070:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007074:	f7f9 fa30 	bl	80004d8 <__aeabi_dmul>
 8007078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800707c:	3601      	adds	r6, #1
 800707e:	1064      	asrs	r4, r4, #1
 8007080:	3508      	adds	r5, #8
 8007082:	e7e5      	b.n	8007050 <_dtoa_r+0x338>
 8007084:	f000 80d2 	beq.w	800722c <_dtoa_r+0x514>
 8007088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800708c:	427c      	negs	r4, r7
 800708e:	4b6a      	ldr	r3, [pc, #424]	@ (8007238 <_dtoa_r+0x520>)
 8007090:	f004 020f 	and.w	r2, r4, #15
 8007094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	f7f9 fa1c 	bl	80004d8 <__aeabi_dmul>
 80070a0:	2602      	movs	r6, #2
 80070a2:	2300      	movs	r3, #0
 80070a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070a8:	4d64      	ldr	r5, [pc, #400]	@ (800723c <_dtoa_r+0x524>)
 80070aa:	1124      	asrs	r4, r4, #4
 80070ac:	2c00      	cmp	r4, #0
 80070ae:	f040 80b2 	bne.w	8007216 <_dtoa_r+0x4fe>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1d3      	bne.n	800705e <_dtoa_r+0x346>
 80070b6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80b7 	beq.w	8007230 <_dtoa_r+0x518>
 80070c2:	2200      	movs	r2, #0
 80070c4:	4620      	mov	r0, r4
 80070c6:	4629      	mov	r1, r5
 80070c8:	4b5d      	ldr	r3, [pc, #372]	@ (8007240 <_dtoa_r+0x528>)
 80070ca:	f7f9 fc77 	bl	80009bc <__aeabi_dcmplt>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f000 80ae 	beq.w	8007230 <_dtoa_r+0x518>
 80070d4:	9b07      	ldr	r3, [sp, #28]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 80aa 	beq.w	8007230 <_dtoa_r+0x518>
 80070dc:	9b08      	ldr	r3, [sp, #32]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	dd37      	ble.n	8007152 <_dtoa_r+0x43a>
 80070e2:	1e7b      	subs	r3, r7, #1
 80070e4:	4620      	mov	r0, r4
 80070e6:	9304      	str	r3, [sp, #16]
 80070e8:	2200      	movs	r2, #0
 80070ea:	4629      	mov	r1, r5
 80070ec:	4b55      	ldr	r3, [pc, #340]	@ (8007244 <_dtoa_r+0x52c>)
 80070ee:	f7f9 f9f3 	bl	80004d8 <__aeabi_dmul>
 80070f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070f6:	9c08      	ldr	r4, [sp, #32]
 80070f8:	3601      	adds	r6, #1
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7f9 f982 	bl	8000404 <__aeabi_i2d>
 8007100:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007104:	f7f9 f9e8 	bl	80004d8 <__aeabi_dmul>
 8007108:	2200      	movs	r2, #0
 800710a:	4b4f      	ldr	r3, [pc, #316]	@ (8007248 <_dtoa_r+0x530>)
 800710c:	f7f9 f82e 	bl	800016c <__adddf3>
 8007110:	4605      	mov	r5, r0
 8007112:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007116:	2c00      	cmp	r4, #0
 8007118:	f040 809a 	bne.w	8007250 <_dtoa_r+0x538>
 800711c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007120:	2200      	movs	r2, #0
 8007122:	4b4a      	ldr	r3, [pc, #296]	@ (800724c <_dtoa_r+0x534>)
 8007124:	f7f9 f820 	bl	8000168 <__aeabi_dsub>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007130:	462a      	mov	r2, r5
 8007132:	4633      	mov	r3, r6
 8007134:	f7f9 fc60 	bl	80009f8 <__aeabi_dcmpgt>
 8007138:	2800      	cmp	r0, #0
 800713a:	f040 828e 	bne.w	800765a <_dtoa_r+0x942>
 800713e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007142:	462a      	mov	r2, r5
 8007144:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007148:	f7f9 fc38 	bl	80009bc <__aeabi_dcmplt>
 800714c:	2800      	cmp	r0, #0
 800714e:	f040 8127 	bne.w	80073a0 <_dtoa_r+0x688>
 8007152:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007156:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800715a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800715c:	2b00      	cmp	r3, #0
 800715e:	f2c0 8163 	blt.w	8007428 <_dtoa_r+0x710>
 8007162:	2f0e      	cmp	r7, #14
 8007164:	f300 8160 	bgt.w	8007428 <_dtoa_r+0x710>
 8007168:	4b33      	ldr	r3, [pc, #204]	@ (8007238 <_dtoa_r+0x520>)
 800716a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800716e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007172:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007176:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007178:	2b00      	cmp	r3, #0
 800717a:	da03      	bge.n	8007184 <_dtoa_r+0x46c>
 800717c:	9b07      	ldr	r3, [sp, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f340 8100 	ble.w	8007384 <_dtoa_r+0x66c>
 8007184:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007188:	4656      	mov	r6, sl
 800718a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800718e:	4620      	mov	r0, r4
 8007190:	4629      	mov	r1, r5
 8007192:	f7f9 facb 	bl	800072c <__aeabi_ddiv>
 8007196:	f7f9 fc4f 	bl	8000a38 <__aeabi_d2iz>
 800719a:	4680      	mov	r8, r0
 800719c:	f7f9 f932 	bl	8000404 <__aeabi_i2d>
 80071a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071a4:	f7f9 f998 	bl	80004d8 <__aeabi_dmul>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	f7f8 ffda 	bl	8000168 <__aeabi_dsub>
 80071b4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80071b8:	9d07      	ldr	r5, [sp, #28]
 80071ba:	f806 4b01 	strb.w	r4, [r6], #1
 80071be:	eba6 040a 	sub.w	r4, r6, sl
 80071c2:	42a5      	cmp	r5, r4
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	f040 8116 	bne.w	80073f8 <_dtoa_r+0x6e0>
 80071cc:	f7f8 ffce 	bl	800016c <__adddf3>
 80071d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071d4:	4604      	mov	r4, r0
 80071d6:	460d      	mov	r5, r1
 80071d8:	f7f9 fc0e 	bl	80009f8 <__aeabi_dcmpgt>
 80071dc:	2800      	cmp	r0, #0
 80071de:	f040 80f8 	bne.w	80073d2 <_dtoa_r+0x6ba>
 80071e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071e6:	4620      	mov	r0, r4
 80071e8:	4629      	mov	r1, r5
 80071ea:	f7f9 fbdd 	bl	80009a8 <__aeabi_dcmpeq>
 80071ee:	b118      	cbz	r0, 80071f8 <_dtoa_r+0x4e0>
 80071f0:	f018 0f01 	tst.w	r8, #1
 80071f4:	f040 80ed 	bne.w	80073d2 <_dtoa_r+0x6ba>
 80071f8:	4649      	mov	r1, r9
 80071fa:	4658      	mov	r0, fp
 80071fc:	f000 fc92 	bl	8007b24 <_Bfree>
 8007200:	2300      	movs	r3, #0
 8007202:	7033      	strb	r3, [r6, #0]
 8007204:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007206:	3701      	adds	r7, #1
 8007208:	601f      	str	r7, [r3, #0]
 800720a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8320 	beq.w	8007852 <_dtoa_r+0xb3a>
 8007212:	601e      	str	r6, [r3, #0]
 8007214:	e31d      	b.n	8007852 <_dtoa_r+0xb3a>
 8007216:	07e2      	lsls	r2, r4, #31
 8007218:	d505      	bpl.n	8007226 <_dtoa_r+0x50e>
 800721a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800721e:	f7f9 f95b 	bl	80004d8 <__aeabi_dmul>
 8007222:	2301      	movs	r3, #1
 8007224:	3601      	adds	r6, #1
 8007226:	1064      	asrs	r4, r4, #1
 8007228:	3508      	adds	r5, #8
 800722a:	e73f      	b.n	80070ac <_dtoa_r+0x394>
 800722c:	2602      	movs	r6, #2
 800722e:	e742      	b.n	80070b6 <_dtoa_r+0x39e>
 8007230:	9c07      	ldr	r4, [sp, #28]
 8007232:	9704      	str	r7, [sp, #16]
 8007234:	e761      	b.n	80070fa <_dtoa_r+0x3e2>
 8007236:	bf00      	nop
 8007238:	08009898 	.word	0x08009898
 800723c:	08009870 	.word	0x08009870
 8007240:	3ff00000 	.word	0x3ff00000
 8007244:	40240000 	.word	0x40240000
 8007248:	401c0000 	.word	0x401c0000
 800724c:	40140000 	.word	0x40140000
 8007250:	4b70      	ldr	r3, [pc, #448]	@ (8007414 <_dtoa_r+0x6fc>)
 8007252:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007254:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007258:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800725c:	4454      	add	r4, sl
 800725e:	2900      	cmp	r1, #0
 8007260:	d045      	beq.n	80072ee <_dtoa_r+0x5d6>
 8007262:	2000      	movs	r0, #0
 8007264:	496c      	ldr	r1, [pc, #432]	@ (8007418 <_dtoa_r+0x700>)
 8007266:	f7f9 fa61 	bl	800072c <__aeabi_ddiv>
 800726a:	4633      	mov	r3, r6
 800726c:	462a      	mov	r2, r5
 800726e:	f7f8 ff7b 	bl	8000168 <__aeabi_dsub>
 8007272:	4656      	mov	r6, sl
 8007274:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800727c:	f7f9 fbdc 	bl	8000a38 <__aeabi_d2iz>
 8007280:	4605      	mov	r5, r0
 8007282:	f7f9 f8bf 	bl	8000404 <__aeabi_i2d>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800728e:	f7f8 ff6b 	bl	8000168 <__aeabi_dsub>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	3530      	adds	r5, #48	@ 0x30
 8007298:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800729c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072a0:	f806 5b01 	strb.w	r5, [r6], #1
 80072a4:	f7f9 fb8a 	bl	80009bc <__aeabi_dcmplt>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d163      	bne.n	8007374 <_dtoa_r+0x65c>
 80072ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072b0:	2000      	movs	r0, #0
 80072b2:	495a      	ldr	r1, [pc, #360]	@ (800741c <_dtoa_r+0x704>)
 80072b4:	f7f8 ff58 	bl	8000168 <__aeabi_dsub>
 80072b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072bc:	f7f9 fb7e 	bl	80009bc <__aeabi_dcmplt>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	f040 8087 	bne.w	80073d4 <_dtoa_r+0x6bc>
 80072c6:	42a6      	cmp	r6, r4
 80072c8:	f43f af43 	beq.w	8007152 <_dtoa_r+0x43a>
 80072cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072d0:	2200      	movs	r2, #0
 80072d2:	4b53      	ldr	r3, [pc, #332]	@ (8007420 <_dtoa_r+0x708>)
 80072d4:	f7f9 f900 	bl	80004d8 <__aeabi_dmul>
 80072d8:	2200      	movs	r2, #0
 80072da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007420 <_dtoa_r+0x708>)
 80072e4:	f7f9 f8f8 	bl	80004d8 <__aeabi_dmul>
 80072e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072ec:	e7c4      	b.n	8007278 <_dtoa_r+0x560>
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	f7f9 f8f1 	bl	80004d8 <__aeabi_dmul>
 80072f6:	4656      	mov	r6, sl
 80072f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072fc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80072fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007302:	f7f9 fb99 	bl	8000a38 <__aeabi_d2iz>
 8007306:	4605      	mov	r5, r0
 8007308:	f7f9 f87c 	bl	8000404 <__aeabi_i2d>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007314:	f7f8 ff28 	bl	8000168 <__aeabi_dsub>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	3530      	adds	r5, #48	@ 0x30
 800731e:	f806 5b01 	strb.w	r5, [r6], #1
 8007322:	42a6      	cmp	r6, r4
 8007324:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007328:	f04f 0200 	mov.w	r2, #0
 800732c:	d124      	bne.n	8007378 <_dtoa_r+0x660>
 800732e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007332:	4b39      	ldr	r3, [pc, #228]	@ (8007418 <_dtoa_r+0x700>)
 8007334:	f7f8 ff1a 	bl	800016c <__adddf3>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007340:	f7f9 fb5a 	bl	80009f8 <__aeabi_dcmpgt>
 8007344:	2800      	cmp	r0, #0
 8007346:	d145      	bne.n	80073d4 <_dtoa_r+0x6bc>
 8007348:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800734c:	2000      	movs	r0, #0
 800734e:	4932      	ldr	r1, [pc, #200]	@ (8007418 <_dtoa_r+0x700>)
 8007350:	f7f8 ff0a 	bl	8000168 <__aeabi_dsub>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800735c:	f7f9 fb2e 	bl	80009bc <__aeabi_dcmplt>
 8007360:	2800      	cmp	r0, #0
 8007362:	f43f aef6 	beq.w	8007152 <_dtoa_r+0x43a>
 8007366:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007368:	1e73      	subs	r3, r6, #1
 800736a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800736c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007370:	2b30      	cmp	r3, #48	@ 0x30
 8007372:	d0f8      	beq.n	8007366 <_dtoa_r+0x64e>
 8007374:	9f04      	ldr	r7, [sp, #16]
 8007376:	e73f      	b.n	80071f8 <_dtoa_r+0x4e0>
 8007378:	4b29      	ldr	r3, [pc, #164]	@ (8007420 <_dtoa_r+0x708>)
 800737a:	f7f9 f8ad 	bl	80004d8 <__aeabi_dmul>
 800737e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007382:	e7bc      	b.n	80072fe <_dtoa_r+0x5e6>
 8007384:	d10c      	bne.n	80073a0 <_dtoa_r+0x688>
 8007386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800738a:	2200      	movs	r2, #0
 800738c:	4b25      	ldr	r3, [pc, #148]	@ (8007424 <_dtoa_r+0x70c>)
 800738e:	f7f9 f8a3 	bl	80004d8 <__aeabi_dmul>
 8007392:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007396:	f7f9 fb25 	bl	80009e4 <__aeabi_dcmpge>
 800739a:	2800      	cmp	r0, #0
 800739c:	f000 815b 	beq.w	8007656 <_dtoa_r+0x93e>
 80073a0:	2400      	movs	r4, #0
 80073a2:	4625      	mov	r5, r4
 80073a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073a6:	4656      	mov	r6, sl
 80073a8:	43db      	mvns	r3, r3
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	2700      	movs	r7, #0
 80073ae:	4621      	mov	r1, r4
 80073b0:	4658      	mov	r0, fp
 80073b2:	f000 fbb7 	bl	8007b24 <_Bfree>
 80073b6:	2d00      	cmp	r5, #0
 80073b8:	d0dc      	beq.n	8007374 <_dtoa_r+0x65c>
 80073ba:	b12f      	cbz	r7, 80073c8 <_dtoa_r+0x6b0>
 80073bc:	42af      	cmp	r7, r5
 80073be:	d003      	beq.n	80073c8 <_dtoa_r+0x6b0>
 80073c0:	4639      	mov	r1, r7
 80073c2:	4658      	mov	r0, fp
 80073c4:	f000 fbae 	bl	8007b24 <_Bfree>
 80073c8:	4629      	mov	r1, r5
 80073ca:	4658      	mov	r0, fp
 80073cc:	f000 fbaa 	bl	8007b24 <_Bfree>
 80073d0:	e7d0      	b.n	8007374 <_dtoa_r+0x65c>
 80073d2:	9704      	str	r7, [sp, #16]
 80073d4:	4633      	mov	r3, r6
 80073d6:	461e      	mov	r6, r3
 80073d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073dc:	2a39      	cmp	r2, #57	@ 0x39
 80073de:	d107      	bne.n	80073f0 <_dtoa_r+0x6d8>
 80073e0:	459a      	cmp	sl, r3
 80073e2:	d1f8      	bne.n	80073d6 <_dtoa_r+0x6be>
 80073e4:	9a04      	ldr	r2, [sp, #16]
 80073e6:	3201      	adds	r2, #1
 80073e8:	9204      	str	r2, [sp, #16]
 80073ea:	2230      	movs	r2, #48	@ 0x30
 80073ec:	f88a 2000 	strb.w	r2, [sl]
 80073f0:	781a      	ldrb	r2, [r3, #0]
 80073f2:	3201      	adds	r2, #1
 80073f4:	701a      	strb	r2, [r3, #0]
 80073f6:	e7bd      	b.n	8007374 <_dtoa_r+0x65c>
 80073f8:	2200      	movs	r2, #0
 80073fa:	4b09      	ldr	r3, [pc, #36]	@ (8007420 <_dtoa_r+0x708>)
 80073fc:	f7f9 f86c 	bl	80004d8 <__aeabi_dmul>
 8007400:	2200      	movs	r2, #0
 8007402:	2300      	movs	r3, #0
 8007404:	4604      	mov	r4, r0
 8007406:	460d      	mov	r5, r1
 8007408:	f7f9 face 	bl	80009a8 <__aeabi_dcmpeq>
 800740c:	2800      	cmp	r0, #0
 800740e:	f43f aebc 	beq.w	800718a <_dtoa_r+0x472>
 8007412:	e6f1      	b.n	80071f8 <_dtoa_r+0x4e0>
 8007414:	08009898 	.word	0x08009898
 8007418:	3fe00000 	.word	0x3fe00000
 800741c:	3ff00000 	.word	0x3ff00000
 8007420:	40240000 	.word	0x40240000
 8007424:	40140000 	.word	0x40140000
 8007428:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800742a:	2a00      	cmp	r2, #0
 800742c:	f000 80db 	beq.w	80075e6 <_dtoa_r+0x8ce>
 8007430:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007432:	2a01      	cmp	r2, #1
 8007434:	f300 80bf 	bgt.w	80075b6 <_dtoa_r+0x89e>
 8007438:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800743a:	2a00      	cmp	r2, #0
 800743c:	f000 80b7 	beq.w	80075ae <_dtoa_r+0x896>
 8007440:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007444:	4646      	mov	r6, r8
 8007446:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007448:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800744a:	2101      	movs	r1, #1
 800744c:	441a      	add	r2, r3
 800744e:	4658      	mov	r0, fp
 8007450:	4498      	add	r8, r3
 8007452:	9209      	str	r2, [sp, #36]	@ 0x24
 8007454:	f000 fc1a 	bl	8007c8c <__i2b>
 8007458:	4605      	mov	r5, r0
 800745a:	b15e      	cbz	r6, 8007474 <_dtoa_r+0x75c>
 800745c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800745e:	2b00      	cmp	r3, #0
 8007460:	dd08      	ble.n	8007474 <_dtoa_r+0x75c>
 8007462:	42b3      	cmp	r3, r6
 8007464:	bfa8      	it	ge
 8007466:	4633      	movge	r3, r6
 8007468:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800746a:	eba8 0803 	sub.w	r8, r8, r3
 800746e:	1af6      	subs	r6, r6, r3
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	9309      	str	r3, [sp, #36]	@ 0x24
 8007474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007476:	b1f3      	cbz	r3, 80074b6 <_dtoa_r+0x79e>
 8007478:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 80b7 	beq.w	80075ee <_dtoa_r+0x8d6>
 8007480:	b18c      	cbz	r4, 80074a6 <_dtoa_r+0x78e>
 8007482:	4629      	mov	r1, r5
 8007484:	4622      	mov	r2, r4
 8007486:	4658      	mov	r0, fp
 8007488:	f000 fcbe 	bl	8007e08 <__pow5mult>
 800748c:	464a      	mov	r2, r9
 800748e:	4601      	mov	r1, r0
 8007490:	4605      	mov	r5, r0
 8007492:	4658      	mov	r0, fp
 8007494:	f000 fc10 	bl	8007cb8 <__multiply>
 8007498:	4649      	mov	r1, r9
 800749a:	9004      	str	r0, [sp, #16]
 800749c:	4658      	mov	r0, fp
 800749e:	f000 fb41 	bl	8007b24 <_Bfree>
 80074a2:	9b04      	ldr	r3, [sp, #16]
 80074a4:	4699      	mov	r9, r3
 80074a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074a8:	1b1a      	subs	r2, r3, r4
 80074aa:	d004      	beq.n	80074b6 <_dtoa_r+0x79e>
 80074ac:	4649      	mov	r1, r9
 80074ae:	4658      	mov	r0, fp
 80074b0:	f000 fcaa 	bl	8007e08 <__pow5mult>
 80074b4:	4681      	mov	r9, r0
 80074b6:	2101      	movs	r1, #1
 80074b8:	4658      	mov	r0, fp
 80074ba:	f000 fbe7 	bl	8007c8c <__i2b>
 80074be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074c0:	4604      	mov	r4, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 81c9 	beq.w	800785a <_dtoa_r+0xb42>
 80074c8:	461a      	mov	r2, r3
 80074ca:	4601      	mov	r1, r0
 80074cc:	4658      	mov	r0, fp
 80074ce:	f000 fc9b 	bl	8007e08 <__pow5mult>
 80074d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074d4:	4604      	mov	r4, r0
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	f300 808f 	bgt.w	80075fa <_dtoa_r+0x8e2>
 80074dc:	9b02      	ldr	r3, [sp, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f040 8087 	bne.w	80075f2 <_dtoa_r+0x8da>
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f040 8083 	bne.w	80075f6 <_dtoa_r+0x8de>
 80074f0:	9b03      	ldr	r3, [sp, #12]
 80074f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074f6:	0d1b      	lsrs	r3, r3, #20
 80074f8:	051b      	lsls	r3, r3, #20
 80074fa:	b12b      	cbz	r3, 8007508 <_dtoa_r+0x7f0>
 80074fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074fe:	f108 0801 	add.w	r8, r8, #1
 8007502:	3301      	adds	r3, #1
 8007504:	9309      	str	r3, [sp, #36]	@ 0x24
 8007506:	2301      	movs	r3, #1
 8007508:	930a      	str	r3, [sp, #40]	@ 0x28
 800750a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 81aa 	beq.w	8007866 <_dtoa_r+0xb4e>
 8007512:	6923      	ldr	r3, [r4, #16]
 8007514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007518:	6918      	ldr	r0, [r3, #16]
 800751a:	f000 fb6b 	bl	8007bf4 <__hi0bits>
 800751e:	f1c0 0020 	rsb	r0, r0, #32
 8007522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007524:	4418      	add	r0, r3
 8007526:	f010 001f 	ands.w	r0, r0, #31
 800752a:	d071      	beq.n	8007610 <_dtoa_r+0x8f8>
 800752c:	f1c0 0320 	rsb	r3, r0, #32
 8007530:	2b04      	cmp	r3, #4
 8007532:	dd65      	ble.n	8007600 <_dtoa_r+0x8e8>
 8007534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007536:	f1c0 001c 	rsb	r0, r0, #28
 800753a:	4403      	add	r3, r0
 800753c:	4480      	add	r8, r0
 800753e:	4406      	add	r6, r0
 8007540:	9309      	str	r3, [sp, #36]	@ 0x24
 8007542:	f1b8 0f00 	cmp.w	r8, #0
 8007546:	dd05      	ble.n	8007554 <_dtoa_r+0x83c>
 8007548:	4649      	mov	r1, r9
 800754a:	4642      	mov	r2, r8
 800754c:	4658      	mov	r0, fp
 800754e:	f000 fcb5 	bl	8007ebc <__lshift>
 8007552:	4681      	mov	r9, r0
 8007554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007556:	2b00      	cmp	r3, #0
 8007558:	dd05      	ble.n	8007566 <_dtoa_r+0x84e>
 800755a:	4621      	mov	r1, r4
 800755c:	461a      	mov	r2, r3
 800755e:	4658      	mov	r0, fp
 8007560:	f000 fcac 	bl	8007ebc <__lshift>
 8007564:	4604      	mov	r4, r0
 8007566:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007568:	2b00      	cmp	r3, #0
 800756a:	d053      	beq.n	8007614 <_dtoa_r+0x8fc>
 800756c:	4621      	mov	r1, r4
 800756e:	4648      	mov	r0, r9
 8007570:	f000 fd10 	bl	8007f94 <__mcmp>
 8007574:	2800      	cmp	r0, #0
 8007576:	da4d      	bge.n	8007614 <_dtoa_r+0x8fc>
 8007578:	1e7b      	subs	r3, r7, #1
 800757a:	4649      	mov	r1, r9
 800757c:	9304      	str	r3, [sp, #16]
 800757e:	220a      	movs	r2, #10
 8007580:	2300      	movs	r3, #0
 8007582:	4658      	mov	r0, fp
 8007584:	f000 faf0 	bl	8007b68 <__multadd>
 8007588:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800758a:	4681      	mov	r9, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 816c 	beq.w	800786a <_dtoa_r+0xb52>
 8007592:	2300      	movs	r3, #0
 8007594:	4629      	mov	r1, r5
 8007596:	220a      	movs	r2, #10
 8007598:	4658      	mov	r0, fp
 800759a:	f000 fae5 	bl	8007b68 <__multadd>
 800759e:	9b08      	ldr	r3, [sp, #32]
 80075a0:	4605      	mov	r5, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dc61      	bgt.n	800766a <_dtoa_r+0x952>
 80075a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	dc3b      	bgt.n	8007624 <_dtoa_r+0x90c>
 80075ac:	e05d      	b.n	800766a <_dtoa_r+0x952>
 80075ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80075b0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80075b4:	e746      	b.n	8007444 <_dtoa_r+0x72c>
 80075b6:	9b07      	ldr	r3, [sp, #28]
 80075b8:	1e5c      	subs	r4, r3, #1
 80075ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075bc:	42a3      	cmp	r3, r4
 80075be:	bfbf      	itttt	lt
 80075c0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80075c2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80075c4:	1ae3      	sublt	r3, r4, r3
 80075c6:	18d2      	addlt	r2, r2, r3
 80075c8:	bfa8      	it	ge
 80075ca:	1b1c      	subge	r4, r3, r4
 80075cc:	9b07      	ldr	r3, [sp, #28]
 80075ce:	bfbe      	ittt	lt
 80075d0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80075d2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80075d4:	2400      	movlt	r4, #0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bfb5      	itete	lt
 80075da:	eba8 0603 	sublt.w	r6, r8, r3
 80075de:	4646      	movge	r6, r8
 80075e0:	2300      	movlt	r3, #0
 80075e2:	9b07      	ldrge	r3, [sp, #28]
 80075e4:	e730      	b.n	8007448 <_dtoa_r+0x730>
 80075e6:	4646      	mov	r6, r8
 80075e8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80075ec:	e735      	b.n	800745a <_dtoa_r+0x742>
 80075ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075f0:	e75c      	b.n	80074ac <_dtoa_r+0x794>
 80075f2:	2300      	movs	r3, #0
 80075f4:	e788      	b.n	8007508 <_dtoa_r+0x7f0>
 80075f6:	9b02      	ldr	r3, [sp, #8]
 80075f8:	e786      	b.n	8007508 <_dtoa_r+0x7f0>
 80075fa:	2300      	movs	r3, #0
 80075fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80075fe:	e788      	b.n	8007512 <_dtoa_r+0x7fa>
 8007600:	d09f      	beq.n	8007542 <_dtoa_r+0x82a>
 8007602:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007604:	331c      	adds	r3, #28
 8007606:	441a      	add	r2, r3
 8007608:	4498      	add	r8, r3
 800760a:	441e      	add	r6, r3
 800760c:	9209      	str	r2, [sp, #36]	@ 0x24
 800760e:	e798      	b.n	8007542 <_dtoa_r+0x82a>
 8007610:	4603      	mov	r3, r0
 8007612:	e7f6      	b.n	8007602 <_dtoa_r+0x8ea>
 8007614:	9b07      	ldr	r3, [sp, #28]
 8007616:	9704      	str	r7, [sp, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	dc20      	bgt.n	800765e <_dtoa_r+0x946>
 800761c:	9308      	str	r3, [sp, #32]
 800761e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007620:	2b02      	cmp	r3, #2
 8007622:	dd1e      	ble.n	8007662 <_dtoa_r+0x94a>
 8007624:	9b08      	ldr	r3, [sp, #32]
 8007626:	2b00      	cmp	r3, #0
 8007628:	f47f aebc 	bne.w	80073a4 <_dtoa_r+0x68c>
 800762c:	4621      	mov	r1, r4
 800762e:	2205      	movs	r2, #5
 8007630:	4658      	mov	r0, fp
 8007632:	f000 fa99 	bl	8007b68 <__multadd>
 8007636:	4601      	mov	r1, r0
 8007638:	4604      	mov	r4, r0
 800763a:	4648      	mov	r0, r9
 800763c:	f000 fcaa 	bl	8007f94 <__mcmp>
 8007640:	2800      	cmp	r0, #0
 8007642:	f77f aeaf 	ble.w	80073a4 <_dtoa_r+0x68c>
 8007646:	2331      	movs	r3, #49	@ 0x31
 8007648:	4656      	mov	r6, sl
 800764a:	f806 3b01 	strb.w	r3, [r6], #1
 800764e:	9b04      	ldr	r3, [sp, #16]
 8007650:	3301      	adds	r3, #1
 8007652:	9304      	str	r3, [sp, #16]
 8007654:	e6aa      	b.n	80073ac <_dtoa_r+0x694>
 8007656:	9c07      	ldr	r4, [sp, #28]
 8007658:	9704      	str	r7, [sp, #16]
 800765a:	4625      	mov	r5, r4
 800765c:	e7f3      	b.n	8007646 <_dtoa_r+0x92e>
 800765e:	9b07      	ldr	r3, [sp, #28]
 8007660:	9308      	str	r3, [sp, #32]
 8007662:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 8104 	beq.w	8007872 <_dtoa_r+0xb5a>
 800766a:	2e00      	cmp	r6, #0
 800766c:	dd05      	ble.n	800767a <_dtoa_r+0x962>
 800766e:	4629      	mov	r1, r5
 8007670:	4632      	mov	r2, r6
 8007672:	4658      	mov	r0, fp
 8007674:	f000 fc22 	bl	8007ebc <__lshift>
 8007678:	4605      	mov	r5, r0
 800767a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800767c:	2b00      	cmp	r3, #0
 800767e:	d05a      	beq.n	8007736 <_dtoa_r+0xa1e>
 8007680:	4658      	mov	r0, fp
 8007682:	6869      	ldr	r1, [r5, #4]
 8007684:	f000 fa0e 	bl	8007aa4 <_Balloc>
 8007688:	4606      	mov	r6, r0
 800768a:	b928      	cbnz	r0, 8007698 <_dtoa_r+0x980>
 800768c:	4602      	mov	r2, r0
 800768e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007692:	4b83      	ldr	r3, [pc, #524]	@ (80078a0 <_dtoa_r+0xb88>)
 8007694:	f7ff bb54 	b.w	8006d40 <_dtoa_r+0x28>
 8007698:	692a      	ldr	r2, [r5, #16]
 800769a:	f105 010c 	add.w	r1, r5, #12
 800769e:	3202      	adds	r2, #2
 80076a0:	0092      	lsls	r2, r2, #2
 80076a2:	300c      	adds	r0, #12
 80076a4:	f7ff fa9f 	bl	8006be6 <memcpy>
 80076a8:	2201      	movs	r2, #1
 80076aa:	4631      	mov	r1, r6
 80076ac:	4658      	mov	r0, fp
 80076ae:	f000 fc05 	bl	8007ebc <__lshift>
 80076b2:	462f      	mov	r7, r5
 80076b4:	4605      	mov	r5, r0
 80076b6:	f10a 0301 	add.w	r3, sl, #1
 80076ba:	9307      	str	r3, [sp, #28]
 80076bc:	9b08      	ldr	r3, [sp, #32]
 80076be:	4453      	add	r3, sl
 80076c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076c2:	9b02      	ldr	r3, [sp, #8]
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80076ca:	9b07      	ldr	r3, [sp, #28]
 80076cc:	4621      	mov	r1, r4
 80076ce:	3b01      	subs	r3, #1
 80076d0:	4648      	mov	r0, r9
 80076d2:	9302      	str	r3, [sp, #8]
 80076d4:	f7ff fa95 	bl	8006c02 <quorem>
 80076d8:	4639      	mov	r1, r7
 80076da:	9008      	str	r0, [sp, #32]
 80076dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80076e0:	4648      	mov	r0, r9
 80076e2:	f000 fc57 	bl	8007f94 <__mcmp>
 80076e6:	462a      	mov	r2, r5
 80076e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80076ea:	4621      	mov	r1, r4
 80076ec:	4658      	mov	r0, fp
 80076ee:	f000 fc6d 	bl	8007fcc <__mdiff>
 80076f2:	68c2      	ldr	r2, [r0, #12]
 80076f4:	4606      	mov	r6, r0
 80076f6:	bb02      	cbnz	r2, 800773a <_dtoa_r+0xa22>
 80076f8:	4601      	mov	r1, r0
 80076fa:	4648      	mov	r0, r9
 80076fc:	f000 fc4a 	bl	8007f94 <__mcmp>
 8007700:	4602      	mov	r2, r0
 8007702:	4631      	mov	r1, r6
 8007704:	4658      	mov	r0, fp
 8007706:	920c      	str	r2, [sp, #48]	@ 0x30
 8007708:	f000 fa0c 	bl	8007b24 <_Bfree>
 800770c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800770e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007710:	9e07      	ldr	r6, [sp, #28]
 8007712:	ea43 0102 	orr.w	r1, r3, r2
 8007716:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007718:	4319      	orrs	r1, r3
 800771a:	d110      	bne.n	800773e <_dtoa_r+0xa26>
 800771c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007720:	d029      	beq.n	8007776 <_dtoa_r+0xa5e>
 8007722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007724:	2b00      	cmp	r3, #0
 8007726:	dd02      	ble.n	800772e <_dtoa_r+0xa16>
 8007728:	9b08      	ldr	r3, [sp, #32]
 800772a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	f883 8000 	strb.w	r8, [r3]
 8007734:	e63b      	b.n	80073ae <_dtoa_r+0x696>
 8007736:	4628      	mov	r0, r5
 8007738:	e7bb      	b.n	80076b2 <_dtoa_r+0x99a>
 800773a:	2201      	movs	r2, #1
 800773c:	e7e1      	b.n	8007702 <_dtoa_r+0x9ea>
 800773e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007740:	2b00      	cmp	r3, #0
 8007742:	db04      	blt.n	800774e <_dtoa_r+0xa36>
 8007744:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007746:	430b      	orrs	r3, r1
 8007748:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800774a:	430b      	orrs	r3, r1
 800774c:	d120      	bne.n	8007790 <_dtoa_r+0xa78>
 800774e:	2a00      	cmp	r2, #0
 8007750:	dded      	ble.n	800772e <_dtoa_r+0xa16>
 8007752:	4649      	mov	r1, r9
 8007754:	2201      	movs	r2, #1
 8007756:	4658      	mov	r0, fp
 8007758:	f000 fbb0 	bl	8007ebc <__lshift>
 800775c:	4621      	mov	r1, r4
 800775e:	4681      	mov	r9, r0
 8007760:	f000 fc18 	bl	8007f94 <__mcmp>
 8007764:	2800      	cmp	r0, #0
 8007766:	dc03      	bgt.n	8007770 <_dtoa_r+0xa58>
 8007768:	d1e1      	bne.n	800772e <_dtoa_r+0xa16>
 800776a:	f018 0f01 	tst.w	r8, #1
 800776e:	d0de      	beq.n	800772e <_dtoa_r+0xa16>
 8007770:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007774:	d1d8      	bne.n	8007728 <_dtoa_r+0xa10>
 8007776:	2339      	movs	r3, #57	@ 0x39
 8007778:	9a02      	ldr	r2, [sp, #8]
 800777a:	7013      	strb	r3, [r2, #0]
 800777c:	4633      	mov	r3, r6
 800777e:	461e      	mov	r6, r3
 8007780:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007784:	3b01      	subs	r3, #1
 8007786:	2a39      	cmp	r2, #57	@ 0x39
 8007788:	d052      	beq.n	8007830 <_dtoa_r+0xb18>
 800778a:	3201      	adds	r2, #1
 800778c:	701a      	strb	r2, [r3, #0]
 800778e:	e60e      	b.n	80073ae <_dtoa_r+0x696>
 8007790:	2a00      	cmp	r2, #0
 8007792:	dd07      	ble.n	80077a4 <_dtoa_r+0xa8c>
 8007794:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007798:	d0ed      	beq.n	8007776 <_dtoa_r+0xa5e>
 800779a:	9a02      	ldr	r2, [sp, #8]
 800779c:	f108 0301 	add.w	r3, r8, #1
 80077a0:	7013      	strb	r3, [r2, #0]
 80077a2:	e604      	b.n	80073ae <_dtoa_r+0x696>
 80077a4:	9b07      	ldr	r3, [sp, #28]
 80077a6:	9a07      	ldr	r2, [sp, #28]
 80077a8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80077ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d028      	beq.n	8007804 <_dtoa_r+0xaec>
 80077b2:	4649      	mov	r1, r9
 80077b4:	2300      	movs	r3, #0
 80077b6:	220a      	movs	r2, #10
 80077b8:	4658      	mov	r0, fp
 80077ba:	f000 f9d5 	bl	8007b68 <__multadd>
 80077be:	42af      	cmp	r7, r5
 80077c0:	4681      	mov	r9, r0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	f04f 020a 	mov.w	r2, #10
 80077ca:	4639      	mov	r1, r7
 80077cc:	4658      	mov	r0, fp
 80077ce:	d107      	bne.n	80077e0 <_dtoa_r+0xac8>
 80077d0:	f000 f9ca 	bl	8007b68 <__multadd>
 80077d4:	4607      	mov	r7, r0
 80077d6:	4605      	mov	r5, r0
 80077d8:	9b07      	ldr	r3, [sp, #28]
 80077da:	3301      	adds	r3, #1
 80077dc:	9307      	str	r3, [sp, #28]
 80077de:	e774      	b.n	80076ca <_dtoa_r+0x9b2>
 80077e0:	f000 f9c2 	bl	8007b68 <__multadd>
 80077e4:	4629      	mov	r1, r5
 80077e6:	4607      	mov	r7, r0
 80077e8:	2300      	movs	r3, #0
 80077ea:	220a      	movs	r2, #10
 80077ec:	4658      	mov	r0, fp
 80077ee:	f000 f9bb 	bl	8007b68 <__multadd>
 80077f2:	4605      	mov	r5, r0
 80077f4:	e7f0      	b.n	80077d8 <_dtoa_r+0xac0>
 80077f6:	9b08      	ldr	r3, [sp, #32]
 80077f8:	2700      	movs	r7, #0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bfcc      	ite	gt
 80077fe:	461e      	movgt	r6, r3
 8007800:	2601      	movle	r6, #1
 8007802:	4456      	add	r6, sl
 8007804:	4649      	mov	r1, r9
 8007806:	2201      	movs	r2, #1
 8007808:	4658      	mov	r0, fp
 800780a:	f000 fb57 	bl	8007ebc <__lshift>
 800780e:	4621      	mov	r1, r4
 8007810:	4681      	mov	r9, r0
 8007812:	f000 fbbf 	bl	8007f94 <__mcmp>
 8007816:	2800      	cmp	r0, #0
 8007818:	dcb0      	bgt.n	800777c <_dtoa_r+0xa64>
 800781a:	d102      	bne.n	8007822 <_dtoa_r+0xb0a>
 800781c:	f018 0f01 	tst.w	r8, #1
 8007820:	d1ac      	bne.n	800777c <_dtoa_r+0xa64>
 8007822:	4633      	mov	r3, r6
 8007824:	461e      	mov	r6, r3
 8007826:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800782a:	2a30      	cmp	r2, #48	@ 0x30
 800782c:	d0fa      	beq.n	8007824 <_dtoa_r+0xb0c>
 800782e:	e5be      	b.n	80073ae <_dtoa_r+0x696>
 8007830:	459a      	cmp	sl, r3
 8007832:	d1a4      	bne.n	800777e <_dtoa_r+0xa66>
 8007834:	9b04      	ldr	r3, [sp, #16]
 8007836:	3301      	adds	r3, #1
 8007838:	9304      	str	r3, [sp, #16]
 800783a:	2331      	movs	r3, #49	@ 0x31
 800783c:	f88a 3000 	strb.w	r3, [sl]
 8007840:	e5b5      	b.n	80073ae <_dtoa_r+0x696>
 8007842:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007844:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80078a4 <_dtoa_r+0xb8c>
 8007848:	b11b      	cbz	r3, 8007852 <_dtoa_r+0xb3a>
 800784a:	f10a 0308 	add.w	r3, sl, #8
 800784e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	4650      	mov	r0, sl
 8007854:	b017      	add	sp, #92	@ 0x5c
 8007856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800785c:	2b01      	cmp	r3, #1
 800785e:	f77f ae3d 	ble.w	80074dc <_dtoa_r+0x7c4>
 8007862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007864:	930a      	str	r3, [sp, #40]	@ 0x28
 8007866:	2001      	movs	r0, #1
 8007868:	e65b      	b.n	8007522 <_dtoa_r+0x80a>
 800786a:	9b08      	ldr	r3, [sp, #32]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f77f aed6 	ble.w	800761e <_dtoa_r+0x906>
 8007872:	4656      	mov	r6, sl
 8007874:	4621      	mov	r1, r4
 8007876:	4648      	mov	r0, r9
 8007878:	f7ff f9c3 	bl	8006c02 <quorem>
 800787c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007880:	9b08      	ldr	r3, [sp, #32]
 8007882:	f806 8b01 	strb.w	r8, [r6], #1
 8007886:	eba6 020a 	sub.w	r2, r6, sl
 800788a:	4293      	cmp	r3, r2
 800788c:	ddb3      	ble.n	80077f6 <_dtoa_r+0xade>
 800788e:	4649      	mov	r1, r9
 8007890:	2300      	movs	r3, #0
 8007892:	220a      	movs	r2, #10
 8007894:	4658      	mov	r0, fp
 8007896:	f000 f967 	bl	8007b68 <__multadd>
 800789a:	4681      	mov	r9, r0
 800789c:	e7ea      	b.n	8007874 <_dtoa_r+0xb5c>
 800789e:	bf00      	nop
 80078a0:	080097fa 	.word	0x080097fa
 80078a4:	0800977e 	.word	0x0800977e

080078a8 <_free_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4605      	mov	r5, r0
 80078ac:	2900      	cmp	r1, #0
 80078ae:	d040      	beq.n	8007932 <_free_r+0x8a>
 80078b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078b4:	1f0c      	subs	r4, r1, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	bfb8      	it	lt
 80078ba:	18e4      	addlt	r4, r4, r3
 80078bc:	f000 f8e6 	bl	8007a8c <__malloc_lock>
 80078c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007934 <_free_r+0x8c>)
 80078c2:	6813      	ldr	r3, [r2, #0]
 80078c4:	b933      	cbnz	r3, 80078d4 <_free_r+0x2c>
 80078c6:	6063      	str	r3, [r4, #4]
 80078c8:	6014      	str	r4, [r2, #0]
 80078ca:	4628      	mov	r0, r5
 80078cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d0:	f000 b8e2 	b.w	8007a98 <__malloc_unlock>
 80078d4:	42a3      	cmp	r3, r4
 80078d6:	d908      	bls.n	80078ea <_free_r+0x42>
 80078d8:	6820      	ldr	r0, [r4, #0]
 80078da:	1821      	adds	r1, r4, r0
 80078dc:	428b      	cmp	r3, r1
 80078de:	bf01      	itttt	eq
 80078e0:	6819      	ldreq	r1, [r3, #0]
 80078e2:	685b      	ldreq	r3, [r3, #4]
 80078e4:	1809      	addeq	r1, r1, r0
 80078e6:	6021      	streq	r1, [r4, #0]
 80078e8:	e7ed      	b.n	80078c6 <_free_r+0x1e>
 80078ea:	461a      	mov	r2, r3
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	b10b      	cbz	r3, 80078f4 <_free_r+0x4c>
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	d9fa      	bls.n	80078ea <_free_r+0x42>
 80078f4:	6811      	ldr	r1, [r2, #0]
 80078f6:	1850      	adds	r0, r2, r1
 80078f8:	42a0      	cmp	r0, r4
 80078fa:	d10b      	bne.n	8007914 <_free_r+0x6c>
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	4401      	add	r1, r0
 8007900:	1850      	adds	r0, r2, r1
 8007902:	4283      	cmp	r3, r0
 8007904:	6011      	str	r1, [r2, #0]
 8007906:	d1e0      	bne.n	80078ca <_free_r+0x22>
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	4408      	add	r0, r1
 800790e:	6010      	str	r0, [r2, #0]
 8007910:	6053      	str	r3, [r2, #4]
 8007912:	e7da      	b.n	80078ca <_free_r+0x22>
 8007914:	d902      	bls.n	800791c <_free_r+0x74>
 8007916:	230c      	movs	r3, #12
 8007918:	602b      	str	r3, [r5, #0]
 800791a:	e7d6      	b.n	80078ca <_free_r+0x22>
 800791c:	6820      	ldr	r0, [r4, #0]
 800791e:	1821      	adds	r1, r4, r0
 8007920:	428b      	cmp	r3, r1
 8007922:	bf01      	itttt	eq
 8007924:	6819      	ldreq	r1, [r3, #0]
 8007926:	685b      	ldreq	r3, [r3, #4]
 8007928:	1809      	addeq	r1, r1, r0
 800792a:	6021      	streq	r1, [r4, #0]
 800792c:	6063      	str	r3, [r4, #4]
 800792e:	6054      	str	r4, [r2, #4]
 8007930:	e7cb      	b.n	80078ca <_free_r+0x22>
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	20000a44 	.word	0x20000a44

08007938 <malloc>:
 8007938:	4b02      	ldr	r3, [pc, #8]	@ (8007944 <malloc+0xc>)
 800793a:	4601      	mov	r1, r0
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	f000 b825 	b.w	800798c <_malloc_r>
 8007942:	bf00      	nop
 8007944:	20000020 	.word	0x20000020

08007948 <sbrk_aligned>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4e0f      	ldr	r6, [pc, #60]	@ (8007988 <sbrk_aligned+0x40>)
 800794c:	460c      	mov	r4, r1
 800794e:	6831      	ldr	r1, [r6, #0]
 8007950:	4605      	mov	r5, r0
 8007952:	b911      	cbnz	r1, 800795a <sbrk_aligned+0x12>
 8007954:	f000 fe40 	bl	80085d8 <_sbrk_r>
 8007958:	6030      	str	r0, [r6, #0]
 800795a:	4621      	mov	r1, r4
 800795c:	4628      	mov	r0, r5
 800795e:	f000 fe3b 	bl	80085d8 <_sbrk_r>
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	d103      	bne.n	800796e <sbrk_aligned+0x26>
 8007966:	f04f 34ff 	mov.w	r4, #4294967295
 800796a:	4620      	mov	r0, r4
 800796c:	bd70      	pop	{r4, r5, r6, pc}
 800796e:	1cc4      	adds	r4, r0, #3
 8007970:	f024 0403 	bic.w	r4, r4, #3
 8007974:	42a0      	cmp	r0, r4
 8007976:	d0f8      	beq.n	800796a <sbrk_aligned+0x22>
 8007978:	1a21      	subs	r1, r4, r0
 800797a:	4628      	mov	r0, r5
 800797c:	f000 fe2c 	bl	80085d8 <_sbrk_r>
 8007980:	3001      	adds	r0, #1
 8007982:	d1f2      	bne.n	800796a <sbrk_aligned+0x22>
 8007984:	e7ef      	b.n	8007966 <sbrk_aligned+0x1e>
 8007986:	bf00      	nop
 8007988:	20000a40 	.word	0x20000a40

0800798c <_malloc_r>:
 800798c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007990:	1ccd      	adds	r5, r1, #3
 8007992:	f025 0503 	bic.w	r5, r5, #3
 8007996:	3508      	adds	r5, #8
 8007998:	2d0c      	cmp	r5, #12
 800799a:	bf38      	it	cc
 800799c:	250c      	movcc	r5, #12
 800799e:	2d00      	cmp	r5, #0
 80079a0:	4606      	mov	r6, r0
 80079a2:	db01      	blt.n	80079a8 <_malloc_r+0x1c>
 80079a4:	42a9      	cmp	r1, r5
 80079a6:	d904      	bls.n	80079b2 <_malloc_r+0x26>
 80079a8:	230c      	movs	r3, #12
 80079aa:	6033      	str	r3, [r6, #0]
 80079ac:	2000      	movs	r0, #0
 80079ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a88 <_malloc_r+0xfc>
 80079b6:	f000 f869 	bl	8007a8c <__malloc_lock>
 80079ba:	f8d8 3000 	ldr.w	r3, [r8]
 80079be:	461c      	mov	r4, r3
 80079c0:	bb44      	cbnz	r4, 8007a14 <_malloc_r+0x88>
 80079c2:	4629      	mov	r1, r5
 80079c4:	4630      	mov	r0, r6
 80079c6:	f7ff ffbf 	bl	8007948 <sbrk_aligned>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	4604      	mov	r4, r0
 80079ce:	d158      	bne.n	8007a82 <_malloc_r+0xf6>
 80079d0:	f8d8 4000 	ldr.w	r4, [r8]
 80079d4:	4627      	mov	r7, r4
 80079d6:	2f00      	cmp	r7, #0
 80079d8:	d143      	bne.n	8007a62 <_malloc_r+0xd6>
 80079da:	2c00      	cmp	r4, #0
 80079dc:	d04b      	beq.n	8007a76 <_malloc_r+0xea>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	4639      	mov	r1, r7
 80079e2:	4630      	mov	r0, r6
 80079e4:	eb04 0903 	add.w	r9, r4, r3
 80079e8:	f000 fdf6 	bl	80085d8 <_sbrk_r>
 80079ec:	4581      	cmp	r9, r0
 80079ee:	d142      	bne.n	8007a76 <_malloc_r+0xea>
 80079f0:	6821      	ldr	r1, [r4, #0]
 80079f2:	4630      	mov	r0, r6
 80079f4:	1a6d      	subs	r5, r5, r1
 80079f6:	4629      	mov	r1, r5
 80079f8:	f7ff ffa6 	bl	8007948 <sbrk_aligned>
 80079fc:	3001      	adds	r0, #1
 80079fe:	d03a      	beq.n	8007a76 <_malloc_r+0xea>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	442b      	add	r3, r5
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	f8d8 3000 	ldr.w	r3, [r8]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	bb62      	cbnz	r2, 8007a68 <_malloc_r+0xdc>
 8007a0e:	f8c8 7000 	str.w	r7, [r8]
 8007a12:	e00f      	b.n	8007a34 <_malloc_r+0xa8>
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	1b52      	subs	r2, r2, r5
 8007a18:	d420      	bmi.n	8007a5c <_malloc_r+0xd0>
 8007a1a:	2a0b      	cmp	r2, #11
 8007a1c:	d917      	bls.n	8007a4e <_malloc_r+0xc2>
 8007a1e:	1961      	adds	r1, r4, r5
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	6025      	str	r5, [r4, #0]
 8007a24:	bf18      	it	ne
 8007a26:	6059      	strne	r1, [r3, #4]
 8007a28:	6863      	ldr	r3, [r4, #4]
 8007a2a:	bf08      	it	eq
 8007a2c:	f8c8 1000 	streq.w	r1, [r8]
 8007a30:	5162      	str	r2, [r4, r5]
 8007a32:	604b      	str	r3, [r1, #4]
 8007a34:	4630      	mov	r0, r6
 8007a36:	f000 f82f 	bl	8007a98 <__malloc_unlock>
 8007a3a:	f104 000b 	add.w	r0, r4, #11
 8007a3e:	1d23      	adds	r3, r4, #4
 8007a40:	f020 0007 	bic.w	r0, r0, #7
 8007a44:	1ac2      	subs	r2, r0, r3
 8007a46:	bf1c      	itt	ne
 8007a48:	1a1b      	subne	r3, r3, r0
 8007a4a:	50a3      	strne	r3, [r4, r2]
 8007a4c:	e7af      	b.n	80079ae <_malloc_r+0x22>
 8007a4e:	6862      	ldr	r2, [r4, #4]
 8007a50:	42a3      	cmp	r3, r4
 8007a52:	bf0c      	ite	eq
 8007a54:	f8c8 2000 	streq.w	r2, [r8]
 8007a58:	605a      	strne	r2, [r3, #4]
 8007a5a:	e7eb      	b.n	8007a34 <_malloc_r+0xa8>
 8007a5c:	4623      	mov	r3, r4
 8007a5e:	6864      	ldr	r4, [r4, #4]
 8007a60:	e7ae      	b.n	80079c0 <_malloc_r+0x34>
 8007a62:	463c      	mov	r4, r7
 8007a64:	687f      	ldr	r7, [r7, #4]
 8007a66:	e7b6      	b.n	80079d6 <_malloc_r+0x4a>
 8007a68:	461a      	mov	r2, r3
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	42a3      	cmp	r3, r4
 8007a6e:	d1fb      	bne.n	8007a68 <_malloc_r+0xdc>
 8007a70:	2300      	movs	r3, #0
 8007a72:	6053      	str	r3, [r2, #4]
 8007a74:	e7de      	b.n	8007a34 <_malloc_r+0xa8>
 8007a76:	230c      	movs	r3, #12
 8007a78:	4630      	mov	r0, r6
 8007a7a:	6033      	str	r3, [r6, #0]
 8007a7c:	f000 f80c 	bl	8007a98 <__malloc_unlock>
 8007a80:	e794      	b.n	80079ac <_malloc_r+0x20>
 8007a82:	6005      	str	r5, [r0, #0]
 8007a84:	e7d6      	b.n	8007a34 <_malloc_r+0xa8>
 8007a86:	bf00      	nop
 8007a88:	20000a44 	.word	0x20000a44

08007a8c <__malloc_lock>:
 8007a8c:	4801      	ldr	r0, [pc, #4]	@ (8007a94 <__malloc_lock+0x8>)
 8007a8e:	f7ff b89a 	b.w	8006bc6 <__retarget_lock_acquire_recursive>
 8007a92:	bf00      	nop
 8007a94:	20000a3c 	.word	0x20000a3c

08007a98 <__malloc_unlock>:
 8007a98:	4801      	ldr	r0, [pc, #4]	@ (8007aa0 <__malloc_unlock+0x8>)
 8007a9a:	f7ff b895 	b.w	8006bc8 <__retarget_lock_release_recursive>
 8007a9e:	bf00      	nop
 8007aa0:	20000a3c 	.word	0x20000a3c

08007aa4 <_Balloc>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	69c6      	ldr	r6, [r0, #28]
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	460d      	mov	r5, r1
 8007aac:	b976      	cbnz	r6, 8007acc <_Balloc+0x28>
 8007aae:	2010      	movs	r0, #16
 8007ab0:	f7ff ff42 	bl	8007938 <malloc>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	61e0      	str	r0, [r4, #28]
 8007ab8:	b920      	cbnz	r0, 8007ac4 <_Balloc+0x20>
 8007aba:	216b      	movs	r1, #107	@ 0x6b
 8007abc:	4b17      	ldr	r3, [pc, #92]	@ (8007b1c <_Balloc+0x78>)
 8007abe:	4818      	ldr	r0, [pc, #96]	@ (8007b20 <_Balloc+0x7c>)
 8007ac0:	f000 fd9a 	bl	80085f8 <__assert_func>
 8007ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ac8:	6006      	str	r6, [r0, #0]
 8007aca:	60c6      	str	r6, [r0, #12]
 8007acc:	69e6      	ldr	r6, [r4, #28]
 8007ace:	68f3      	ldr	r3, [r6, #12]
 8007ad0:	b183      	cbz	r3, 8007af4 <_Balloc+0x50>
 8007ad2:	69e3      	ldr	r3, [r4, #28]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ada:	b9b8      	cbnz	r0, 8007b0c <_Balloc+0x68>
 8007adc:	2101      	movs	r1, #1
 8007ade:	fa01 f605 	lsl.w	r6, r1, r5
 8007ae2:	1d72      	adds	r2, r6, #5
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	0092      	lsls	r2, r2, #2
 8007ae8:	f000 fda4 	bl	8008634 <_calloc_r>
 8007aec:	b160      	cbz	r0, 8007b08 <_Balloc+0x64>
 8007aee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007af2:	e00e      	b.n	8007b12 <_Balloc+0x6e>
 8007af4:	2221      	movs	r2, #33	@ 0x21
 8007af6:	2104      	movs	r1, #4
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 fd9b 	bl	8008634 <_calloc_r>
 8007afe:	69e3      	ldr	r3, [r4, #28]
 8007b00:	60f0      	str	r0, [r6, #12]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e4      	bne.n	8007ad2 <_Balloc+0x2e>
 8007b08:	2000      	movs	r0, #0
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	6802      	ldr	r2, [r0, #0]
 8007b0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b12:	2300      	movs	r3, #0
 8007b14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b18:	e7f7      	b.n	8007b0a <_Balloc+0x66>
 8007b1a:	bf00      	nop
 8007b1c:	0800978b 	.word	0x0800978b
 8007b20:	0800980b 	.word	0x0800980b

08007b24 <_Bfree>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	69c6      	ldr	r6, [r0, #28]
 8007b28:	4605      	mov	r5, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	b976      	cbnz	r6, 8007b4c <_Bfree+0x28>
 8007b2e:	2010      	movs	r0, #16
 8007b30:	f7ff ff02 	bl	8007938 <malloc>
 8007b34:	4602      	mov	r2, r0
 8007b36:	61e8      	str	r0, [r5, #28]
 8007b38:	b920      	cbnz	r0, 8007b44 <_Bfree+0x20>
 8007b3a:	218f      	movs	r1, #143	@ 0x8f
 8007b3c:	4b08      	ldr	r3, [pc, #32]	@ (8007b60 <_Bfree+0x3c>)
 8007b3e:	4809      	ldr	r0, [pc, #36]	@ (8007b64 <_Bfree+0x40>)
 8007b40:	f000 fd5a 	bl	80085f8 <__assert_func>
 8007b44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b48:	6006      	str	r6, [r0, #0]
 8007b4a:	60c6      	str	r6, [r0, #12]
 8007b4c:	b13c      	cbz	r4, 8007b5e <_Bfree+0x3a>
 8007b4e:	69eb      	ldr	r3, [r5, #28]
 8007b50:	6862      	ldr	r2, [r4, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b58:	6021      	str	r1, [r4, #0]
 8007b5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b5e:	bd70      	pop	{r4, r5, r6, pc}
 8007b60:	0800978b 	.word	0x0800978b
 8007b64:	0800980b 	.word	0x0800980b

08007b68 <__multadd>:
 8007b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6c:	4607      	mov	r7, r0
 8007b6e:	460c      	mov	r4, r1
 8007b70:	461e      	mov	r6, r3
 8007b72:	2000      	movs	r0, #0
 8007b74:	690d      	ldr	r5, [r1, #16]
 8007b76:	f101 0c14 	add.w	ip, r1, #20
 8007b7a:	f8dc 3000 	ldr.w	r3, [ip]
 8007b7e:	3001      	adds	r0, #1
 8007b80:	b299      	uxth	r1, r3
 8007b82:	fb02 6101 	mla	r1, r2, r1, r6
 8007b86:	0c1e      	lsrs	r6, r3, #16
 8007b88:	0c0b      	lsrs	r3, r1, #16
 8007b8a:	fb02 3306 	mla	r3, r2, r6, r3
 8007b8e:	b289      	uxth	r1, r1
 8007b90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b94:	4285      	cmp	r5, r0
 8007b96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b9a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b9e:	dcec      	bgt.n	8007b7a <__multadd+0x12>
 8007ba0:	b30e      	cbz	r6, 8007be6 <__multadd+0x7e>
 8007ba2:	68a3      	ldr	r3, [r4, #8]
 8007ba4:	42ab      	cmp	r3, r5
 8007ba6:	dc19      	bgt.n	8007bdc <__multadd+0x74>
 8007ba8:	6861      	ldr	r1, [r4, #4]
 8007baa:	4638      	mov	r0, r7
 8007bac:	3101      	adds	r1, #1
 8007bae:	f7ff ff79 	bl	8007aa4 <_Balloc>
 8007bb2:	4680      	mov	r8, r0
 8007bb4:	b928      	cbnz	r0, 8007bc2 <__multadd+0x5a>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	21ba      	movs	r1, #186	@ 0xba
 8007bba:	4b0c      	ldr	r3, [pc, #48]	@ (8007bec <__multadd+0x84>)
 8007bbc:	480c      	ldr	r0, [pc, #48]	@ (8007bf0 <__multadd+0x88>)
 8007bbe:	f000 fd1b 	bl	80085f8 <__assert_func>
 8007bc2:	6922      	ldr	r2, [r4, #16]
 8007bc4:	f104 010c 	add.w	r1, r4, #12
 8007bc8:	3202      	adds	r2, #2
 8007bca:	0092      	lsls	r2, r2, #2
 8007bcc:	300c      	adds	r0, #12
 8007bce:	f7ff f80a 	bl	8006be6 <memcpy>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	f7ff ffa5 	bl	8007b24 <_Bfree>
 8007bda:	4644      	mov	r4, r8
 8007bdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007be0:	3501      	adds	r5, #1
 8007be2:	615e      	str	r6, [r3, #20]
 8007be4:	6125      	str	r5, [r4, #16]
 8007be6:	4620      	mov	r0, r4
 8007be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bec:	080097fa 	.word	0x080097fa
 8007bf0:	0800980b 	.word	0x0800980b

08007bf4 <__hi0bits>:
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007bfa:	bf3a      	itte	cc
 8007bfc:	0403      	lslcc	r3, r0, #16
 8007bfe:	2010      	movcc	r0, #16
 8007c00:	2000      	movcs	r0, #0
 8007c02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c06:	bf3c      	itt	cc
 8007c08:	021b      	lslcc	r3, r3, #8
 8007c0a:	3008      	addcc	r0, #8
 8007c0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c10:	bf3c      	itt	cc
 8007c12:	011b      	lslcc	r3, r3, #4
 8007c14:	3004      	addcc	r0, #4
 8007c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c1a:	bf3c      	itt	cc
 8007c1c:	009b      	lslcc	r3, r3, #2
 8007c1e:	3002      	addcc	r0, #2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	db05      	blt.n	8007c30 <__hi0bits+0x3c>
 8007c24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c28:	f100 0001 	add.w	r0, r0, #1
 8007c2c:	bf08      	it	eq
 8007c2e:	2020      	moveq	r0, #32
 8007c30:	4770      	bx	lr

08007c32 <__lo0bits>:
 8007c32:	6803      	ldr	r3, [r0, #0]
 8007c34:	4602      	mov	r2, r0
 8007c36:	f013 0007 	ands.w	r0, r3, #7
 8007c3a:	d00b      	beq.n	8007c54 <__lo0bits+0x22>
 8007c3c:	07d9      	lsls	r1, r3, #31
 8007c3e:	d421      	bmi.n	8007c84 <__lo0bits+0x52>
 8007c40:	0798      	lsls	r0, r3, #30
 8007c42:	bf49      	itett	mi
 8007c44:	085b      	lsrmi	r3, r3, #1
 8007c46:	089b      	lsrpl	r3, r3, #2
 8007c48:	2001      	movmi	r0, #1
 8007c4a:	6013      	strmi	r3, [r2, #0]
 8007c4c:	bf5c      	itt	pl
 8007c4e:	2002      	movpl	r0, #2
 8007c50:	6013      	strpl	r3, [r2, #0]
 8007c52:	4770      	bx	lr
 8007c54:	b299      	uxth	r1, r3
 8007c56:	b909      	cbnz	r1, 8007c5c <__lo0bits+0x2a>
 8007c58:	2010      	movs	r0, #16
 8007c5a:	0c1b      	lsrs	r3, r3, #16
 8007c5c:	b2d9      	uxtb	r1, r3
 8007c5e:	b909      	cbnz	r1, 8007c64 <__lo0bits+0x32>
 8007c60:	3008      	adds	r0, #8
 8007c62:	0a1b      	lsrs	r3, r3, #8
 8007c64:	0719      	lsls	r1, r3, #28
 8007c66:	bf04      	itt	eq
 8007c68:	091b      	lsreq	r3, r3, #4
 8007c6a:	3004      	addeq	r0, #4
 8007c6c:	0799      	lsls	r1, r3, #30
 8007c6e:	bf04      	itt	eq
 8007c70:	089b      	lsreq	r3, r3, #2
 8007c72:	3002      	addeq	r0, #2
 8007c74:	07d9      	lsls	r1, r3, #31
 8007c76:	d403      	bmi.n	8007c80 <__lo0bits+0x4e>
 8007c78:	085b      	lsrs	r3, r3, #1
 8007c7a:	f100 0001 	add.w	r0, r0, #1
 8007c7e:	d003      	beq.n	8007c88 <__lo0bits+0x56>
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	4770      	bx	lr
 8007c84:	2000      	movs	r0, #0
 8007c86:	4770      	bx	lr
 8007c88:	2020      	movs	r0, #32
 8007c8a:	4770      	bx	lr

08007c8c <__i2b>:
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	460c      	mov	r4, r1
 8007c90:	2101      	movs	r1, #1
 8007c92:	f7ff ff07 	bl	8007aa4 <_Balloc>
 8007c96:	4602      	mov	r2, r0
 8007c98:	b928      	cbnz	r0, 8007ca6 <__i2b+0x1a>
 8007c9a:	f240 1145 	movw	r1, #325	@ 0x145
 8007c9e:	4b04      	ldr	r3, [pc, #16]	@ (8007cb0 <__i2b+0x24>)
 8007ca0:	4804      	ldr	r0, [pc, #16]	@ (8007cb4 <__i2b+0x28>)
 8007ca2:	f000 fca9 	bl	80085f8 <__assert_func>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	6144      	str	r4, [r0, #20]
 8007caa:	6103      	str	r3, [r0, #16]
 8007cac:	bd10      	pop	{r4, pc}
 8007cae:	bf00      	nop
 8007cb0:	080097fa 	.word	0x080097fa
 8007cb4:	0800980b 	.word	0x0800980b

08007cb8 <__multiply>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	690a      	ldr	r2, [r1, #16]
 8007cc0:	6923      	ldr	r3, [r4, #16]
 8007cc2:	460f      	mov	r7, r1
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	bfa2      	ittt	ge
 8007cc8:	4623      	movge	r3, r4
 8007cca:	460c      	movge	r4, r1
 8007ccc:	461f      	movge	r7, r3
 8007cce:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007cd2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007cd6:	68a3      	ldr	r3, [r4, #8]
 8007cd8:	6861      	ldr	r1, [r4, #4]
 8007cda:	eb0a 0609 	add.w	r6, sl, r9
 8007cde:	42b3      	cmp	r3, r6
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	bfb8      	it	lt
 8007ce4:	3101      	addlt	r1, #1
 8007ce6:	f7ff fedd 	bl	8007aa4 <_Balloc>
 8007cea:	b930      	cbnz	r0, 8007cfa <__multiply+0x42>
 8007cec:	4602      	mov	r2, r0
 8007cee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007cf2:	4b43      	ldr	r3, [pc, #268]	@ (8007e00 <__multiply+0x148>)
 8007cf4:	4843      	ldr	r0, [pc, #268]	@ (8007e04 <__multiply+0x14c>)
 8007cf6:	f000 fc7f 	bl	80085f8 <__assert_func>
 8007cfa:	f100 0514 	add.w	r5, r0, #20
 8007cfe:	462b      	mov	r3, r5
 8007d00:	2200      	movs	r2, #0
 8007d02:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d06:	4543      	cmp	r3, r8
 8007d08:	d321      	bcc.n	8007d4e <__multiply+0x96>
 8007d0a:	f107 0114 	add.w	r1, r7, #20
 8007d0e:	f104 0214 	add.w	r2, r4, #20
 8007d12:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d16:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d1a:	9302      	str	r3, [sp, #8]
 8007d1c:	1b13      	subs	r3, r2, r4
 8007d1e:	3b15      	subs	r3, #21
 8007d20:	f023 0303 	bic.w	r3, r3, #3
 8007d24:	3304      	adds	r3, #4
 8007d26:	f104 0715 	add.w	r7, r4, #21
 8007d2a:	42ba      	cmp	r2, r7
 8007d2c:	bf38      	it	cc
 8007d2e:	2304      	movcc	r3, #4
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	9b02      	ldr	r3, [sp, #8]
 8007d34:	9103      	str	r1, [sp, #12]
 8007d36:	428b      	cmp	r3, r1
 8007d38:	d80c      	bhi.n	8007d54 <__multiply+0x9c>
 8007d3a:	2e00      	cmp	r6, #0
 8007d3c:	dd03      	ble.n	8007d46 <__multiply+0x8e>
 8007d3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d05a      	beq.n	8007dfc <__multiply+0x144>
 8007d46:	6106      	str	r6, [r0, #16]
 8007d48:	b005      	add	sp, #20
 8007d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4e:	f843 2b04 	str.w	r2, [r3], #4
 8007d52:	e7d8      	b.n	8007d06 <__multiply+0x4e>
 8007d54:	f8b1 a000 	ldrh.w	sl, [r1]
 8007d58:	f1ba 0f00 	cmp.w	sl, #0
 8007d5c:	d023      	beq.n	8007da6 <__multiply+0xee>
 8007d5e:	46a9      	mov	r9, r5
 8007d60:	f04f 0c00 	mov.w	ip, #0
 8007d64:	f104 0e14 	add.w	lr, r4, #20
 8007d68:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d6c:	f8d9 3000 	ldr.w	r3, [r9]
 8007d70:	fa1f fb87 	uxth.w	fp, r7
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d7a:	4463      	add	r3, ip
 8007d7c:	f8d9 c000 	ldr.w	ip, [r9]
 8007d80:	0c3f      	lsrs	r7, r7, #16
 8007d82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007d86:	fb0a c707 	mla	r7, sl, r7, ip
 8007d8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d94:	4572      	cmp	r2, lr
 8007d96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d9a:	f849 3b04 	str.w	r3, [r9], #4
 8007d9e:	d8e3      	bhi.n	8007d68 <__multiply+0xb0>
 8007da0:	9b01      	ldr	r3, [sp, #4]
 8007da2:	f845 c003 	str.w	ip, [r5, r3]
 8007da6:	9b03      	ldr	r3, [sp, #12]
 8007da8:	3104      	adds	r1, #4
 8007daa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007dae:	f1b9 0f00 	cmp.w	r9, #0
 8007db2:	d021      	beq.n	8007df8 <__multiply+0x140>
 8007db4:	46ae      	mov	lr, r5
 8007db6:	f04f 0a00 	mov.w	sl, #0
 8007dba:	682b      	ldr	r3, [r5, #0]
 8007dbc:	f104 0c14 	add.w	ip, r4, #20
 8007dc0:	f8bc b000 	ldrh.w	fp, [ip]
 8007dc4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	fb09 770b 	mla	r7, r9, fp, r7
 8007dce:	4457      	add	r7, sl
 8007dd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007dd4:	f84e 3b04 	str.w	r3, [lr], #4
 8007dd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ddc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007de0:	f8be 3000 	ldrh.w	r3, [lr]
 8007de4:	4562      	cmp	r2, ip
 8007de6:	fb09 330a 	mla	r3, r9, sl, r3
 8007dea:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007dee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007df2:	d8e5      	bhi.n	8007dc0 <__multiply+0x108>
 8007df4:	9f01      	ldr	r7, [sp, #4]
 8007df6:	51eb      	str	r3, [r5, r7]
 8007df8:	3504      	adds	r5, #4
 8007dfa:	e79a      	b.n	8007d32 <__multiply+0x7a>
 8007dfc:	3e01      	subs	r6, #1
 8007dfe:	e79c      	b.n	8007d3a <__multiply+0x82>
 8007e00:	080097fa 	.word	0x080097fa
 8007e04:	0800980b 	.word	0x0800980b

08007e08 <__pow5mult>:
 8007e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e0c:	4615      	mov	r5, r2
 8007e0e:	f012 0203 	ands.w	r2, r2, #3
 8007e12:	4607      	mov	r7, r0
 8007e14:	460e      	mov	r6, r1
 8007e16:	d007      	beq.n	8007e28 <__pow5mult+0x20>
 8007e18:	4c25      	ldr	r4, [pc, #148]	@ (8007eb0 <__pow5mult+0xa8>)
 8007e1a:	3a01      	subs	r2, #1
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e22:	f7ff fea1 	bl	8007b68 <__multadd>
 8007e26:	4606      	mov	r6, r0
 8007e28:	10ad      	asrs	r5, r5, #2
 8007e2a:	d03d      	beq.n	8007ea8 <__pow5mult+0xa0>
 8007e2c:	69fc      	ldr	r4, [r7, #28]
 8007e2e:	b97c      	cbnz	r4, 8007e50 <__pow5mult+0x48>
 8007e30:	2010      	movs	r0, #16
 8007e32:	f7ff fd81 	bl	8007938 <malloc>
 8007e36:	4602      	mov	r2, r0
 8007e38:	61f8      	str	r0, [r7, #28]
 8007e3a:	b928      	cbnz	r0, 8007e48 <__pow5mult+0x40>
 8007e3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e40:	4b1c      	ldr	r3, [pc, #112]	@ (8007eb4 <__pow5mult+0xac>)
 8007e42:	481d      	ldr	r0, [pc, #116]	@ (8007eb8 <__pow5mult+0xb0>)
 8007e44:	f000 fbd8 	bl	80085f8 <__assert_func>
 8007e48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e4c:	6004      	str	r4, [r0, #0]
 8007e4e:	60c4      	str	r4, [r0, #12]
 8007e50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007e54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e58:	b94c      	cbnz	r4, 8007e6e <__pow5mult+0x66>
 8007e5a:	f240 2171 	movw	r1, #625	@ 0x271
 8007e5e:	4638      	mov	r0, r7
 8007e60:	f7ff ff14 	bl	8007c8c <__i2b>
 8007e64:	2300      	movs	r3, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e6c:	6003      	str	r3, [r0, #0]
 8007e6e:	f04f 0900 	mov.w	r9, #0
 8007e72:	07eb      	lsls	r3, r5, #31
 8007e74:	d50a      	bpl.n	8007e8c <__pow5mult+0x84>
 8007e76:	4631      	mov	r1, r6
 8007e78:	4622      	mov	r2, r4
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	f7ff ff1c 	bl	8007cb8 <__multiply>
 8007e80:	4680      	mov	r8, r0
 8007e82:	4631      	mov	r1, r6
 8007e84:	4638      	mov	r0, r7
 8007e86:	f7ff fe4d 	bl	8007b24 <_Bfree>
 8007e8a:	4646      	mov	r6, r8
 8007e8c:	106d      	asrs	r5, r5, #1
 8007e8e:	d00b      	beq.n	8007ea8 <__pow5mult+0xa0>
 8007e90:	6820      	ldr	r0, [r4, #0]
 8007e92:	b938      	cbnz	r0, 8007ea4 <__pow5mult+0x9c>
 8007e94:	4622      	mov	r2, r4
 8007e96:	4621      	mov	r1, r4
 8007e98:	4638      	mov	r0, r7
 8007e9a:	f7ff ff0d 	bl	8007cb8 <__multiply>
 8007e9e:	6020      	str	r0, [r4, #0]
 8007ea0:	f8c0 9000 	str.w	r9, [r0]
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	e7e4      	b.n	8007e72 <__pow5mult+0x6a>
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eae:	bf00      	nop
 8007eb0:	08009864 	.word	0x08009864
 8007eb4:	0800978b 	.word	0x0800978b
 8007eb8:	0800980b 	.word	0x0800980b

08007ebc <__lshift>:
 8007ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	4607      	mov	r7, r0
 8007ec4:	4691      	mov	r9, r2
 8007ec6:	6923      	ldr	r3, [r4, #16]
 8007ec8:	6849      	ldr	r1, [r1, #4]
 8007eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ece:	68a3      	ldr	r3, [r4, #8]
 8007ed0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ed4:	f108 0601 	add.w	r6, r8, #1
 8007ed8:	42b3      	cmp	r3, r6
 8007eda:	db0b      	blt.n	8007ef4 <__lshift+0x38>
 8007edc:	4638      	mov	r0, r7
 8007ede:	f7ff fde1 	bl	8007aa4 <_Balloc>
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	b948      	cbnz	r0, 8007efa <__lshift+0x3e>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007eec:	4b27      	ldr	r3, [pc, #156]	@ (8007f8c <__lshift+0xd0>)
 8007eee:	4828      	ldr	r0, [pc, #160]	@ (8007f90 <__lshift+0xd4>)
 8007ef0:	f000 fb82 	bl	80085f8 <__assert_func>
 8007ef4:	3101      	adds	r1, #1
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	e7ee      	b.n	8007ed8 <__lshift+0x1c>
 8007efa:	2300      	movs	r3, #0
 8007efc:	f100 0114 	add.w	r1, r0, #20
 8007f00:	f100 0210 	add.w	r2, r0, #16
 8007f04:	4618      	mov	r0, r3
 8007f06:	4553      	cmp	r3, sl
 8007f08:	db33      	blt.n	8007f72 <__lshift+0xb6>
 8007f0a:	6920      	ldr	r0, [r4, #16]
 8007f0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f10:	f104 0314 	add.w	r3, r4, #20
 8007f14:	f019 091f 	ands.w	r9, r9, #31
 8007f18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f20:	d02b      	beq.n	8007f7a <__lshift+0xbe>
 8007f22:	468a      	mov	sl, r1
 8007f24:	2200      	movs	r2, #0
 8007f26:	f1c9 0e20 	rsb	lr, r9, #32
 8007f2a:	6818      	ldr	r0, [r3, #0]
 8007f2c:	fa00 f009 	lsl.w	r0, r0, r9
 8007f30:	4310      	orrs	r0, r2
 8007f32:	f84a 0b04 	str.w	r0, [sl], #4
 8007f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f3a:	459c      	cmp	ip, r3
 8007f3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f40:	d8f3      	bhi.n	8007f2a <__lshift+0x6e>
 8007f42:	ebac 0304 	sub.w	r3, ip, r4
 8007f46:	3b15      	subs	r3, #21
 8007f48:	f023 0303 	bic.w	r3, r3, #3
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	f104 0015 	add.w	r0, r4, #21
 8007f52:	4584      	cmp	ip, r0
 8007f54:	bf38      	it	cc
 8007f56:	2304      	movcc	r3, #4
 8007f58:	50ca      	str	r2, [r1, r3]
 8007f5a:	b10a      	cbz	r2, 8007f60 <__lshift+0xa4>
 8007f5c:	f108 0602 	add.w	r6, r8, #2
 8007f60:	3e01      	subs	r6, #1
 8007f62:	4638      	mov	r0, r7
 8007f64:	4621      	mov	r1, r4
 8007f66:	612e      	str	r6, [r5, #16]
 8007f68:	f7ff fddc 	bl	8007b24 <_Bfree>
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f72:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f76:	3301      	adds	r3, #1
 8007f78:	e7c5      	b.n	8007f06 <__lshift+0x4a>
 8007f7a:	3904      	subs	r1, #4
 8007f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f80:	459c      	cmp	ip, r3
 8007f82:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f86:	d8f9      	bhi.n	8007f7c <__lshift+0xc0>
 8007f88:	e7ea      	b.n	8007f60 <__lshift+0xa4>
 8007f8a:	bf00      	nop
 8007f8c:	080097fa 	.word	0x080097fa
 8007f90:	0800980b 	.word	0x0800980b

08007f94 <__mcmp>:
 8007f94:	4603      	mov	r3, r0
 8007f96:	690a      	ldr	r2, [r1, #16]
 8007f98:	6900      	ldr	r0, [r0, #16]
 8007f9a:	b530      	push	{r4, r5, lr}
 8007f9c:	1a80      	subs	r0, r0, r2
 8007f9e:	d10e      	bne.n	8007fbe <__mcmp+0x2a>
 8007fa0:	3314      	adds	r3, #20
 8007fa2:	3114      	adds	r1, #20
 8007fa4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007fa8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007fac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fb4:	4295      	cmp	r5, r2
 8007fb6:	d003      	beq.n	8007fc0 <__mcmp+0x2c>
 8007fb8:	d205      	bcs.n	8007fc6 <__mcmp+0x32>
 8007fba:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbe:	bd30      	pop	{r4, r5, pc}
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	d3f3      	bcc.n	8007fac <__mcmp+0x18>
 8007fc4:	e7fb      	b.n	8007fbe <__mcmp+0x2a>
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	e7f9      	b.n	8007fbe <__mcmp+0x2a>
	...

08007fcc <__mdiff>:
 8007fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	4689      	mov	r9, r1
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4648      	mov	r0, r9
 8007fd8:	4614      	mov	r4, r2
 8007fda:	f7ff ffdb 	bl	8007f94 <__mcmp>
 8007fde:	1e05      	subs	r5, r0, #0
 8007fe0:	d112      	bne.n	8008008 <__mdiff+0x3c>
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7ff fd5d 	bl	8007aa4 <_Balloc>
 8007fea:	4602      	mov	r2, r0
 8007fec:	b928      	cbnz	r0, 8007ffa <__mdiff+0x2e>
 8007fee:	f240 2137 	movw	r1, #567	@ 0x237
 8007ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80080ec <__mdiff+0x120>)
 8007ff4:	483e      	ldr	r0, [pc, #248]	@ (80080f0 <__mdiff+0x124>)
 8007ff6:	f000 faff 	bl	80085f8 <__assert_func>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008000:	4610      	mov	r0, r2
 8008002:	b003      	add	sp, #12
 8008004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008008:	bfbc      	itt	lt
 800800a:	464b      	movlt	r3, r9
 800800c:	46a1      	movlt	r9, r4
 800800e:	4630      	mov	r0, r6
 8008010:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008014:	bfba      	itte	lt
 8008016:	461c      	movlt	r4, r3
 8008018:	2501      	movlt	r5, #1
 800801a:	2500      	movge	r5, #0
 800801c:	f7ff fd42 	bl	8007aa4 <_Balloc>
 8008020:	4602      	mov	r2, r0
 8008022:	b918      	cbnz	r0, 800802c <__mdiff+0x60>
 8008024:	f240 2145 	movw	r1, #581	@ 0x245
 8008028:	4b30      	ldr	r3, [pc, #192]	@ (80080ec <__mdiff+0x120>)
 800802a:	e7e3      	b.n	8007ff4 <__mdiff+0x28>
 800802c:	f100 0b14 	add.w	fp, r0, #20
 8008030:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008034:	f109 0310 	add.w	r3, r9, #16
 8008038:	60c5      	str	r5, [r0, #12]
 800803a:	f04f 0c00 	mov.w	ip, #0
 800803e:	f109 0514 	add.w	r5, r9, #20
 8008042:	46d9      	mov	r9, fp
 8008044:	6926      	ldr	r6, [r4, #16]
 8008046:	f104 0e14 	add.w	lr, r4, #20
 800804a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800804e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008052:	9301      	str	r3, [sp, #4]
 8008054:	9b01      	ldr	r3, [sp, #4]
 8008056:	f85e 0b04 	ldr.w	r0, [lr], #4
 800805a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800805e:	b281      	uxth	r1, r0
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	fa1f f38a 	uxth.w	r3, sl
 8008066:	1a5b      	subs	r3, r3, r1
 8008068:	0c00      	lsrs	r0, r0, #16
 800806a:	4463      	add	r3, ip
 800806c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008070:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008074:	b29b      	uxth	r3, r3
 8008076:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800807a:	4576      	cmp	r6, lr
 800807c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008080:	f849 3b04 	str.w	r3, [r9], #4
 8008084:	d8e6      	bhi.n	8008054 <__mdiff+0x88>
 8008086:	1b33      	subs	r3, r6, r4
 8008088:	3b15      	subs	r3, #21
 800808a:	f023 0303 	bic.w	r3, r3, #3
 800808e:	3415      	adds	r4, #21
 8008090:	3304      	adds	r3, #4
 8008092:	42a6      	cmp	r6, r4
 8008094:	bf38      	it	cc
 8008096:	2304      	movcc	r3, #4
 8008098:	441d      	add	r5, r3
 800809a:	445b      	add	r3, fp
 800809c:	461e      	mov	r6, r3
 800809e:	462c      	mov	r4, r5
 80080a0:	4544      	cmp	r4, r8
 80080a2:	d30e      	bcc.n	80080c2 <__mdiff+0xf6>
 80080a4:	f108 0103 	add.w	r1, r8, #3
 80080a8:	1b49      	subs	r1, r1, r5
 80080aa:	f021 0103 	bic.w	r1, r1, #3
 80080ae:	3d03      	subs	r5, #3
 80080b0:	45a8      	cmp	r8, r5
 80080b2:	bf38      	it	cc
 80080b4:	2100      	movcc	r1, #0
 80080b6:	440b      	add	r3, r1
 80080b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080bc:	b199      	cbz	r1, 80080e6 <__mdiff+0x11a>
 80080be:	6117      	str	r7, [r2, #16]
 80080c0:	e79e      	b.n	8008000 <__mdiff+0x34>
 80080c2:	46e6      	mov	lr, ip
 80080c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80080c8:	fa1f fc81 	uxth.w	ip, r1
 80080cc:	44f4      	add	ip, lr
 80080ce:	0c08      	lsrs	r0, r1, #16
 80080d0:	4471      	add	r1, lr
 80080d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80080d6:	b289      	uxth	r1, r1
 80080d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80080dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080e0:	f846 1b04 	str.w	r1, [r6], #4
 80080e4:	e7dc      	b.n	80080a0 <__mdiff+0xd4>
 80080e6:	3f01      	subs	r7, #1
 80080e8:	e7e6      	b.n	80080b8 <__mdiff+0xec>
 80080ea:	bf00      	nop
 80080ec:	080097fa 	.word	0x080097fa
 80080f0:	0800980b 	.word	0x0800980b

080080f4 <__d2b>:
 80080f4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80080f8:	2101      	movs	r1, #1
 80080fa:	4690      	mov	r8, r2
 80080fc:	4699      	mov	r9, r3
 80080fe:	9e08      	ldr	r6, [sp, #32]
 8008100:	f7ff fcd0 	bl	8007aa4 <_Balloc>
 8008104:	4604      	mov	r4, r0
 8008106:	b930      	cbnz	r0, 8008116 <__d2b+0x22>
 8008108:	4602      	mov	r2, r0
 800810a:	f240 310f 	movw	r1, #783	@ 0x30f
 800810e:	4b23      	ldr	r3, [pc, #140]	@ (800819c <__d2b+0xa8>)
 8008110:	4823      	ldr	r0, [pc, #140]	@ (80081a0 <__d2b+0xac>)
 8008112:	f000 fa71 	bl	80085f8 <__assert_func>
 8008116:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800811a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800811e:	b10d      	cbz	r5, 8008124 <__d2b+0x30>
 8008120:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	f1b8 0300 	subs.w	r3, r8, #0
 800812a:	d024      	beq.n	8008176 <__d2b+0x82>
 800812c:	4668      	mov	r0, sp
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	f7ff fd7f 	bl	8007c32 <__lo0bits>
 8008134:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008138:	b1d8      	cbz	r0, 8008172 <__d2b+0x7e>
 800813a:	f1c0 0320 	rsb	r3, r0, #32
 800813e:	fa02 f303 	lsl.w	r3, r2, r3
 8008142:	430b      	orrs	r3, r1
 8008144:	40c2      	lsrs	r2, r0
 8008146:	6163      	str	r3, [r4, #20]
 8008148:	9201      	str	r2, [sp, #4]
 800814a:	9b01      	ldr	r3, [sp, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	bf0c      	ite	eq
 8008150:	2201      	moveq	r2, #1
 8008152:	2202      	movne	r2, #2
 8008154:	61a3      	str	r3, [r4, #24]
 8008156:	6122      	str	r2, [r4, #16]
 8008158:	b1ad      	cbz	r5, 8008186 <__d2b+0x92>
 800815a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800815e:	4405      	add	r5, r0
 8008160:	6035      	str	r5, [r6, #0]
 8008162:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008168:	6018      	str	r0, [r3, #0]
 800816a:	4620      	mov	r0, r4
 800816c:	b002      	add	sp, #8
 800816e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008172:	6161      	str	r1, [r4, #20]
 8008174:	e7e9      	b.n	800814a <__d2b+0x56>
 8008176:	a801      	add	r0, sp, #4
 8008178:	f7ff fd5b 	bl	8007c32 <__lo0bits>
 800817c:	9b01      	ldr	r3, [sp, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	6163      	str	r3, [r4, #20]
 8008182:	3020      	adds	r0, #32
 8008184:	e7e7      	b.n	8008156 <__d2b+0x62>
 8008186:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800818a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800818e:	6030      	str	r0, [r6, #0]
 8008190:	6918      	ldr	r0, [r3, #16]
 8008192:	f7ff fd2f 	bl	8007bf4 <__hi0bits>
 8008196:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800819a:	e7e4      	b.n	8008166 <__d2b+0x72>
 800819c:	080097fa 	.word	0x080097fa
 80081a0:	0800980b 	.word	0x0800980b

080081a4 <__ssputs_r>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	461f      	mov	r7, r3
 80081aa:	688e      	ldr	r6, [r1, #8]
 80081ac:	4682      	mov	sl, r0
 80081ae:	42be      	cmp	r6, r7
 80081b0:	460c      	mov	r4, r1
 80081b2:	4690      	mov	r8, r2
 80081b4:	680b      	ldr	r3, [r1, #0]
 80081b6:	d82d      	bhi.n	8008214 <__ssputs_r+0x70>
 80081b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80081c0:	d026      	beq.n	8008210 <__ssputs_r+0x6c>
 80081c2:	6965      	ldr	r5, [r4, #20]
 80081c4:	6909      	ldr	r1, [r1, #16]
 80081c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081ca:	eba3 0901 	sub.w	r9, r3, r1
 80081ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081d2:	1c7b      	adds	r3, r7, #1
 80081d4:	444b      	add	r3, r9
 80081d6:	106d      	asrs	r5, r5, #1
 80081d8:	429d      	cmp	r5, r3
 80081da:	bf38      	it	cc
 80081dc:	461d      	movcc	r5, r3
 80081de:	0553      	lsls	r3, r2, #21
 80081e0:	d527      	bpl.n	8008232 <__ssputs_r+0x8e>
 80081e2:	4629      	mov	r1, r5
 80081e4:	f7ff fbd2 	bl	800798c <_malloc_r>
 80081e8:	4606      	mov	r6, r0
 80081ea:	b360      	cbz	r0, 8008246 <__ssputs_r+0xa2>
 80081ec:	464a      	mov	r2, r9
 80081ee:	6921      	ldr	r1, [r4, #16]
 80081f0:	f7fe fcf9 	bl	8006be6 <memcpy>
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80081fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081fe:	81a3      	strh	r3, [r4, #12]
 8008200:	6126      	str	r6, [r4, #16]
 8008202:	444e      	add	r6, r9
 8008204:	6026      	str	r6, [r4, #0]
 8008206:	463e      	mov	r6, r7
 8008208:	6165      	str	r5, [r4, #20]
 800820a:	eba5 0509 	sub.w	r5, r5, r9
 800820e:	60a5      	str	r5, [r4, #8]
 8008210:	42be      	cmp	r6, r7
 8008212:	d900      	bls.n	8008216 <__ssputs_r+0x72>
 8008214:	463e      	mov	r6, r7
 8008216:	4632      	mov	r2, r6
 8008218:	4641      	mov	r1, r8
 800821a:	6820      	ldr	r0, [r4, #0]
 800821c:	f000 f9c2 	bl	80085a4 <memmove>
 8008220:	2000      	movs	r0, #0
 8008222:	68a3      	ldr	r3, [r4, #8]
 8008224:	1b9b      	subs	r3, r3, r6
 8008226:	60a3      	str	r3, [r4, #8]
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	4433      	add	r3, r6
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008232:	462a      	mov	r2, r5
 8008234:	f000 fa24 	bl	8008680 <_realloc_r>
 8008238:	4606      	mov	r6, r0
 800823a:	2800      	cmp	r0, #0
 800823c:	d1e0      	bne.n	8008200 <__ssputs_r+0x5c>
 800823e:	4650      	mov	r0, sl
 8008240:	6921      	ldr	r1, [r4, #16]
 8008242:	f7ff fb31 	bl	80078a8 <_free_r>
 8008246:	230c      	movs	r3, #12
 8008248:	f8ca 3000 	str.w	r3, [sl]
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f04f 30ff 	mov.w	r0, #4294967295
 8008252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008256:	81a3      	strh	r3, [r4, #12]
 8008258:	e7e9      	b.n	800822e <__ssputs_r+0x8a>
	...

0800825c <_svfiprintf_r>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	4698      	mov	r8, r3
 8008262:	898b      	ldrh	r3, [r1, #12]
 8008264:	4607      	mov	r7, r0
 8008266:	061b      	lsls	r3, r3, #24
 8008268:	460d      	mov	r5, r1
 800826a:	4614      	mov	r4, r2
 800826c:	b09d      	sub	sp, #116	@ 0x74
 800826e:	d510      	bpl.n	8008292 <_svfiprintf_r+0x36>
 8008270:	690b      	ldr	r3, [r1, #16]
 8008272:	b973      	cbnz	r3, 8008292 <_svfiprintf_r+0x36>
 8008274:	2140      	movs	r1, #64	@ 0x40
 8008276:	f7ff fb89 	bl	800798c <_malloc_r>
 800827a:	6028      	str	r0, [r5, #0]
 800827c:	6128      	str	r0, [r5, #16]
 800827e:	b930      	cbnz	r0, 800828e <_svfiprintf_r+0x32>
 8008280:	230c      	movs	r3, #12
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	b01d      	add	sp, #116	@ 0x74
 800828a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828e:	2340      	movs	r3, #64	@ 0x40
 8008290:	616b      	str	r3, [r5, #20]
 8008292:	2300      	movs	r3, #0
 8008294:	9309      	str	r3, [sp, #36]	@ 0x24
 8008296:	2320      	movs	r3, #32
 8008298:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800829c:	2330      	movs	r3, #48	@ 0x30
 800829e:	f04f 0901 	mov.w	r9, #1
 80082a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80082a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008440 <_svfiprintf_r+0x1e4>
 80082aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082ae:	4623      	mov	r3, r4
 80082b0:	469a      	mov	sl, r3
 80082b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b6:	b10a      	cbz	r2, 80082bc <_svfiprintf_r+0x60>
 80082b8:	2a25      	cmp	r2, #37	@ 0x25
 80082ba:	d1f9      	bne.n	80082b0 <_svfiprintf_r+0x54>
 80082bc:	ebba 0b04 	subs.w	fp, sl, r4
 80082c0:	d00b      	beq.n	80082da <_svfiprintf_r+0x7e>
 80082c2:	465b      	mov	r3, fp
 80082c4:	4622      	mov	r2, r4
 80082c6:	4629      	mov	r1, r5
 80082c8:	4638      	mov	r0, r7
 80082ca:	f7ff ff6b 	bl	80081a4 <__ssputs_r>
 80082ce:	3001      	adds	r0, #1
 80082d0:	f000 80a7 	beq.w	8008422 <_svfiprintf_r+0x1c6>
 80082d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082d6:	445a      	add	r2, fp
 80082d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80082da:	f89a 3000 	ldrb.w	r3, [sl]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 809f 	beq.w	8008422 <_svfiprintf_r+0x1c6>
 80082e4:	2300      	movs	r3, #0
 80082e6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ee:	f10a 0a01 	add.w	sl, sl, #1
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	9307      	str	r3, [sp, #28]
 80082f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80082fc:	4654      	mov	r4, sl
 80082fe:	2205      	movs	r2, #5
 8008300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008304:	484e      	ldr	r0, [pc, #312]	@ (8008440 <_svfiprintf_r+0x1e4>)
 8008306:	f7fe fc60 	bl	8006bca <memchr>
 800830a:	9a04      	ldr	r2, [sp, #16]
 800830c:	b9d8      	cbnz	r0, 8008346 <_svfiprintf_r+0xea>
 800830e:	06d0      	lsls	r0, r2, #27
 8008310:	bf44      	itt	mi
 8008312:	2320      	movmi	r3, #32
 8008314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008318:	0711      	lsls	r1, r2, #28
 800831a:	bf44      	itt	mi
 800831c:	232b      	movmi	r3, #43	@ 0x2b
 800831e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008322:	f89a 3000 	ldrb.w	r3, [sl]
 8008326:	2b2a      	cmp	r3, #42	@ 0x2a
 8008328:	d015      	beq.n	8008356 <_svfiprintf_r+0xfa>
 800832a:	4654      	mov	r4, sl
 800832c:	2000      	movs	r0, #0
 800832e:	f04f 0c0a 	mov.w	ip, #10
 8008332:	9a07      	ldr	r2, [sp, #28]
 8008334:	4621      	mov	r1, r4
 8008336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800833a:	3b30      	subs	r3, #48	@ 0x30
 800833c:	2b09      	cmp	r3, #9
 800833e:	d94b      	bls.n	80083d8 <_svfiprintf_r+0x17c>
 8008340:	b1b0      	cbz	r0, 8008370 <_svfiprintf_r+0x114>
 8008342:	9207      	str	r2, [sp, #28]
 8008344:	e014      	b.n	8008370 <_svfiprintf_r+0x114>
 8008346:	eba0 0308 	sub.w	r3, r0, r8
 800834a:	fa09 f303 	lsl.w	r3, r9, r3
 800834e:	4313      	orrs	r3, r2
 8008350:	46a2      	mov	sl, r4
 8008352:	9304      	str	r3, [sp, #16]
 8008354:	e7d2      	b.n	80082fc <_svfiprintf_r+0xa0>
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	1d19      	adds	r1, r3, #4
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	9103      	str	r1, [sp, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	bfbb      	ittet	lt
 8008362:	425b      	neglt	r3, r3
 8008364:	f042 0202 	orrlt.w	r2, r2, #2
 8008368:	9307      	strge	r3, [sp, #28]
 800836a:	9307      	strlt	r3, [sp, #28]
 800836c:	bfb8      	it	lt
 800836e:	9204      	strlt	r2, [sp, #16]
 8008370:	7823      	ldrb	r3, [r4, #0]
 8008372:	2b2e      	cmp	r3, #46	@ 0x2e
 8008374:	d10a      	bne.n	800838c <_svfiprintf_r+0x130>
 8008376:	7863      	ldrb	r3, [r4, #1]
 8008378:	2b2a      	cmp	r3, #42	@ 0x2a
 800837a:	d132      	bne.n	80083e2 <_svfiprintf_r+0x186>
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	3402      	adds	r4, #2
 8008380:	1d1a      	adds	r2, r3, #4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	9203      	str	r2, [sp, #12]
 8008386:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800838a:	9305      	str	r3, [sp, #20]
 800838c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008444 <_svfiprintf_r+0x1e8>
 8008390:	2203      	movs	r2, #3
 8008392:	4650      	mov	r0, sl
 8008394:	7821      	ldrb	r1, [r4, #0]
 8008396:	f7fe fc18 	bl	8006bca <memchr>
 800839a:	b138      	cbz	r0, 80083ac <_svfiprintf_r+0x150>
 800839c:	2240      	movs	r2, #64	@ 0x40
 800839e:	9b04      	ldr	r3, [sp, #16]
 80083a0:	eba0 000a 	sub.w	r0, r0, sl
 80083a4:	4082      	lsls	r2, r0
 80083a6:	4313      	orrs	r3, r2
 80083a8:	3401      	adds	r4, #1
 80083aa:	9304      	str	r3, [sp, #16]
 80083ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b0:	2206      	movs	r2, #6
 80083b2:	4825      	ldr	r0, [pc, #148]	@ (8008448 <_svfiprintf_r+0x1ec>)
 80083b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083b8:	f7fe fc07 	bl	8006bca <memchr>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d036      	beq.n	800842e <_svfiprintf_r+0x1d2>
 80083c0:	4b22      	ldr	r3, [pc, #136]	@ (800844c <_svfiprintf_r+0x1f0>)
 80083c2:	bb1b      	cbnz	r3, 800840c <_svfiprintf_r+0x1b0>
 80083c4:	9b03      	ldr	r3, [sp, #12]
 80083c6:	3307      	adds	r3, #7
 80083c8:	f023 0307 	bic.w	r3, r3, #7
 80083cc:	3308      	adds	r3, #8
 80083ce:	9303      	str	r3, [sp, #12]
 80083d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d2:	4433      	add	r3, r6
 80083d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083d6:	e76a      	b.n	80082ae <_svfiprintf_r+0x52>
 80083d8:	460c      	mov	r4, r1
 80083da:	2001      	movs	r0, #1
 80083dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80083e0:	e7a8      	b.n	8008334 <_svfiprintf_r+0xd8>
 80083e2:	2300      	movs	r3, #0
 80083e4:	f04f 0c0a 	mov.w	ip, #10
 80083e8:	4619      	mov	r1, r3
 80083ea:	3401      	adds	r4, #1
 80083ec:	9305      	str	r3, [sp, #20]
 80083ee:	4620      	mov	r0, r4
 80083f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f4:	3a30      	subs	r2, #48	@ 0x30
 80083f6:	2a09      	cmp	r2, #9
 80083f8:	d903      	bls.n	8008402 <_svfiprintf_r+0x1a6>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0c6      	beq.n	800838c <_svfiprintf_r+0x130>
 80083fe:	9105      	str	r1, [sp, #20]
 8008400:	e7c4      	b.n	800838c <_svfiprintf_r+0x130>
 8008402:	4604      	mov	r4, r0
 8008404:	2301      	movs	r3, #1
 8008406:	fb0c 2101 	mla	r1, ip, r1, r2
 800840a:	e7f0      	b.n	80083ee <_svfiprintf_r+0x192>
 800840c:	ab03      	add	r3, sp, #12
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	462a      	mov	r2, r5
 8008412:	4638      	mov	r0, r7
 8008414:	4b0e      	ldr	r3, [pc, #56]	@ (8008450 <_svfiprintf_r+0x1f4>)
 8008416:	a904      	add	r1, sp, #16
 8008418:	f7fd fe64 	bl	80060e4 <_printf_float>
 800841c:	1c42      	adds	r2, r0, #1
 800841e:	4606      	mov	r6, r0
 8008420:	d1d6      	bne.n	80083d0 <_svfiprintf_r+0x174>
 8008422:	89ab      	ldrh	r3, [r5, #12]
 8008424:	065b      	lsls	r3, r3, #25
 8008426:	f53f af2d 	bmi.w	8008284 <_svfiprintf_r+0x28>
 800842a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800842c:	e72c      	b.n	8008288 <_svfiprintf_r+0x2c>
 800842e:	ab03      	add	r3, sp, #12
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	462a      	mov	r2, r5
 8008434:	4638      	mov	r0, r7
 8008436:	4b06      	ldr	r3, [pc, #24]	@ (8008450 <_svfiprintf_r+0x1f4>)
 8008438:	a904      	add	r1, sp, #16
 800843a:	f7fe f8f1 	bl	8006620 <_printf_i>
 800843e:	e7ed      	b.n	800841c <_svfiprintf_r+0x1c0>
 8008440:	08009960 	.word	0x08009960
 8008444:	08009966 	.word	0x08009966
 8008448:	0800996a 	.word	0x0800996a
 800844c:	080060e5 	.word	0x080060e5
 8008450:	080081a5 	.word	0x080081a5

08008454 <__sflush_r>:
 8008454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845a:	0716      	lsls	r6, r2, #28
 800845c:	4605      	mov	r5, r0
 800845e:	460c      	mov	r4, r1
 8008460:	d454      	bmi.n	800850c <__sflush_r+0xb8>
 8008462:	684b      	ldr	r3, [r1, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dc02      	bgt.n	800846e <__sflush_r+0x1a>
 8008468:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800846a:	2b00      	cmp	r3, #0
 800846c:	dd48      	ble.n	8008500 <__sflush_r+0xac>
 800846e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008470:	2e00      	cmp	r6, #0
 8008472:	d045      	beq.n	8008500 <__sflush_r+0xac>
 8008474:	2300      	movs	r3, #0
 8008476:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800847a:	682f      	ldr	r7, [r5, #0]
 800847c:	6a21      	ldr	r1, [r4, #32]
 800847e:	602b      	str	r3, [r5, #0]
 8008480:	d030      	beq.n	80084e4 <__sflush_r+0x90>
 8008482:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	0759      	lsls	r1, r3, #29
 8008488:	d505      	bpl.n	8008496 <__sflush_r+0x42>
 800848a:	6863      	ldr	r3, [r4, #4]
 800848c:	1ad2      	subs	r2, r2, r3
 800848e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008490:	b10b      	cbz	r3, 8008496 <__sflush_r+0x42>
 8008492:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008494:	1ad2      	subs	r2, r2, r3
 8008496:	2300      	movs	r3, #0
 8008498:	4628      	mov	r0, r5
 800849a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800849c:	6a21      	ldr	r1, [r4, #32]
 800849e:	47b0      	blx	r6
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	d106      	bne.n	80084b4 <__sflush_r+0x60>
 80084a6:	6829      	ldr	r1, [r5, #0]
 80084a8:	291d      	cmp	r1, #29
 80084aa:	d82b      	bhi.n	8008504 <__sflush_r+0xb0>
 80084ac:	4a28      	ldr	r2, [pc, #160]	@ (8008550 <__sflush_r+0xfc>)
 80084ae:	410a      	asrs	r2, r1
 80084b0:	07d6      	lsls	r6, r2, #31
 80084b2:	d427      	bmi.n	8008504 <__sflush_r+0xb0>
 80084b4:	2200      	movs	r2, #0
 80084b6:	6062      	str	r2, [r4, #4]
 80084b8:	6922      	ldr	r2, [r4, #16]
 80084ba:	04d9      	lsls	r1, r3, #19
 80084bc:	6022      	str	r2, [r4, #0]
 80084be:	d504      	bpl.n	80084ca <__sflush_r+0x76>
 80084c0:	1c42      	adds	r2, r0, #1
 80084c2:	d101      	bne.n	80084c8 <__sflush_r+0x74>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b903      	cbnz	r3, 80084ca <__sflush_r+0x76>
 80084c8:	6560      	str	r0, [r4, #84]	@ 0x54
 80084ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084cc:	602f      	str	r7, [r5, #0]
 80084ce:	b1b9      	cbz	r1, 8008500 <__sflush_r+0xac>
 80084d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084d4:	4299      	cmp	r1, r3
 80084d6:	d002      	beq.n	80084de <__sflush_r+0x8a>
 80084d8:	4628      	mov	r0, r5
 80084da:	f7ff f9e5 	bl	80078a8 <_free_r>
 80084de:	2300      	movs	r3, #0
 80084e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80084e2:	e00d      	b.n	8008500 <__sflush_r+0xac>
 80084e4:	2301      	movs	r3, #1
 80084e6:	4628      	mov	r0, r5
 80084e8:	47b0      	blx	r6
 80084ea:	4602      	mov	r2, r0
 80084ec:	1c50      	adds	r0, r2, #1
 80084ee:	d1c9      	bne.n	8008484 <__sflush_r+0x30>
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0c6      	beq.n	8008484 <__sflush_r+0x30>
 80084f6:	2b1d      	cmp	r3, #29
 80084f8:	d001      	beq.n	80084fe <__sflush_r+0xaa>
 80084fa:	2b16      	cmp	r3, #22
 80084fc:	d11d      	bne.n	800853a <__sflush_r+0xe6>
 80084fe:	602f      	str	r7, [r5, #0]
 8008500:	2000      	movs	r0, #0
 8008502:	e021      	b.n	8008548 <__sflush_r+0xf4>
 8008504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008508:	b21b      	sxth	r3, r3
 800850a:	e01a      	b.n	8008542 <__sflush_r+0xee>
 800850c:	690f      	ldr	r7, [r1, #16]
 800850e:	2f00      	cmp	r7, #0
 8008510:	d0f6      	beq.n	8008500 <__sflush_r+0xac>
 8008512:	0793      	lsls	r3, r2, #30
 8008514:	bf18      	it	ne
 8008516:	2300      	movne	r3, #0
 8008518:	680e      	ldr	r6, [r1, #0]
 800851a:	bf08      	it	eq
 800851c:	694b      	ldreq	r3, [r1, #20]
 800851e:	1bf6      	subs	r6, r6, r7
 8008520:	600f      	str	r7, [r1, #0]
 8008522:	608b      	str	r3, [r1, #8]
 8008524:	2e00      	cmp	r6, #0
 8008526:	ddeb      	ble.n	8008500 <__sflush_r+0xac>
 8008528:	4633      	mov	r3, r6
 800852a:	463a      	mov	r2, r7
 800852c:	4628      	mov	r0, r5
 800852e:	6a21      	ldr	r1, [r4, #32]
 8008530:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008534:	47e0      	blx	ip
 8008536:	2800      	cmp	r0, #0
 8008538:	dc07      	bgt.n	800854a <__sflush_r+0xf6>
 800853a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800853e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008542:	f04f 30ff 	mov.w	r0, #4294967295
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800854a:	4407      	add	r7, r0
 800854c:	1a36      	subs	r6, r6, r0
 800854e:	e7e9      	b.n	8008524 <__sflush_r+0xd0>
 8008550:	dfbffffe 	.word	0xdfbffffe

08008554 <_fflush_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	690b      	ldr	r3, [r1, #16]
 8008558:	4605      	mov	r5, r0
 800855a:	460c      	mov	r4, r1
 800855c:	b913      	cbnz	r3, 8008564 <_fflush_r+0x10>
 800855e:	2500      	movs	r5, #0
 8008560:	4628      	mov	r0, r5
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	b118      	cbz	r0, 800856e <_fflush_r+0x1a>
 8008566:	6a03      	ldr	r3, [r0, #32]
 8008568:	b90b      	cbnz	r3, 800856e <_fflush_r+0x1a>
 800856a:	f7fe fa05 	bl	8006978 <__sinit>
 800856e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0f3      	beq.n	800855e <_fflush_r+0xa>
 8008576:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008578:	07d0      	lsls	r0, r2, #31
 800857a:	d404      	bmi.n	8008586 <_fflush_r+0x32>
 800857c:	0599      	lsls	r1, r3, #22
 800857e:	d402      	bmi.n	8008586 <_fflush_r+0x32>
 8008580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008582:	f7fe fb20 	bl	8006bc6 <__retarget_lock_acquire_recursive>
 8008586:	4628      	mov	r0, r5
 8008588:	4621      	mov	r1, r4
 800858a:	f7ff ff63 	bl	8008454 <__sflush_r>
 800858e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008590:	4605      	mov	r5, r0
 8008592:	07da      	lsls	r2, r3, #31
 8008594:	d4e4      	bmi.n	8008560 <_fflush_r+0xc>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	059b      	lsls	r3, r3, #22
 800859a:	d4e1      	bmi.n	8008560 <_fflush_r+0xc>
 800859c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800859e:	f7fe fb13 	bl	8006bc8 <__retarget_lock_release_recursive>
 80085a2:	e7dd      	b.n	8008560 <_fflush_r+0xc>

080085a4 <memmove>:
 80085a4:	4288      	cmp	r0, r1
 80085a6:	b510      	push	{r4, lr}
 80085a8:	eb01 0402 	add.w	r4, r1, r2
 80085ac:	d902      	bls.n	80085b4 <memmove+0x10>
 80085ae:	4284      	cmp	r4, r0
 80085b0:	4623      	mov	r3, r4
 80085b2:	d807      	bhi.n	80085c4 <memmove+0x20>
 80085b4:	1e43      	subs	r3, r0, #1
 80085b6:	42a1      	cmp	r1, r4
 80085b8:	d008      	beq.n	80085cc <memmove+0x28>
 80085ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085c2:	e7f8      	b.n	80085b6 <memmove+0x12>
 80085c4:	4601      	mov	r1, r0
 80085c6:	4402      	add	r2, r0
 80085c8:	428a      	cmp	r2, r1
 80085ca:	d100      	bne.n	80085ce <memmove+0x2a>
 80085cc:	bd10      	pop	{r4, pc}
 80085ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085d6:	e7f7      	b.n	80085c8 <memmove+0x24>

080085d8 <_sbrk_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	2300      	movs	r3, #0
 80085dc:	4d05      	ldr	r5, [pc, #20]	@ (80085f4 <_sbrk_r+0x1c>)
 80085de:	4604      	mov	r4, r0
 80085e0:	4608      	mov	r0, r1
 80085e2:	602b      	str	r3, [r5, #0]
 80085e4:	f7fa f81e 	bl	8002624 <_sbrk>
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	d102      	bne.n	80085f2 <_sbrk_r+0x1a>
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	b103      	cbz	r3, 80085f2 <_sbrk_r+0x1a>
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	20000a38 	.word	0x20000a38

080085f8 <__assert_func>:
 80085f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085fa:	4614      	mov	r4, r2
 80085fc:	461a      	mov	r2, r3
 80085fe:	4b09      	ldr	r3, [pc, #36]	@ (8008624 <__assert_func+0x2c>)
 8008600:	4605      	mov	r5, r0
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68d8      	ldr	r0, [r3, #12]
 8008606:	b954      	cbnz	r4, 800861e <__assert_func+0x26>
 8008608:	4b07      	ldr	r3, [pc, #28]	@ (8008628 <__assert_func+0x30>)
 800860a:	461c      	mov	r4, r3
 800860c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008610:	9100      	str	r1, [sp, #0]
 8008612:	462b      	mov	r3, r5
 8008614:	4905      	ldr	r1, [pc, #20]	@ (800862c <__assert_func+0x34>)
 8008616:	f000 f86f 	bl	80086f8 <fiprintf>
 800861a:	f000 f87f 	bl	800871c <abort>
 800861e:	4b04      	ldr	r3, [pc, #16]	@ (8008630 <__assert_func+0x38>)
 8008620:	e7f4      	b.n	800860c <__assert_func+0x14>
 8008622:	bf00      	nop
 8008624:	20000020 	.word	0x20000020
 8008628:	080099b6 	.word	0x080099b6
 800862c:	08009988 	.word	0x08009988
 8008630:	0800997b 	.word	0x0800997b

08008634 <_calloc_r>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	fba1 5402 	umull	r5, r4, r1, r2
 800863a:	b93c      	cbnz	r4, 800864c <_calloc_r+0x18>
 800863c:	4629      	mov	r1, r5
 800863e:	f7ff f9a5 	bl	800798c <_malloc_r>
 8008642:	4606      	mov	r6, r0
 8008644:	b928      	cbnz	r0, 8008652 <_calloc_r+0x1e>
 8008646:	2600      	movs	r6, #0
 8008648:	4630      	mov	r0, r6
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	220c      	movs	r2, #12
 800864e:	6002      	str	r2, [r0, #0]
 8008650:	e7f9      	b.n	8008646 <_calloc_r+0x12>
 8008652:	462a      	mov	r2, r5
 8008654:	4621      	mov	r1, r4
 8008656:	f7fe fa38 	bl	8006aca <memset>
 800865a:	e7f5      	b.n	8008648 <_calloc_r+0x14>

0800865c <__ascii_mbtowc>:
 800865c:	b082      	sub	sp, #8
 800865e:	b901      	cbnz	r1, 8008662 <__ascii_mbtowc+0x6>
 8008660:	a901      	add	r1, sp, #4
 8008662:	b142      	cbz	r2, 8008676 <__ascii_mbtowc+0x1a>
 8008664:	b14b      	cbz	r3, 800867a <__ascii_mbtowc+0x1e>
 8008666:	7813      	ldrb	r3, [r2, #0]
 8008668:	600b      	str	r3, [r1, #0]
 800866a:	7812      	ldrb	r2, [r2, #0]
 800866c:	1e10      	subs	r0, r2, #0
 800866e:	bf18      	it	ne
 8008670:	2001      	movne	r0, #1
 8008672:	b002      	add	sp, #8
 8008674:	4770      	bx	lr
 8008676:	4610      	mov	r0, r2
 8008678:	e7fb      	b.n	8008672 <__ascii_mbtowc+0x16>
 800867a:	f06f 0001 	mvn.w	r0, #1
 800867e:	e7f8      	b.n	8008672 <__ascii_mbtowc+0x16>

08008680 <_realloc_r>:
 8008680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008684:	4680      	mov	r8, r0
 8008686:	4615      	mov	r5, r2
 8008688:	460c      	mov	r4, r1
 800868a:	b921      	cbnz	r1, 8008696 <_realloc_r+0x16>
 800868c:	4611      	mov	r1, r2
 800868e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008692:	f7ff b97b 	b.w	800798c <_malloc_r>
 8008696:	b92a      	cbnz	r2, 80086a4 <_realloc_r+0x24>
 8008698:	f7ff f906 	bl	80078a8 <_free_r>
 800869c:	2400      	movs	r4, #0
 800869e:	4620      	mov	r0, r4
 80086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a4:	f000 f841 	bl	800872a <_malloc_usable_size_r>
 80086a8:	4285      	cmp	r5, r0
 80086aa:	4606      	mov	r6, r0
 80086ac:	d802      	bhi.n	80086b4 <_realloc_r+0x34>
 80086ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80086b2:	d8f4      	bhi.n	800869e <_realloc_r+0x1e>
 80086b4:	4629      	mov	r1, r5
 80086b6:	4640      	mov	r0, r8
 80086b8:	f7ff f968 	bl	800798c <_malloc_r>
 80086bc:	4607      	mov	r7, r0
 80086be:	2800      	cmp	r0, #0
 80086c0:	d0ec      	beq.n	800869c <_realloc_r+0x1c>
 80086c2:	42b5      	cmp	r5, r6
 80086c4:	462a      	mov	r2, r5
 80086c6:	4621      	mov	r1, r4
 80086c8:	bf28      	it	cs
 80086ca:	4632      	movcs	r2, r6
 80086cc:	f7fe fa8b 	bl	8006be6 <memcpy>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4640      	mov	r0, r8
 80086d4:	f7ff f8e8 	bl	80078a8 <_free_r>
 80086d8:	463c      	mov	r4, r7
 80086da:	e7e0      	b.n	800869e <_realloc_r+0x1e>

080086dc <__ascii_wctomb>:
 80086dc:	4603      	mov	r3, r0
 80086de:	4608      	mov	r0, r1
 80086e0:	b141      	cbz	r1, 80086f4 <__ascii_wctomb+0x18>
 80086e2:	2aff      	cmp	r2, #255	@ 0xff
 80086e4:	d904      	bls.n	80086f0 <__ascii_wctomb+0x14>
 80086e6:	228a      	movs	r2, #138	@ 0x8a
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	4770      	bx	lr
 80086f0:	2001      	movs	r0, #1
 80086f2:	700a      	strb	r2, [r1, #0]
 80086f4:	4770      	bx	lr
	...

080086f8 <fiprintf>:
 80086f8:	b40e      	push	{r1, r2, r3}
 80086fa:	b503      	push	{r0, r1, lr}
 80086fc:	4601      	mov	r1, r0
 80086fe:	ab03      	add	r3, sp, #12
 8008700:	4805      	ldr	r0, [pc, #20]	@ (8008718 <fiprintf+0x20>)
 8008702:	f853 2b04 	ldr.w	r2, [r3], #4
 8008706:	6800      	ldr	r0, [r0, #0]
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	f000 f83d 	bl	8008788 <_vfiprintf_r>
 800870e:	b002      	add	sp, #8
 8008710:	f85d eb04 	ldr.w	lr, [sp], #4
 8008714:	b003      	add	sp, #12
 8008716:	4770      	bx	lr
 8008718:	20000020 	.word	0x20000020

0800871c <abort>:
 800871c:	2006      	movs	r0, #6
 800871e:	b508      	push	{r3, lr}
 8008720:	f000 fa06 	bl	8008b30 <raise>
 8008724:	2001      	movs	r0, #1
 8008726:	f7f9 ff08 	bl	800253a <_exit>

0800872a <_malloc_usable_size_r>:
 800872a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800872e:	1f18      	subs	r0, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	bfbc      	itt	lt
 8008734:	580b      	ldrlt	r3, [r1, r0]
 8008736:	18c0      	addlt	r0, r0, r3
 8008738:	4770      	bx	lr

0800873a <__sfputc_r>:
 800873a:	6893      	ldr	r3, [r2, #8]
 800873c:	b410      	push	{r4}
 800873e:	3b01      	subs	r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	6093      	str	r3, [r2, #8]
 8008744:	da07      	bge.n	8008756 <__sfputc_r+0x1c>
 8008746:	6994      	ldr	r4, [r2, #24]
 8008748:	42a3      	cmp	r3, r4
 800874a:	db01      	blt.n	8008750 <__sfputc_r+0x16>
 800874c:	290a      	cmp	r1, #10
 800874e:	d102      	bne.n	8008756 <__sfputc_r+0x1c>
 8008750:	bc10      	pop	{r4}
 8008752:	f000 b931 	b.w	80089b8 <__swbuf_r>
 8008756:	6813      	ldr	r3, [r2, #0]
 8008758:	1c58      	adds	r0, r3, #1
 800875a:	6010      	str	r0, [r2, #0]
 800875c:	7019      	strb	r1, [r3, #0]
 800875e:	4608      	mov	r0, r1
 8008760:	bc10      	pop	{r4}
 8008762:	4770      	bx	lr

08008764 <__sfputs_r>:
 8008764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008766:	4606      	mov	r6, r0
 8008768:	460f      	mov	r7, r1
 800876a:	4614      	mov	r4, r2
 800876c:	18d5      	adds	r5, r2, r3
 800876e:	42ac      	cmp	r4, r5
 8008770:	d101      	bne.n	8008776 <__sfputs_r+0x12>
 8008772:	2000      	movs	r0, #0
 8008774:	e007      	b.n	8008786 <__sfputs_r+0x22>
 8008776:	463a      	mov	r2, r7
 8008778:	4630      	mov	r0, r6
 800877a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800877e:	f7ff ffdc 	bl	800873a <__sfputc_r>
 8008782:	1c43      	adds	r3, r0, #1
 8008784:	d1f3      	bne.n	800876e <__sfputs_r+0xa>
 8008786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008788 <_vfiprintf_r>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	460d      	mov	r5, r1
 800878e:	4614      	mov	r4, r2
 8008790:	4698      	mov	r8, r3
 8008792:	4606      	mov	r6, r0
 8008794:	b09d      	sub	sp, #116	@ 0x74
 8008796:	b118      	cbz	r0, 80087a0 <_vfiprintf_r+0x18>
 8008798:	6a03      	ldr	r3, [r0, #32]
 800879a:	b90b      	cbnz	r3, 80087a0 <_vfiprintf_r+0x18>
 800879c:	f7fe f8ec 	bl	8006978 <__sinit>
 80087a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087a2:	07d9      	lsls	r1, r3, #31
 80087a4:	d405      	bmi.n	80087b2 <_vfiprintf_r+0x2a>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	059a      	lsls	r2, r3, #22
 80087aa:	d402      	bmi.n	80087b2 <_vfiprintf_r+0x2a>
 80087ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ae:	f7fe fa0a 	bl	8006bc6 <__retarget_lock_acquire_recursive>
 80087b2:	89ab      	ldrh	r3, [r5, #12]
 80087b4:	071b      	lsls	r3, r3, #28
 80087b6:	d501      	bpl.n	80087bc <_vfiprintf_r+0x34>
 80087b8:	692b      	ldr	r3, [r5, #16]
 80087ba:	b99b      	cbnz	r3, 80087e4 <_vfiprintf_r+0x5c>
 80087bc:	4629      	mov	r1, r5
 80087be:	4630      	mov	r0, r6
 80087c0:	f000 f938 	bl	8008a34 <__swsetup_r>
 80087c4:	b170      	cbz	r0, 80087e4 <_vfiprintf_r+0x5c>
 80087c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087c8:	07dc      	lsls	r4, r3, #31
 80087ca:	d504      	bpl.n	80087d6 <_vfiprintf_r+0x4e>
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295
 80087d0:	b01d      	add	sp, #116	@ 0x74
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d6:	89ab      	ldrh	r3, [r5, #12]
 80087d8:	0598      	lsls	r0, r3, #22
 80087da:	d4f7      	bmi.n	80087cc <_vfiprintf_r+0x44>
 80087dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087de:	f7fe f9f3 	bl	8006bc8 <__retarget_lock_release_recursive>
 80087e2:	e7f3      	b.n	80087cc <_vfiprintf_r+0x44>
 80087e4:	2300      	movs	r3, #0
 80087e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e8:	2320      	movs	r3, #32
 80087ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087ee:	2330      	movs	r3, #48	@ 0x30
 80087f0:	f04f 0901 	mov.w	r9, #1
 80087f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087f8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80089a4 <_vfiprintf_r+0x21c>
 80087fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008800:	4623      	mov	r3, r4
 8008802:	469a      	mov	sl, r3
 8008804:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008808:	b10a      	cbz	r2, 800880e <_vfiprintf_r+0x86>
 800880a:	2a25      	cmp	r2, #37	@ 0x25
 800880c:	d1f9      	bne.n	8008802 <_vfiprintf_r+0x7a>
 800880e:	ebba 0b04 	subs.w	fp, sl, r4
 8008812:	d00b      	beq.n	800882c <_vfiprintf_r+0xa4>
 8008814:	465b      	mov	r3, fp
 8008816:	4622      	mov	r2, r4
 8008818:	4629      	mov	r1, r5
 800881a:	4630      	mov	r0, r6
 800881c:	f7ff ffa2 	bl	8008764 <__sfputs_r>
 8008820:	3001      	adds	r0, #1
 8008822:	f000 80a7 	beq.w	8008974 <_vfiprintf_r+0x1ec>
 8008826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008828:	445a      	add	r2, fp
 800882a:	9209      	str	r2, [sp, #36]	@ 0x24
 800882c:	f89a 3000 	ldrb.w	r3, [sl]
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 809f 	beq.w	8008974 <_vfiprintf_r+0x1ec>
 8008836:	2300      	movs	r3, #0
 8008838:	f04f 32ff 	mov.w	r2, #4294967295
 800883c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008840:	f10a 0a01 	add.w	sl, sl, #1
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	9307      	str	r3, [sp, #28]
 8008848:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800884c:	931a      	str	r3, [sp, #104]	@ 0x68
 800884e:	4654      	mov	r4, sl
 8008850:	2205      	movs	r2, #5
 8008852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008856:	4853      	ldr	r0, [pc, #332]	@ (80089a4 <_vfiprintf_r+0x21c>)
 8008858:	f7fe f9b7 	bl	8006bca <memchr>
 800885c:	9a04      	ldr	r2, [sp, #16]
 800885e:	b9d8      	cbnz	r0, 8008898 <_vfiprintf_r+0x110>
 8008860:	06d1      	lsls	r1, r2, #27
 8008862:	bf44      	itt	mi
 8008864:	2320      	movmi	r3, #32
 8008866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800886a:	0713      	lsls	r3, r2, #28
 800886c:	bf44      	itt	mi
 800886e:	232b      	movmi	r3, #43	@ 0x2b
 8008870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008874:	f89a 3000 	ldrb.w	r3, [sl]
 8008878:	2b2a      	cmp	r3, #42	@ 0x2a
 800887a:	d015      	beq.n	80088a8 <_vfiprintf_r+0x120>
 800887c:	4654      	mov	r4, sl
 800887e:	2000      	movs	r0, #0
 8008880:	f04f 0c0a 	mov.w	ip, #10
 8008884:	9a07      	ldr	r2, [sp, #28]
 8008886:	4621      	mov	r1, r4
 8008888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800888c:	3b30      	subs	r3, #48	@ 0x30
 800888e:	2b09      	cmp	r3, #9
 8008890:	d94b      	bls.n	800892a <_vfiprintf_r+0x1a2>
 8008892:	b1b0      	cbz	r0, 80088c2 <_vfiprintf_r+0x13a>
 8008894:	9207      	str	r2, [sp, #28]
 8008896:	e014      	b.n	80088c2 <_vfiprintf_r+0x13a>
 8008898:	eba0 0308 	sub.w	r3, r0, r8
 800889c:	fa09 f303 	lsl.w	r3, r9, r3
 80088a0:	4313      	orrs	r3, r2
 80088a2:	46a2      	mov	sl, r4
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	e7d2      	b.n	800884e <_vfiprintf_r+0xc6>
 80088a8:	9b03      	ldr	r3, [sp, #12]
 80088aa:	1d19      	adds	r1, r3, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	9103      	str	r1, [sp, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	bfbb      	ittet	lt
 80088b4:	425b      	neglt	r3, r3
 80088b6:	f042 0202 	orrlt.w	r2, r2, #2
 80088ba:	9307      	strge	r3, [sp, #28]
 80088bc:	9307      	strlt	r3, [sp, #28]
 80088be:	bfb8      	it	lt
 80088c0:	9204      	strlt	r2, [sp, #16]
 80088c2:	7823      	ldrb	r3, [r4, #0]
 80088c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80088c6:	d10a      	bne.n	80088de <_vfiprintf_r+0x156>
 80088c8:	7863      	ldrb	r3, [r4, #1]
 80088ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80088cc:	d132      	bne.n	8008934 <_vfiprintf_r+0x1ac>
 80088ce:	9b03      	ldr	r3, [sp, #12]
 80088d0:	3402      	adds	r4, #2
 80088d2:	1d1a      	adds	r2, r3, #4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	9203      	str	r2, [sp, #12]
 80088d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088dc:	9305      	str	r3, [sp, #20]
 80088de:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80089a8 <_vfiprintf_r+0x220>
 80088e2:	2203      	movs	r2, #3
 80088e4:	4650      	mov	r0, sl
 80088e6:	7821      	ldrb	r1, [r4, #0]
 80088e8:	f7fe f96f 	bl	8006bca <memchr>
 80088ec:	b138      	cbz	r0, 80088fe <_vfiprintf_r+0x176>
 80088ee:	2240      	movs	r2, #64	@ 0x40
 80088f0:	9b04      	ldr	r3, [sp, #16]
 80088f2:	eba0 000a 	sub.w	r0, r0, sl
 80088f6:	4082      	lsls	r2, r0
 80088f8:	4313      	orrs	r3, r2
 80088fa:	3401      	adds	r4, #1
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008902:	2206      	movs	r2, #6
 8008904:	4829      	ldr	r0, [pc, #164]	@ (80089ac <_vfiprintf_r+0x224>)
 8008906:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800890a:	f7fe f95e 	bl	8006bca <memchr>
 800890e:	2800      	cmp	r0, #0
 8008910:	d03f      	beq.n	8008992 <_vfiprintf_r+0x20a>
 8008912:	4b27      	ldr	r3, [pc, #156]	@ (80089b0 <_vfiprintf_r+0x228>)
 8008914:	bb1b      	cbnz	r3, 800895e <_vfiprintf_r+0x1d6>
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	3307      	adds	r3, #7
 800891a:	f023 0307 	bic.w	r3, r3, #7
 800891e:	3308      	adds	r3, #8
 8008920:	9303      	str	r3, [sp, #12]
 8008922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008924:	443b      	add	r3, r7
 8008926:	9309      	str	r3, [sp, #36]	@ 0x24
 8008928:	e76a      	b.n	8008800 <_vfiprintf_r+0x78>
 800892a:	460c      	mov	r4, r1
 800892c:	2001      	movs	r0, #1
 800892e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008932:	e7a8      	b.n	8008886 <_vfiprintf_r+0xfe>
 8008934:	2300      	movs	r3, #0
 8008936:	f04f 0c0a 	mov.w	ip, #10
 800893a:	4619      	mov	r1, r3
 800893c:	3401      	adds	r4, #1
 800893e:	9305      	str	r3, [sp, #20]
 8008940:	4620      	mov	r0, r4
 8008942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008946:	3a30      	subs	r2, #48	@ 0x30
 8008948:	2a09      	cmp	r2, #9
 800894a:	d903      	bls.n	8008954 <_vfiprintf_r+0x1cc>
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0c6      	beq.n	80088de <_vfiprintf_r+0x156>
 8008950:	9105      	str	r1, [sp, #20]
 8008952:	e7c4      	b.n	80088de <_vfiprintf_r+0x156>
 8008954:	4604      	mov	r4, r0
 8008956:	2301      	movs	r3, #1
 8008958:	fb0c 2101 	mla	r1, ip, r1, r2
 800895c:	e7f0      	b.n	8008940 <_vfiprintf_r+0x1b8>
 800895e:	ab03      	add	r3, sp, #12
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	462a      	mov	r2, r5
 8008964:	4630      	mov	r0, r6
 8008966:	4b13      	ldr	r3, [pc, #76]	@ (80089b4 <_vfiprintf_r+0x22c>)
 8008968:	a904      	add	r1, sp, #16
 800896a:	f7fd fbbb 	bl	80060e4 <_printf_float>
 800896e:	4607      	mov	r7, r0
 8008970:	1c78      	adds	r0, r7, #1
 8008972:	d1d6      	bne.n	8008922 <_vfiprintf_r+0x19a>
 8008974:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008976:	07d9      	lsls	r1, r3, #31
 8008978:	d405      	bmi.n	8008986 <_vfiprintf_r+0x1fe>
 800897a:	89ab      	ldrh	r3, [r5, #12]
 800897c:	059a      	lsls	r2, r3, #22
 800897e:	d402      	bmi.n	8008986 <_vfiprintf_r+0x1fe>
 8008980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008982:	f7fe f921 	bl	8006bc8 <__retarget_lock_release_recursive>
 8008986:	89ab      	ldrh	r3, [r5, #12]
 8008988:	065b      	lsls	r3, r3, #25
 800898a:	f53f af1f 	bmi.w	80087cc <_vfiprintf_r+0x44>
 800898e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008990:	e71e      	b.n	80087d0 <_vfiprintf_r+0x48>
 8008992:	ab03      	add	r3, sp, #12
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	462a      	mov	r2, r5
 8008998:	4630      	mov	r0, r6
 800899a:	4b06      	ldr	r3, [pc, #24]	@ (80089b4 <_vfiprintf_r+0x22c>)
 800899c:	a904      	add	r1, sp, #16
 800899e:	f7fd fe3f 	bl	8006620 <_printf_i>
 80089a2:	e7e4      	b.n	800896e <_vfiprintf_r+0x1e6>
 80089a4:	08009960 	.word	0x08009960
 80089a8:	08009966 	.word	0x08009966
 80089ac:	0800996a 	.word	0x0800996a
 80089b0:	080060e5 	.word	0x080060e5
 80089b4:	08008765 	.word	0x08008765

080089b8 <__swbuf_r>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	460e      	mov	r6, r1
 80089bc:	4614      	mov	r4, r2
 80089be:	4605      	mov	r5, r0
 80089c0:	b118      	cbz	r0, 80089ca <__swbuf_r+0x12>
 80089c2:	6a03      	ldr	r3, [r0, #32]
 80089c4:	b90b      	cbnz	r3, 80089ca <__swbuf_r+0x12>
 80089c6:	f7fd ffd7 	bl	8006978 <__sinit>
 80089ca:	69a3      	ldr	r3, [r4, #24]
 80089cc:	60a3      	str	r3, [r4, #8]
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	071a      	lsls	r2, r3, #28
 80089d2:	d501      	bpl.n	80089d8 <__swbuf_r+0x20>
 80089d4:	6923      	ldr	r3, [r4, #16]
 80089d6:	b943      	cbnz	r3, 80089ea <__swbuf_r+0x32>
 80089d8:	4621      	mov	r1, r4
 80089da:	4628      	mov	r0, r5
 80089dc:	f000 f82a 	bl	8008a34 <__swsetup_r>
 80089e0:	b118      	cbz	r0, 80089ea <__swbuf_r+0x32>
 80089e2:	f04f 37ff 	mov.w	r7, #4294967295
 80089e6:	4638      	mov	r0, r7
 80089e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	6922      	ldr	r2, [r4, #16]
 80089ee:	b2f6      	uxtb	r6, r6
 80089f0:	1a98      	subs	r0, r3, r2
 80089f2:	6963      	ldr	r3, [r4, #20]
 80089f4:	4637      	mov	r7, r6
 80089f6:	4283      	cmp	r3, r0
 80089f8:	dc05      	bgt.n	8008a06 <__swbuf_r+0x4e>
 80089fa:	4621      	mov	r1, r4
 80089fc:	4628      	mov	r0, r5
 80089fe:	f7ff fda9 	bl	8008554 <_fflush_r>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d1ed      	bne.n	80089e2 <__swbuf_r+0x2a>
 8008a06:	68a3      	ldr	r3, [r4, #8]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	60a3      	str	r3, [r4, #8]
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	6022      	str	r2, [r4, #0]
 8008a12:	701e      	strb	r6, [r3, #0]
 8008a14:	6962      	ldr	r2, [r4, #20]
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d004      	beq.n	8008a26 <__swbuf_r+0x6e>
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	07db      	lsls	r3, r3, #31
 8008a20:	d5e1      	bpl.n	80089e6 <__swbuf_r+0x2e>
 8008a22:	2e0a      	cmp	r6, #10
 8008a24:	d1df      	bne.n	80089e6 <__swbuf_r+0x2e>
 8008a26:	4621      	mov	r1, r4
 8008a28:	4628      	mov	r0, r5
 8008a2a:	f7ff fd93 	bl	8008554 <_fflush_r>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d0d9      	beq.n	80089e6 <__swbuf_r+0x2e>
 8008a32:	e7d6      	b.n	80089e2 <__swbuf_r+0x2a>

08008a34 <__swsetup_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4b29      	ldr	r3, [pc, #164]	@ (8008adc <__swsetup_r+0xa8>)
 8008a38:	4605      	mov	r5, r0
 8008a3a:	6818      	ldr	r0, [r3, #0]
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	b118      	cbz	r0, 8008a48 <__swsetup_r+0x14>
 8008a40:	6a03      	ldr	r3, [r0, #32]
 8008a42:	b90b      	cbnz	r3, 8008a48 <__swsetup_r+0x14>
 8008a44:	f7fd ff98 	bl	8006978 <__sinit>
 8008a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a4c:	0719      	lsls	r1, r3, #28
 8008a4e:	d422      	bmi.n	8008a96 <__swsetup_r+0x62>
 8008a50:	06da      	lsls	r2, r3, #27
 8008a52:	d407      	bmi.n	8008a64 <__swsetup_r+0x30>
 8008a54:	2209      	movs	r2, #9
 8008a56:	602a      	str	r2, [r5, #0]
 8008a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a60:	81a3      	strh	r3, [r4, #12]
 8008a62:	e033      	b.n	8008acc <__swsetup_r+0x98>
 8008a64:	0758      	lsls	r0, r3, #29
 8008a66:	d512      	bpl.n	8008a8e <__swsetup_r+0x5a>
 8008a68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a6a:	b141      	cbz	r1, 8008a7e <__swsetup_r+0x4a>
 8008a6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a70:	4299      	cmp	r1, r3
 8008a72:	d002      	beq.n	8008a7a <__swsetup_r+0x46>
 8008a74:	4628      	mov	r0, r5
 8008a76:	f7fe ff17 	bl	80078a8 <_free_r>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a84:	81a3      	strh	r3, [r4, #12]
 8008a86:	2300      	movs	r3, #0
 8008a88:	6063      	str	r3, [r4, #4]
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	f043 0308 	orr.w	r3, r3, #8
 8008a94:	81a3      	strh	r3, [r4, #12]
 8008a96:	6923      	ldr	r3, [r4, #16]
 8008a98:	b94b      	cbnz	r3, 8008aae <__swsetup_r+0x7a>
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aa4:	d003      	beq.n	8008aae <__swsetup_r+0x7a>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f000 f882 	bl	8008bb2 <__smakebuf_r>
 8008aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ab2:	f013 0201 	ands.w	r2, r3, #1
 8008ab6:	d00a      	beq.n	8008ace <__swsetup_r+0x9a>
 8008ab8:	2200      	movs	r2, #0
 8008aba:	60a2      	str	r2, [r4, #8]
 8008abc:	6962      	ldr	r2, [r4, #20]
 8008abe:	4252      	negs	r2, r2
 8008ac0:	61a2      	str	r2, [r4, #24]
 8008ac2:	6922      	ldr	r2, [r4, #16]
 8008ac4:	b942      	cbnz	r2, 8008ad8 <__swsetup_r+0xa4>
 8008ac6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008aca:	d1c5      	bne.n	8008a58 <__swsetup_r+0x24>
 8008acc:	bd38      	pop	{r3, r4, r5, pc}
 8008ace:	0799      	lsls	r1, r3, #30
 8008ad0:	bf58      	it	pl
 8008ad2:	6962      	ldrpl	r2, [r4, #20]
 8008ad4:	60a2      	str	r2, [r4, #8]
 8008ad6:	e7f4      	b.n	8008ac2 <__swsetup_r+0x8e>
 8008ad8:	2000      	movs	r0, #0
 8008ada:	e7f7      	b.n	8008acc <__swsetup_r+0x98>
 8008adc:	20000020 	.word	0x20000020

08008ae0 <_raise_r>:
 8008ae0:	291f      	cmp	r1, #31
 8008ae2:	b538      	push	{r3, r4, r5, lr}
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	d904      	bls.n	8008af4 <_raise_r+0x14>
 8008aea:	2316      	movs	r3, #22
 8008aec:	6003      	str	r3, [r0, #0]
 8008aee:	f04f 30ff 	mov.w	r0, #4294967295
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008af6:	b112      	cbz	r2, 8008afe <_raise_r+0x1e>
 8008af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008afc:	b94b      	cbnz	r3, 8008b12 <_raise_r+0x32>
 8008afe:	4628      	mov	r0, r5
 8008b00:	f000 f830 	bl	8008b64 <_getpid_r>
 8008b04:	4622      	mov	r2, r4
 8008b06:	4601      	mov	r1, r0
 8008b08:	4628      	mov	r0, r5
 8008b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b0e:	f000 b817 	b.w	8008b40 <_kill_r>
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d00a      	beq.n	8008b2c <_raise_r+0x4c>
 8008b16:	1c59      	adds	r1, r3, #1
 8008b18:	d103      	bne.n	8008b22 <_raise_r+0x42>
 8008b1a:	2316      	movs	r3, #22
 8008b1c:	6003      	str	r3, [r0, #0]
 8008b1e:	2001      	movs	r0, #1
 8008b20:	e7e7      	b.n	8008af2 <_raise_r+0x12>
 8008b22:	2100      	movs	r1, #0
 8008b24:	4620      	mov	r0, r4
 8008b26:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b2a:	4798      	blx	r3
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e7e0      	b.n	8008af2 <_raise_r+0x12>

08008b30 <raise>:
 8008b30:	4b02      	ldr	r3, [pc, #8]	@ (8008b3c <raise+0xc>)
 8008b32:	4601      	mov	r1, r0
 8008b34:	6818      	ldr	r0, [r3, #0]
 8008b36:	f7ff bfd3 	b.w	8008ae0 <_raise_r>
 8008b3a:	bf00      	nop
 8008b3c:	20000020 	.word	0x20000020

08008b40 <_kill_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	2300      	movs	r3, #0
 8008b44:	4d06      	ldr	r5, [pc, #24]	@ (8008b60 <_kill_r+0x20>)
 8008b46:	4604      	mov	r4, r0
 8008b48:	4608      	mov	r0, r1
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	602b      	str	r3, [r5, #0]
 8008b4e:	f7f9 fce4 	bl	800251a <_kill>
 8008b52:	1c43      	adds	r3, r0, #1
 8008b54:	d102      	bne.n	8008b5c <_kill_r+0x1c>
 8008b56:	682b      	ldr	r3, [r5, #0]
 8008b58:	b103      	cbz	r3, 8008b5c <_kill_r+0x1c>
 8008b5a:	6023      	str	r3, [r4, #0]
 8008b5c:	bd38      	pop	{r3, r4, r5, pc}
 8008b5e:	bf00      	nop
 8008b60:	20000a38 	.word	0x20000a38

08008b64 <_getpid_r>:
 8008b64:	f7f9 bcd2 	b.w	800250c <_getpid>

08008b68 <__swhatbuf_r>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b70:	4615      	mov	r5, r2
 8008b72:	2900      	cmp	r1, #0
 8008b74:	461e      	mov	r6, r3
 8008b76:	b096      	sub	sp, #88	@ 0x58
 8008b78:	da0c      	bge.n	8008b94 <__swhatbuf_r+0x2c>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b82:	bf14      	ite	ne
 8008b84:	2340      	movne	r3, #64	@ 0x40
 8008b86:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	6031      	str	r1, [r6, #0]
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	b016      	add	sp, #88	@ 0x58
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
 8008b94:	466a      	mov	r2, sp
 8008b96:	f000 f849 	bl	8008c2c <_fstat_r>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	dbed      	blt.n	8008b7a <__swhatbuf_r+0x12>
 8008b9e:	9901      	ldr	r1, [sp, #4]
 8008ba0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ba4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ba8:	4259      	negs	r1, r3
 8008baa:	4159      	adcs	r1, r3
 8008bac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bb0:	e7eb      	b.n	8008b8a <__swhatbuf_r+0x22>

08008bb2 <__smakebuf_r>:
 8008bb2:	898b      	ldrh	r3, [r1, #12]
 8008bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb6:	079d      	lsls	r5, r3, #30
 8008bb8:	4606      	mov	r6, r0
 8008bba:	460c      	mov	r4, r1
 8008bbc:	d507      	bpl.n	8008bce <__smakebuf_r+0x1c>
 8008bbe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bc2:	6023      	str	r3, [r4, #0]
 8008bc4:	6123      	str	r3, [r4, #16]
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	6163      	str	r3, [r4, #20]
 8008bca:	b003      	add	sp, #12
 8008bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bce:	466a      	mov	r2, sp
 8008bd0:	ab01      	add	r3, sp, #4
 8008bd2:	f7ff ffc9 	bl	8008b68 <__swhatbuf_r>
 8008bd6:	9f00      	ldr	r7, [sp, #0]
 8008bd8:	4605      	mov	r5, r0
 8008bda:	4639      	mov	r1, r7
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f7fe fed5 	bl	800798c <_malloc_r>
 8008be2:	b948      	cbnz	r0, 8008bf8 <__smakebuf_r+0x46>
 8008be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be8:	059a      	lsls	r2, r3, #22
 8008bea:	d4ee      	bmi.n	8008bca <__smakebuf_r+0x18>
 8008bec:	f023 0303 	bic.w	r3, r3, #3
 8008bf0:	f043 0302 	orr.w	r3, r3, #2
 8008bf4:	81a3      	strh	r3, [r4, #12]
 8008bf6:	e7e2      	b.n	8008bbe <__smakebuf_r+0xc>
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c02:	81a3      	strh	r3, [r4, #12]
 8008c04:	9b01      	ldr	r3, [sp, #4]
 8008c06:	6020      	str	r0, [r4, #0]
 8008c08:	b15b      	cbz	r3, 8008c22 <__smakebuf_r+0x70>
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c10:	f000 f81e 	bl	8008c50 <_isatty_r>
 8008c14:	b128      	cbz	r0, 8008c22 <__smakebuf_r+0x70>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	f023 0303 	bic.w	r3, r3, #3
 8008c1c:	f043 0301 	orr.w	r3, r3, #1
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	431d      	orrs	r5, r3
 8008c26:	81a5      	strh	r5, [r4, #12]
 8008c28:	e7cf      	b.n	8008bca <__smakebuf_r+0x18>
	...

08008c2c <_fstat_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	2300      	movs	r3, #0
 8008c30:	4d06      	ldr	r5, [pc, #24]	@ (8008c4c <_fstat_r+0x20>)
 8008c32:	4604      	mov	r4, r0
 8008c34:	4608      	mov	r0, r1
 8008c36:	4611      	mov	r1, r2
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	f7f9 fccd 	bl	80025d8 <_fstat>
 8008c3e:	1c43      	adds	r3, r0, #1
 8008c40:	d102      	bne.n	8008c48 <_fstat_r+0x1c>
 8008c42:	682b      	ldr	r3, [r5, #0]
 8008c44:	b103      	cbz	r3, 8008c48 <_fstat_r+0x1c>
 8008c46:	6023      	str	r3, [r4, #0]
 8008c48:	bd38      	pop	{r3, r4, r5, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000a38 	.word	0x20000a38

08008c50 <_isatty_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	2300      	movs	r3, #0
 8008c54:	4d05      	ldr	r5, [pc, #20]	@ (8008c6c <_isatty_r+0x1c>)
 8008c56:	4604      	mov	r4, r0
 8008c58:	4608      	mov	r0, r1
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	f7f9 fccb 	bl	80025f6 <_isatty>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d102      	bne.n	8008c6a <_isatty_r+0x1a>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b103      	cbz	r3, 8008c6a <_isatty_r+0x1a>
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	20000a38 	.word	0x20000a38

08008c70 <_init>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	bf00      	nop
 8008c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c76:	bc08      	pop	{r3}
 8008c78:	469e      	mov	lr, r3
 8008c7a:	4770      	bx	lr

08008c7c <_fini>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr
