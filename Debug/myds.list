
myds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008850  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  08008960  08008960  00009960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093b8  080093b8  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080093b8  080093b8  0000a3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093c0  080093c0  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c0  080093c0  0000a3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093c4  080093c4  0000a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080093c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  200001d8  080095a0  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ec  080095a0  0000b9ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010629  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003001  00000000  00000000  0001b82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0001e830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce1  00000000  00000000  0001f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000046f0  00000000  00000000  000205c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f20  00000000  00000000  00024cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092472  00000000  00000000  0003bbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce043  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d8  00000000  00000000  000ce088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000d3760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008948 	.word	0x08008948

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08008948 	.word	0x08008948

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <Num2Abs>:

#define LOWPASS_FILTER	0.7

//***********************************************************λ��ʽPID************************************************************//
float Num2Abs(float x)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    if(x < 0)
 80010d8:	f04f 0100 	mov.w	r1, #0
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ffcf 	bl	8001080 <__aeabi_fcmplt>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <Num2Abs+0x20>
        return -x;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80010ee:	e000      	b.n	80010f2 <Num2Abs+0x22>
    return x;
 80010f0:	687b      	ldr	r3, [r7, #4]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <PID_Init>:
PID_InitTypeDef Turn_PID;
PID_InitTypeDef Turn_PID1;
PID_InitTypeDef Turn_PID2;

void PID_Init(PID_InitTypeDef *PID_Struct, float Kpa,float Kpb,float Kd,float gkd,float Out_Limit)		//PID��ʼ��
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	603b      	str	r3, [r7, #0]
	PID_Struct->Kpa = Kpa;  
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	609a      	str	r2, [r3, #8]
    PID_Struct->Kpb = Kpb;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	60da      	str	r2, [r3, #12]
	PID_Struct->Kd = Kd;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	615a      	str	r2, [r3, #20]
    PID_Struct->gkd = gkd;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	619a      	str	r2, [r3, #24]
	
	PID_Struct->Err = 0;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
	PID_Struct->Err_last = 0;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
	
	PID_Struct->PID_Out = 0;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	625a      	str	r2, [r3, #36]	@ 0x24
	PID_Struct->Out_Limit = Out_Limit;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <PID_Calculate>:


void PID_Calculate(PID_InitTypeDef *PID_Struct, float Exp_Val, float Act_Val)		//PID����
{ 
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	PID_Struct->Err = Exp_Val-Act_Val;		//errֵΪ����ƫ���뵱ǰƫ��Ĳ�ֵ		
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	68b8      	ldr	r0, [r7, #8]
 8001158:	f7ff fcea 	bl	8000b30 <__aeabi_fsub>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	601a      	str	r2, [r3, #0]
    //�����������
//	PID_Struct->PID_Out = (PID_Struct->Err*PID_Struct->Err*PID_Struct->Err)*PID_Struct->Kpa +
//                              PID_Struct->Err *  PID_Struct->Kpb +
//									(PID_Struct->Err - PID_Struct->Err_last)*(PID_Struct->Kd);

    PID_Struct->PID_Out = PID_Struct->Err * PID_Struct->Kpa + PID_Struct->Err * Num2Abs(PID_Struct->Err)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4619      	mov	r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f7ff fde8 	bl	8000d44 <__aeabi_fmul>
 8001174:	4603      	mov	r3, r0
 8001176:	461d      	mov	r5, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681c      	ldr	r4, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ffa5 	bl	80010d0 <Num2Abs>
 8001186:	4603      	mov	r3, r0
 8001188:	4619      	mov	r1, r3
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff fdda 	bl	8000d44 <__aeabi_fmul>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
            * PID_Struct->Kpb + (PID_Struct->Err - PID_Struct->Err_last) * (PID_Struct->Kd);// + gz * PID_Struct->gkd
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f7ff fdd2 	bl	8000d44 <__aeabi_fmul>
 80011a0:	4603      	mov	r3, r0
    PID_Struct->PID_Out = PID_Struct->Err * PID_Struct->Kpa + PID_Struct->Err * Num2Abs(PID_Struct->Err)
 80011a2:	4619      	mov	r1, r3
 80011a4:	4628      	mov	r0, r5
 80011a6:	f7ff fcc5 	bl	8000b34 <__addsf3>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461c      	mov	r4, r3
            * PID_Struct->Kpb + (PID_Struct->Err - PID_Struct->Err_last) * (PID_Struct->Kd);// + gz * PID_Struct->gkd
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4619      	mov	r1, r3
 80011b8:	4610      	mov	r0, r2
 80011ba:	f7ff fcb9 	bl	8000b30 <__aeabi_fsub>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	4619      	mov	r1, r3
 80011c8:	4610      	mov	r0, r2
 80011ca:	f7ff fdbb 	bl	8000d44 <__aeabi_fmul>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4619      	mov	r1, r3
 80011d2:	4620      	mov	r0, r4
 80011d4:	f7ff fcae 	bl	8000b34 <__addsf3>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
    PID_Struct->PID_Out = PID_Struct->Err * PID_Struct->Kpa + PID_Struct->Err * Num2Abs(PID_Struct->Err)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	625a      	str	r2, [r3, #36]	@ 0x24
    
    PID_Struct->Err_last = PID_Struct->Err;	//������һ��err
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	605a      	str	r2, [r3, #4]
    
	//����޷�
	if(PID_Struct->PID_Out > PID_Struct->Out_Limit)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f7ff ff62 	bl	80010bc <__aeabi_fcmpgt>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d004      	beq.n	8001208 <PID_Calculate+0xc0>
		PID_Struct->PID_Out = PID_Struct->Out_Limit; 
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24
	else if(PID_Struct->PID_Out < -PID_Struct->Out_Limit)
		PID_Struct->PID_Out = -PID_Struct->Out_Limit;
}
 8001206:	e013      	b.n	8001230 <PID_Calculate+0xe8>
	else if(PID_Struct->PID_Out < -PID_Struct->Out_Limit)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001214:	4619      	mov	r1, r3
 8001216:	4610      	mov	r0, r2
 8001218:	f7ff ff32 	bl	8001080 <__aeabi_fcmplt>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d100      	bne.n	8001224 <PID_Calculate+0xdc>
}
 8001222:	e005      	b.n	8001230 <PID_Calculate+0xe8>
		PID_Struct->PID_Out = -PID_Struct->Out_Limit;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001228:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bdb0      	pop	{r4, r5, r7, pc}

08001238 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <MX_ADC1_Init+0x74>)
 800124a:	4a19      	ldr	r2, [pc, #100]	@ (80012b0 <MX_ADC1_Init+0x78>)
 800124c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <MX_ADC1_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <MX_ADC1_Init+0x74>)
 8001256:	2201      	movs	r2, #1
 8001258:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_ADC1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <MX_ADC1_Init+0x74>)
 8001262:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001266:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001268:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <MX_ADC1_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_ADC1_Init+0x74>)
 8001270:	2201      	movs	r2, #1
 8001272:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001274:	480d      	ldr	r0, [pc, #52]	@ (80012ac <MX_ADC1_Init+0x74>)
 8001276:	f001 fadf 	bl	8002838 <HAL_ADC_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001280:	f000 fbd5 	bl	8001a2e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001284:	2305      	movs	r3, #5
 8001286:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001288:	2301      	movs	r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_ADC1_Init+0x74>)
 8001296:	f001 fd67 	bl	8002d68 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012a0:	f000 fbc5 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000024c 	.word	0x2000024c
 80012b0:	40012400 	.word	0x40012400

080012b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a14      	ldr	r2, [pc, #80]	@ (8001320 <HAL_ADC_MspInit+0x6c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d121      	bne.n	8001318 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <HAL_ADC_MspInit+0x70>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <HAL_ADC_MspInit+0x70>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <HAL_ADC_MspInit+0x70>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <HAL_ADC_MspInit+0x70>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001324 <HAL_ADC_MspInit+0x70>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <HAL_ADC_MspInit+0x70>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001304:	2320      	movs	r3, #32
 8001306:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001308:	2303      	movs	r3, #3
 800130a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <HAL_ADC_MspInit+0x74>)
 8001314:	f002 f878 	bl	8003408 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40012400 	.word	0x40012400
 8001324:	40021000 	.word	0x40021000
 8001328:	40010800 	.word	0x40010800

0800132c <Read_Speed>:
#include "encoder.h"

int Read_Speed(TIM_HandleTypeDef *htim)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    int temp;
    temp = (short)__HAL_TIM_GetCounter(htim);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133a:	b21b      	sxth	r3, r3
 800133c:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SetCounter(htim, 0);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24
    return temp;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
	...

08001354 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001368:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <MX_GPIO_Init+0xc0>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a29      	ldr	r2, [pc, #164]	@ (8001414 <MX_GPIO_Init+0xc0>)
 800136e:	f043 0320 	orr.w	r3, r3, #32
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <MX_GPIO_Init+0xc0>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <MX_GPIO_Init+0xc0>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a23      	ldr	r2, [pc, #140]	@ (8001414 <MX_GPIO_Init+0xc0>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <MX_GPIO_Init+0xc0>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <MX_GPIO_Init+0xc0>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a1d      	ldr	r2, [pc, #116]	@ (8001414 <MX_GPIO_Init+0xc0>)
 800139e:	f043 0308 	orr.w	r3, r3, #8
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <MX_GPIO_Init+0xc0>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80013b6:	4818      	ldr	r0, [pc, #96]	@ (8001418 <MX_GPIO_Init+0xc4>)
 80013b8:	f002 f9aa 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|BIN1_Pin|BIN2_Pin;
 80013bc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	4810      	ldr	r0, [pc, #64]	@ (8001418 <MX_GPIO_Init+0xc4>)
 80013d6:	f002 f817 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin;
 80013da:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 80013de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	480b      	ldr	r0, [pc, #44]	@ (800141c <MX_GPIO_Init+0xc8>)
 80013f0:	f002 f80a 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = KEY3_Pin|KEY4_Pin|KEY5_Pin;
 80013f4:	2338      	movs	r3, #56	@ 0x38
 80013f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4619      	mov	r1, r3
 8001406:	4804      	ldr	r0, [pc, #16]	@ (8001418 <MX_GPIO_Init+0xc4>)
 8001408:	f001 fffe 	bl	8003408 <HAL_GPIO_Init>

}
 800140c:	bf00      	nop
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	40010c00 	.word	0x40010c00
 800141c:	40010800 	.word	0x40010800

08001420 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001426:	4a13      	ldr	r2, [pc, #76]	@ (8001474 <MX_I2C1_Init+0x54>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_I2C1_Init+0x50>)
 800142c:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <MX_I2C1_Init+0x58>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_I2C1_Init+0x50>)
 800143e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_I2C1_Init+0x50>)
 800145e:	f002 f96f 	bl	8003740 <HAL_I2C_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001468:	f000 fae1 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000027c 	.word	0x2000027c
 8001474:	40005400 	.word	0x40005400
 8001478:	00061a80 	.word	0x00061a80

0800147c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1d      	ldr	r2, [pc, #116]	@ (800150c <HAL_I2C_MspInit+0x90>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d132      	bne.n	8001502 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <HAL_I2C_MspInit+0x94>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001510 <HAL_I2C_MspInit+0x94>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_I2C_MspInit+0x94>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ba:	2312      	movs	r3, #18
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4812      	ldr	r0, [pc, #72]	@ (8001514 <HAL_I2C_MspInit+0x98>)
 80014ca:	f001 ff9d 	bl	8003408 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_I2C_MspInit+0x9c>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001518 <HAL_I2C_MspInit+0x9c>)
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <HAL_I2C_MspInit+0x94>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a08      	ldr	r2, [pc, #32]	@ (8001510 <HAL_I2C_MspInit+0x94>)
 80014f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_I2C_MspInit+0x94>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	@ 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40005400 	.word	0x40005400
 8001510:	40021000 	.word	0x40021000
 8001514:	40010c00 	.word	0x40010c00
 8001518:	40010000 	.word	0x40010000

0800151c <ADC_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_Read(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
  int sum = 0, max = 0, min = 4095,adc_result = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
  uint8_t i=0;
 8001534:	2300      	movs	r3, #0
 8001536:	72fb      	strb	r3, [r7, #11]
  HAL_ADC_Start(&hadc1);     //启动ADC转换
 8001538:	482a      	ldr	r0, [pc, #168]	@ (80015e4 <ADC_Read+0xc8>)
 800153a:	f001 fa55 	bl	80029e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 12);
 800153e:	210c      	movs	r1, #12
 8001540:	4828      	ldr	r0, [pc, #160]	@ (80015e4 <ADC_Read+0xc8>)
 8001542:	f001 faff 	bl	8002b44 <HAL_ADC_PollForConversion>
  for(i=1;i<=5;i++)
 8001546:	2301      	movs	r3, #1
 8001548:	72fb      	strb	r3, [r7, #11]
 800154a:	e02d      	b.n	80015a8 <ADC_Read+0x8c>
  {
    adc[i] = HAL_ADC_GetValue(&hadc1);
 800154c:	4825      	ldr	r0, [pc, #148]	@ (80015e4 <ADC_Read+0xc8>)
 800154e:	f001 fbff 	bl	8002d50 <HAL_ADC_GetValue>
 8001552:	4602      	mov	r2, r0
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	b291      	uxth	r1, r2
 8001558:	4a23      	ldr	r2, [pc, #140]	@ (80015e8 <ADC_Read+0xcc>)
 800155a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    sum += adc[i];
 800155e:	7afb      	ldrb	r3, [r7, #11]
 8001560:	4a21      	ldr	r2, [pc, #132]	@ (80015e8 <ADC_Read+0xcc>)
 8001562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001566:	461a      	mov	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	4413      	add	r3, r2
 800156c:	617b      	str	r3, [r7, #20]
    if(adc[i] > max) max = adc[i];
 800156e:	7afb      	ldrb	r3, [r7, #11]
 8001570:	4a1d      	ldr	r2, [pc, #116]	@ (80015e8 <ADC_Read+0xcc>)
 8001572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001576:	461a      	mov	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4293      	cmp	r3, r2
 800157c:	da04      	bge.n	8001588 <ADC_Read+0x6c>
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	4a19      	ldr	r2, [pc, #100]	@ (80015e8 <ADC_Read+0xcc>)
 8001582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001586:	613b      	str	r3, [r7, #16]
    if(adc[i] < min) min = adc[i];
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <ADC_Read+0xcc>)
 800158c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001590:	461a      	mov	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4293      	cmp	r3, r2
 8001596:	dd04      	ble.n	80015a2 <ADC_Read+0x86>
 8001598:	7afb      	ldrb	r3, [r7, #11]
 800159a:	4a13      	ldr	r2, [pc, #76]	@ (80015e8 <ADC_Read+0xcc>)
 800159c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015a0:	60fb      	str	r3, [r7, #12]
  for(i=1;i<=5;i++)
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	3301      	adds	r3, #1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	7afb      	ldrb	r3, [r7, #11]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d9ce      	bls.n	800154c <ADC_Read+0x30>
  }
  adc_result = (sum - max - min) / 3.0;
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad2      	subs	r2, r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ff23 	bl	8000404 <__aeabi_i2d>
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <ADC_Read+0xd0>)
 80015c4:	f7ff f8b2 	bl	800072c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fa32 	bl	8000a38 <__aeabi_d2iz>
 80015d4:	4603      	mov	r3, r0
 80015d6:	607b      	str	r3, [r7, #4]
  return adc_result;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	b29b      	uxth	r3, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2000024c 	.word	0x2000024c
 80015e8:	20000310 	.word	0x20000310
 80015ec:	40080000 	.word	0x40080000

080015f0 <Transform_adc>:

float Transform_adc(float Value) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  float result = 0;
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  if (Value > 0 && Value < 2050) {
 80015fe:	f04f 0100 	mov.w	r1, #0
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fd5a 	bl	80010bc <__aeabi_fcmpgt>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d015      	beq.n	800163a <Transform_adc+0x4a>
 800160e:	491c      	ldr	r1, [pc, #112]	@ (8001680 <Transform_adc+0x90>)
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fd35 	bl	8001080 <__aeabi_fcmplt>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00e      	beq.n	800163a <Transform_adc+0x4a>
    result = -Value / 4095 * 360;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001622:	4918      	ldr	r1, [pc, #96]	@ (8001684 <Transform_adc+0x94>)
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fc41 	bl	8000eac <__aeabi_fdiv>
 800162a:	4603      	mov	r3, r0
 800162c:	4916      	ldr	r1, [pc, #88]	@ (8001688 <Transform_adc+0x98>)
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fb88 	bl	8000d44 <__aeabi_fmul>
 8001634:	4603      	mov	r3, r0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e01d      	b.n	8001676 <Transform_adc+0x86>
  }
  else if (Value >2050 && Value < 4095) {
 800163a:	4911      	ldr	r1, [pc, #68]	@ (8001680 <Transform_adc+0x90>)
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff fd3d 	bl	80010bc <__aeabi_fcmpgt>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d016      	beq.n	8001676 <Transform_adc+0x86>
 8001648:	490e      	ldr	r1, [pc, #56]	@ (8001684 <Transform_adc+0x94>)
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fd18 	bl	8001080 <__aeabi_fcmplt>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00f      	beq.n	8001676 <Transform_adc+0x86>
    result = 360 - Value / 4095 * 360 ;
 8001656:	490b      	ldr	r1, [pc, #44]	@ (8001684 <Transform_adc+0x94>)
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fc27 	bl	8000eac <__aeabi_fdiv>
 800165e:	4603      	mov	r3, r0
 8001660:	4909      	ldr	r1, [pc, #36]	@ (8001688 <Transform_adc+0x98>)
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fb6e 	bl	8000d44 <__aeabi_fmul>
 8001668:	4603      	mov	r3, r0
 800166a:	4619      	mov	r1, r3
 800166c:	4806      	ldr	r0, [pc, #24]	@ (8001688 <Transform_adc+0x98>)
 800166e:	f7ff fa5f 	bl	8000b30 <__aeabi_fsub>
 8001672:	4603      	mov	r3, r0
 8001674:	60fb      	str	r3, [r7, #12]
  //   result = 90;
  // }
  // else if (Value == 1040) {
  //   result = -90;
  // }
  return result;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	45002000 	.word	0x45002000
 8001684:	457ff000 	.word	0x457ff000
 8001688:	43b40000 	.word	0x43b40000

0800168c <Transform_encoder>:

float Transform_encoder(float Encoder_Angle) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  float result = 0;
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  if (Encoder_Angle > 180 && Encoder_Angle < 360) {
 800169a:	4918      	ldr	r1, [pc, #96]	@ (80016fc <Transform_encoder+0x70>)
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff fd0d 	bl	80010bc <__aeabi_fcmpgt>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00d      	beq.n	80016c4 <Transform_encoder+0x38>
 80016a8:	4915      	ldr	r1, [pc, #84]	@ (8001700 <Transform_encoder+0x74>)
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fce8 	bl	8001080 <__aeabi_fcmplt>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <Transform_encoder+0x38>
    result = Encoder_Angle - 360;
 80016b6:	4912      	ldr	r1, [pc, #72]	@ (8001700 <Transform_encoder+0x74>)
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fa39 	bl	8000b30 <__aeabi_fsub>
 80016be:	4603      	mov	r3, r0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	e016      	b.n	80016f2 <Transform_encoder+0x66>
  }
  else if (Encoder_Angle < -180 && Encoder_Angle > -360) {
 80016c4:	490f      	ldr	r1, [pc, #60]	@ (8001704 <Transform_encoder+0x78>)
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fcda 	bl	8001080 <__aeabi_fcmplt>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00d      	beq.n	80016ee <Transform_encoder+0x62>
 80016d2:	490d      	ldr	r1, [pc, #52]	@ (8001708 <Transform_encoder+0x7c>)
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fcf1 	bl	80010bc <__aeabi_fcmpgt>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <Transform_encoder+0x62>
    result = Encoder_Angle + 360;
 80016e0:	4907      	ldr	r1, [pc, #28]	@ (8001700 <Transform_encoder+0x74>)
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fa26 	bl	8000b34 <__addsf3>
 80016e8:	4603      	mov	r3, r0
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	e001      	b.n	80016f2 <Transform_encoder+0x66>
  }
  else {
    result = Encoder_Angle;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	43340000 	.word	0x43340000
 8001700:	43b40000 	.word	0x43b40000
 8001704:	c3340000 	.word	0xc3340000
 8001708:	c3b40000 	.word	0xc3b40000

0800170c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if (htim == &htim2) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a42      	ldr	r2, [pc, #264]	@ (8001820 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d17c      	bne.n	8001816 <HAL_TIM_PeriodElapsedCallback+0x10a>
    adc_value = ADC_Read();
 800171c:	f7ff fefe 	bl	800151c <ADC_Read>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	4b3f      	ldr	r3, [pc, #252]	@ (8001824 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001726:	601a      	str	r2, [r3, #0]
    Encoder_Cnt = Read_Speed(&htim3);
 8001728:	483f      	ldr	r0, [pc, #252]	@ (8001828 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800172a:	f7ff fdff 	bl	800132c <Read_Speed>
 800172e:	4603      	mov	r3, r0
 8001730:	4a3e      	ldr	r2, [pc, #248]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001732:	6013      	str	r3, [r2, #0]
    Encoder_Integral += Encoder_Cnt;
 8001734:	4b3e      	ldr	r3, [pc, #248]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b3c      	ldr	r3, [pc, #240]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x120>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4413      	add	r3, r2
 800173e:	4a3c      	ldr	r2, [pc, #240]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001740:	6013      	str	r3, [r2, #0]
    Encoder_Angle = Encoder_Integral/1.5;
 8001742:	4b3b      	ldr	r3, [pc, #236]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fe5c 	bl	8000404 <__aeabi_i2d>
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b38      	ldr	r3, [pc, #224]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001752:	f7fe ffeb 	bl	800072c <__aeabi_ddiv>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff f993 	bl	8000a88 <__aeabi_d2f>
 8001762:	4603      	mov	r3, r0
 8001764:	4a34      	ldr	r2, [pc, #208]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001766:	6013      	str	r3, [r2, #0]
    if (Encoder_Integral > 540 || Encoder_Integral < -540) {
 8001768:	4b31      	ldr	r3, [pc, #196]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f5b3 7f07 	cmp.w	r3, #540	@ 0x21c
 8001770:	dc04      	bgt.n	800177c <HAL_TIM_PeriodElapsedCallback+0x70>
 8001772:	4b2f      	ldr	r3, [pc, #188]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f513 7f07 	cmn.w	r3, #540	@ 0x21c
 800177a:	da0f      	bge.n	800179c <HAL_TIM_PeriodElapsedCallback+0x90>
      Encoder_Integral = Encoder_Integral % 540;
 800177c:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a2e      	ldr	r2, [pc, #184]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001782:	fb82 1203 	smull	r1, r2, r2, r3
 8001786:	441a      	add	r2, r3
 8001788:	1251      	asrs	r1, r2, #9
 800178a:	17da      	asrs	r2, r3, #31
 800178c:	1a8a      	subs	r2, r1, r2
 800178e:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 8001792:	fb01 f202 	mul.w	r2, r1, r2
 8001796:	1a9a      	subs	r2, r3, r2
 8001798:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800179a:	601a      	str	r2, [r3, #0]
    }
    adc_result = Transform_adc(adc_value);
 800179c:	4b21      	ldr	r3, [pc, #132]	@ (8001824 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fa77 	bl	8000c94 <__aeabi_ui2f>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff21 	bl	80015f0 <Transform_adc>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a23      	ldr	r2, [pc, #140]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80017b2:	6013      	str	r3, [r2, #0]
    encoder_result = Transform_encoder(Encoder_Angle);
 80017b4:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff67 	bl	800168c <Transform_encoder>
 80017be:	4603      	mov	r3, r0
 80017c0:	4a20      	ldr	r2, [pc, #128]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80017c2:	6013      	str	r3, [r2, #0]
    //   Load(0);
    // }
    // else {
    //   Load(2000);
    // }
    PID_Calculate(&Turn_PID1, 2050 - Encoder_Angle, adc_value);
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	481f      	ldr	r0, [pc, #124]	@ (8001848 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80017cc:	f7ff f9b0 	bl	8000b30 <__aeabi_fsub>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461c      	mov	r4, r3
 80017d4:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fa5b 	bl	8000c94 <__aeabi_ui2f>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4621      	mov	r1, r4
 80017e4:	4819      	ldr	r0, [pc, #100]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80017e6:	f7ff fcaf 	bl	8001148 <PID_Calculate>
    PID_Calculate(&Turn_PID2, Encoder_Cnt+Turn_PID1.PID_Out, 0);
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fa54 	bl	8000c9c <__aeabi_i2f>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	4610      	mov	r0, r2
 80017fe:	f7ff f999 	bl	8000b34 <__addsf3>
 8001802:	4603      	mov	r3, r0
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	4811      	ldr	r0, [pc, #68]	@ (8001850 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800180c:	f7ff fc9c 	bl	8001148 <PID_Calculate>
    Load(0);
 8001810:	2000      	movs	r0, #0
 8001812:	f000 f913 	bl	8001a3c <Load>
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}
 800181e:	bf00      	nop
 8001820:	200007c4 	.word	0x200007c4
 8001824:	20000308 	.word	0x20000308
 8001828:	2000080c 	.word	0x2000080c
 800182c:	200002e4 	.word	0x200002e4
 8001830:	200002ec 	.word	0x200002ec
 8001834:	3ff80000 	.word	0x3ff80000
 8001838:	200002e8 	.word	0x200002e8
 800183c:	f2b9d649 	.word	0xf2b9d649
 8001840:	2000030c 	.word	0x2000030c
 8001844:	200002f0 	.word	0x200002f0
 8001848:	45002000 	.word	0x45002000
 800184c:	200001f4 	.word	0x200001f4
 8001850:	20000220 	.word	0x20000220

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185a:	f000 ff8b 	bl	8002774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185e:	f000 f88b 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001862:	f7ff fd77 	bl	8001354 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001866:	f7ff fddb 	bl	8001420 <MX_I2C1_Init>
  MX_TIM4_Init();
 800186a:	f000 fe3d 	bl	80024e8 <MX_TIM4_Init>
  MX_TIM3_Init();
 800186e:	f000 fde7 	bl	8002440 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001872:	f000 fd99 	bl	80023a8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001876:	f7ff fcdf 	bl	8001238 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800187a:	f000 f93d 	bl	8001af8 <OLED_Init>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800187e:	2100      	movs	r1, #0
 8001880:	482a      	ldr	r0, [pc, #168]	@ (800192c <main+0xd8>)
 8001882:	f003 fa6f 	bl	8004d64 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001886:	482a      	ldr	r0, [pc, #168]	@ (8001930 <main+0xdc>)
 8001888:	f003 f9c2 	bl	8004c10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800188c:	213c      	movs	r1, #60	@ 0x3c
 800188e:	4829      	ldr	r0, [pc, #164]	@ (8001934 <main+0xe0>)
 8001890:	f003 fbac 	bl	8004fec <HAL_TIM_Encoder_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001894:	4828      	ldr	r0, [pc, #160]	@ (8001938 <main+0xe4>)
 8001896:	f001 fbfb 	bl	8003090 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);     //启动ADC转换
 800189a:	4827      	ldr	r0, [pc, #156]	@ (8001938 <main+0xe4>)
 800189c:	f001 f8a4 	bl	80029e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	4824      	ldr	r0, [pc, #144]	@ (8001938 <main+0xe4>)
 80018a6:	f001 f94d 	bl	8002b44 <HAL_ADC_PollForConversion>
  PID_Init(&Turn_PID1, -0.2, 0, -0.3, 0, 1000); // -0.2    -0.5
 80018aa:	4b24      	ldr	r3, [pc, #144]	@ (800193c <main+0xe8>)
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <main+0xec>)
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4922      	ldr	r1, [pc, #136]	@ (8001944 <main+0xf0>)
 80018bc:	4822      	ldr	r0, [pc, #136]	@ (8001948 <main+0xf4>)
 80018be:	f7ff fc1c 	bl	80010fa <PID_Init>
  PID_Init(&Turn_PID2, -720, 0, -100, 0, 7200);  //-1200  -150
 80018c2:	4b22      	ldr	r3, [pc, #136]	@ (800194c <main+0xf8>)
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <main+0xfc>)
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4920      	ldr	r1, [pc, #128]	@ (8001954 <main+0x100>)
 80018d4:	4820      	ldr	r0, [pc, #128]	@ (8001958 <main+0x104>)
 80018d6:	f7ff fc10 	bl	80010fa <PID_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    OLED_NewFrame();
 80018da:	f000 f969 	bl	8001bb0 <OLED_NewFrame>
    sprintf(message_adc, "adc: %d", adc_value);
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <main+0x108>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	491e      	ldr	r1, [pc, #120]	@ (8001960 <main+0x10c>)
 80018e6:	481f      	ldr	r0, [pc, #124]	@ (8001964 <main+0x110>)
 80018e8:	f004 feea 	bl	80066c0 <siprintf>
    OLED_PrintString(0, 0, message_adc, &font16x16, OLED_COLOR_NORMAL);
 80018ec:	2300      	movs	r3, #0
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <main+0x114>)
 80018f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001964 <main+0x110>)
 80018f4:	2100      	movs	r1, #0
 80018f6:	2000      	movs	r0, #0
 80018f8:	f000 fb7f 	bl	8001ffa <OLED_PrintString>
    sprintf(message_encoder, "angle: %.2f", encoder_result);
 80018fc:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <main+0x118>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fd91 	bl	8000428 <__aeabi_f2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4919      	ldr	r1, [pc, #100]	@ (8001970 <main+0x11c>)
 800190c:	4819      	ldr	r0, [pc, #100]	@ (8001974 <main+0x120>)
 800190e:	f004 fed7 	bl	80066c0 <siprintf>
    OLED_PrintString(0, 17, message_encoder, &font16x16, OLED_COLOR_NORMAL);
 8001912:	2300      	movs	r3, #0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <main+0x114>)
 8001918:	4a16      	ldr	r2, [pc, #88]	@ (8001974 <main+0x120>)
 800191a:	2111      	movs	r1, #17
 800191c:	2000      	movs	r0, #0
 800191e:	f000 fb6c 	bl	8001ffa <OLED_PrintString>
    OLED_ShowFrame();
 8001922:	f000 f951 	bl	8001bc8 <OLED_ShowFrame>
    OLED_NewFrame();
 8001926:	bf00      	nop
 8001928:	e7d7      	b.n	80018da <main+0x86>
 800192a:	bf00      	nop
 800192c:	20000854 	.word	0x20000854
 8001930:	200007c4 	.word	0x200007c4
 8001934:	2000080c 	.word	0x2000080c
 8001938:	2000024c 	.word	0x2000024c
 800193c:	447a0000 	.word	0x447a0000
 8001940:	be99999a 	.word	0xbe99999a
 8001944:	be4ccccd 	.word	0xbe4ccccd
 8001948:	200001f4 	.word	0x200001f4
 800194c:	45e10000 	.word	0x45e10000
 8001950:	c2c80000 	.word	0xc2c80000
 8001954:	c4340000 	.word	0xc4340000
 8001958:	20000220 	.word	0x20000220
 800195c:	20000308 	.word	0x20000308
 8001960:	08008960 	.word	0x08008960
 8001964:	200002f4 	.word	0x200002f4
 8001968:	08008ffc 	.word	0x08008ffc
 800196c:	200002f0 	.word	0x200002f0
 8001970:	08008968 	.word	0x08008968
 8001974:	200002d0 	.word	0x200002d0

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	@ 0x50
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001982:	2228      	movs	r2, #40	@ 0x28
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f004 ff0d 	bl	80067a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b6:	2301      	movs	r3, #1
 80019b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ba:	2302      	movs	r3, #2
 80019bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019c4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80019c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 fb52 	bl	8004078 <HAL_RCC_OscConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019da:	f000 f828 	bl	8001a2e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019de:	230f      	movs	r3, #15
 80019e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2102      	movs	r1, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fdbe 	bl	800457c <HAL_RCC_ClockConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a06:	f000 f812 	bl	8001a2e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a12:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 ff3e 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a22:	f000 f804 	bl	8001a2e <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3750      	adds	r7, #80	@ 0x50
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a32:	b672      	cpsid	i
}
 8001a34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a36:	bf00      	nop
 8001a38:	e7fd      	b.n	8001a36 <Error_Handler+0x8>
	...

08001a3c <Load>:
        return -n;
    }
}

void Load(int moto1)   //-7200~7200
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    if(moto1 < 0)   //顺时针 编码器从65535开始
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da0c      	bge.n	8001a64 <Load+0x28>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);     //AIN1 = 0;
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a50:	4812      	ldr	r0, [pc, #72]	@ (8001a9c <Load+0x60>)
 8001a52:	f001 fe5d 	bl	8003710 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);       //AIN2 = 1;
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a5c:	480f      	ldr	r0, [pc, #60]	@ (8001a9c <Load+0x60>)
 8001a5e:	f001 fe57 	bl	8003710 <HAL_GPIO_WritePin>
 8001a62:	e00b      	b.n	8001a7c <Load+0x40>
    }
    else            //逆时针 编码器从0开始
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);      //AIN1 = 1;
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a6a:	480c      	ldr	r0, [pc, #48]	@ (8001a9c <Load+0x60>)
 8001a6c:	f001 fe50 	bl	8003710 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);    //AIN2 = 0;
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a76:	4809      	ldr	r0, [pc, #36]	@ (8001a9c <Load+0x60>)
 8001a78:	f001 fe4a 	bl	8003710 <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, abs(moto1) + dead_area);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a82:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <Load+0x64>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	441a      	add	r2, r3
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <Load+0x68>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40010c00 	.word	0x40010c00
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000854 	.word	0x20000854

08001aa8 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	9200      	str	r2, [sp, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	2178      	movs	r1, #120	@ 0x78
 8001ac2:	4803      	ldr	r0, [pc, #12]	@ (8001ad0 <OLED_Send+0x28>)
 8001ac4:	f001 ff80 	bl	80039c8 <HAL_I2C_Master_Transmit>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2000027c 	.word	0x2000027c

08001ad4 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8001ade:	4a05      	ldr	r2, [pc, #20]	@ (8001af4 <OLED_SendCmd+0x20>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	4803      	ldr	r0, [pc, #12]	@ (8001af4 <OLED_SendCmd+0x20>)
 8001ae8:	f7ff ffde 	bl	8001aa8 <OLED_Send>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000738 	.word	0x20000738

08001af8 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8001afc:	20ae      	movs	r0, #174	@ 0xae
 8001afe:	f7ff ffe9 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8001b02:	2020      	movs	r0, #32
 8001b04:	f7ff ffe6 	bl	8001ad4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001b08:	2010      	movs	r0, #16
 8001b0a:	f7ff ffe3 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8001b0e:	20b0      	movs	r0, #176	@ 0xb0
 8001b10:	f7ff ffe0 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8001b14:	20c8      	movs	r0, #200	@ 0xc8
 8001b16:	f7ff ffdd 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff ffda 	bl	8001ad4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001b20:	2010      	movs	r0, #16
 8001b22:	f7ff ffd7 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8001b26:	2040      	movs	r0, #64	@ 0x40
 8001b28:	f7ff ffd4 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8001b2c:	2081      	movs	r0, #129	@ 0x81
 8001b2e:	f7ff ffd1 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8001b32:	20df      	movs	r0, #223	@ 0xdf
 8001b34:	f7ff ffce 	bl	8001ad4 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8001b38:	20a1      	movs	r0, #161	@ 0xa1
 8001b3a:	f7ff ffcb 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8001b3e:	20a6      	movs	r0, #166	@ 0xa6
 8001b40:	f7ff ffc8 	bl	8001ad4 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8001b44:	20a8      	movs	r0, #168	@ 0xa8
 8001b46:	f7ff ffc5 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8001b4a:	203f      	movs	r0, #63	@ 0x3f
 8001b4c:	f7ff ffc2 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8001b50:	20a4      	movs	r0, #164	@ 0xa4
 8001b52:	f7ff ffbf 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8001b56:	20d3      	movs	r0, #211	@ 0xd3
 8001b58:	f7ff ffbc 	bl	8001ad4 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff ffb9 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8001b62:	20d5      	movs	r0, #213	@ 0xd5
 8001b64:	f7ff ffb6 	bl	8001ad4 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8001b68:	20f0      	movs	r0, #240	@ 0xf0
 8001b6a:	f7ff ffb3 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8001b6e:	20d9      	movs	r0, #217	@ 0xd9
 8001b70:	f7ff ffb0 	bl	8001ad4 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8001b74:	2022      	movs	r0, #34	@ 0x22
 8001b76:	f7ff ffad 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8001b7a:	20da      	movs	r0, #218	@ 0xda
 8001b7c:	f7ff ffaa 	bl	8001ad4 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001b80:	2012      	movs	r0, #18
 8001b82:	f7ff ffa7 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8001b86:	20db      	movs	r0, #219	@ 0xdb
 8001b88:	f7ff ffa4 	bl	8001ad4 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8001b8c:	2020      	movs	r0, #32
 8001b8e:	f7ff ffa1 	bl	8001ad4 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8001b92:	208d      	movs	r0, #141	@ 0x8d
 8001b94:	f7ff ff9e 	bl	8001ad4 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8001b98:	2014      	movs	r0, #20
 8001b9a:	f7ff ff9b 	bl	8001ad4 <OLED_SendCmd>

  OLED_NewFrame();
 8001b9e:	f000 f807 	bl	8001bb0 <OLED_NewFrame>
  OLED_ShowFrame();
 8001ba2:	f000 f811 	bl	8001bc8 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001ba6:	20af      	movs	r0, #175	@ 0xaf
 8001ba8:	f7ff ff94 	bl	8001ad4 <OLED_SendCmd>
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001bb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <OLED_NewFrame+0x14>)
 8001bbc:	f004 fdf3 	bl	80067a6 <memset>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000338 	.word	0x20000338

08001bc8 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8001bce:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <OLED_ShowFrame+0x5c>)
 8001bd0:	2240      	movs	r2, #64	@ 0x40
 8001bd2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	e01b      	b.n	8001c12 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	3b50      	subs	r3, #80	@ 0x50
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff77 	bl	8001ad4 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff ff74 	bl	8001ad4 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001bec:	2010      	movs	r0, #16
 8001bee:	f7ff ff71 	bl	8001ad4 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8001bf2:	480d      	ldr	r0, [pc, #52]	@ (8001c28 <OLED_ShowFrame+0x60>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	01db      	lsls	r3, r3, #7
 8001bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8001c2c <OLED_ShowFrame+0x64>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f004 fe5f 	bl	80068c2 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001c04:	2181      	movs	r1, #129	@ 0x81
 8001c06:	4807      	ldr	r0, [pc, #28]	@ (8001c24 <OLED_ShowFrame+0x5c>)
 8001c08:	f7ff ff4e 	bl	8001aa8 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	71fb      	strb	r3, [r7, #7]
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b07      	cmp	r3, #7
 8001c16:	d9e0      	bls.n	8001bda <OLED_ShowFrame+0x12>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000073c 	.word	0x2000073c
 8001c28:	2000073d 	.word	0x2000073d
 8001c2c:	20000338 	.word	0x20000338

08001c30 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8001c30:	b490      	push	{r4, r7}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4604      	mov	r4, r0
 8001c38:	4608      	mov	r0, r1
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	71fb      	strb	r3, [r7, #7]
 8001c42:	4603      	mov	r3, r0
 8001c44:	71bb      	strb	r3, [r7, #6]
 8001c46:	460b      	mov	r3, r1
 8001c48:	717b      	strb	r3, [r7, #5]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2b07      	cmp	r3, #7
 8001c52:	d860      	bhi.n	8001d16 <OLED_SetByte_Fine+0xe6>
 8001c54:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db5c      	blt.n	8001d16 <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 8001c5c:	7d3b      	ldrb	r3, [r7, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8001c62:	797b      	ldrb	r3, [r7, #5]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8001c68:	7c3b      	ldrb	r3, [r7, #16]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	22ff      	movs	r2, #255	@ 0xff
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	b25a      	sxtb	r2, r3
 8001c74:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b25a      	sxtb	r2, r3
 8001c7c:	793b      	ldrb	r3, [r7, #4]
 8001c7e:	f1c3 0308 	rsb	r3, r3, #8
 8001c82:	21ff      	movs	r1, #255	@ 0xff
 8001c84:	fa41 f303 	asr.w	r3, r1, r3
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <OLED_SetByte_Fine+0xf0>)
 8001c92:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001c94:	79fa      	ldrb	r2, [r7, #7]
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	4922      	ldr	r1, [pc, #136]	@ (8001d24 <OLED_SetByte_Fine+0xf4>)
 8001c9a:	01d2      	lsls	r2, r2, #7
 8001c9c:	440a      	add	r2, r1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	7818      	ldrb	r0, [r3, #0]
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <OLED_SetByte_Fine+0xf0>)
 8001ca4:	7819      	ldrb	r1, [r3, #0]
 8001ca6:	79fa      	ldrb	r2, [r7, #7]
 8001ca8:	79bb      	ldrb	r3, [r7, #6]
 8001caa:	4001      	ands	r1, r0
 8001cac:	b2c8      	uxtb	r0, r1
 8001cae:	491d      	ldr	r1, [pc, #116]	@ (8001d24 <OLED_SetByte_Fine+0xf4>)
 8001cb0:	01d2      	lsls	r2, r2, #7
 8001cb2:	440a      	add	r2, r1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8001cba:	7c3b      	ldrb	r3, [r7, #16]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	22ff      	movs	r2, #255	@ 0xff
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	b25a      	sxtb	r2, r3
 8001cca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	b25a      	sxtb	r2, r3
 8001cd2:	793b      	ldrb	r3, [r7, #4]
 8001cd4:	f1c3 0308 	rsb	r3, r3, #8
 8001cd8:	21ff      	movs	r1, #255	@ 0xff
 8001cda:	fa41 f303 	asr.w	r3, r1, r3
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <OLED_SetByte_Fine+0xf0>)
 8001cec:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8001cee:	79fa      	ldrb	r2, [r7, #7]
 8001cf0:	79bb      	ldrb	r3, [r7, #6]
 8001cf2:	490c      	ldr	r1, [pc, #48]	@ (8001d24 <OLED_SetByte_Fine+0xf4>)
 8001cf4:	01d2      	lsls	r2, r2, #7
 8001cf6:	440a      	add	r2, r1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	7818      	ldrb	r0, [r3, #0]
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <OLED_SetByte_Fine+0xf0>)
 8001cfe:	7819      	ldrb	r1, [r3, #0]
 8001d00:	79fa      	ldrb	r2, [r7, #7]
 8001d02:	79bb      	ldrb	r3, [r7, #6]
 8001d04:	4301      	orrs	r1, r0
 8001d06:	b2c8      	uxtb	r0, r1
 8001d08:	4906      	ldr	r1, [pc, #24]	@ (8001d24 <OLED_SetByte_Fine+0xf4>)
 8001d0a:	01d2      	lsls	r2, r2, #7
 8001d0c:	440a      	add	r2, r1
 8001d0e:	4413      	add	r3, r2
 8001d10:	4602      	mov	r2, r0
 8001d12:	701a      	strb	r2, [r3, #0]
 8001d14:	e000      	b.n	8001d18 <OLED_SetByte_Fine+0xe8>
    return;
 8001d16:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc90      	pop	{r4, r7}
 8001d1e:	4770      	bx	lr
 8001d20:	200007bd 	.word	0x200007bd
 8001d24:	20000338 	.word	0x20000338

08001d28 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	4604      	mov	r4, r0
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4623      	mov	r3, r4
 8001d38:	71fb      	strb	r3, [r7, #7]
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71bb      	strb	r3, [r7, #6]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	717b      	strb	r3, [r7, #5]
 8001d42:	4613      	mov	r3, r2
 8001d44:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001d4c:	79bb      	ldrb	r3, [r7, #6]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8001d54:	7bba      	ldrb	r2, [r7, #14]
 8001d56:	793b      	ldrb	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	dd29      	ble.n	8001db2 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8001d5e:	797a      	ldrb	r2, [r7, #5]
 8001d60:	7bbb      	ldrb	r3, [r7, #14]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	7bbc      	ldrb	r4, [r7, #14]
 8001d6a:	79f9      	ldrb	r1, [r7, #7]
 8001d6c:	7bf8      	ldrb	r0, [r7, #15]
 8001d6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	2307      	movs	r3, #7
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	4623      	mov	r3, r4
 8001d7a:	f7ff ff59 	bl	8001c30 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	3301      	adds	r3, #1
 8001d82:	b2d8      	uxtb	r0, r3
 8001d84:	797a      	ldrb	r2, [r7, #5]
 8001d86:	7bbb      	ldrb	r3, [r7, #14]
 8001d88:	f1c3 0308 	rsb	r3, r3, #8
 8001d8c:	fa42 f303 	asr.w	r3, r2, r3
 8001d90:	b2dc      	uxtb	r4, r3
 8001d92:	793a      	ldrb	r2, [r7, #4]
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	4413      	add	r3, r2
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	3b09      	subs	r3, #9
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	79f9      	ldrb	r1, [r7, #7]
 8001da0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001da4:	9201      	str	r2, [sp, #4]
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2300      	movs	r3, #0
 8001daa:	4622      	mov	r2, r4
 8001dac:	f7ff ff40 	bl	8001c30 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8001db0:	e015      	b.n	8001dde <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8001db2:	797a      	ldrb	r2, [r7, #5]
 8001db4:	7bbb      	ldrb	r3, [r7, #14]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	b2dc      	uxtb	r4, r3
 8001dbc:	7bba      	ldrb	r2, [r7, #14]
 8001dbe:	793b      	ldrb	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	7bbd      	ldrb	r5, [r7, #14]
 8001dca:	79f9      	ldrb	r1, [r7, #7]
 8001dcc:	7bf8      	ldrb	r0, [r7, #15]
 8001dce:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dd2:	9201      	str	r2, [sp, #4]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	462b      	mov	r3, r5
 8001dd8:	4622      	mov	r2, r4
 8001dda:	f7ff ff29 	bl	8001c30 <OLED_SetByte_Fine>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bdb0      	pop	{r4, r5, r7, pc}

08001de6 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8001de6:	b590      	push	{r4, r7, lr}
 8001de8:	b087      	sub	sp, #28
 8001dea:	af02      	add	r7, sp, #8
 8001dec:	4604      	mov	r4, r0
 8001dee:	4608      	mov	r0, r1
 8001df0:	4611      	mov	r1, r2
 8001df2:	461a      	mov	r2, r3
 8001df4:	4623      	mov	r3, r4
 8001df6:	71fb      	strb	r3, [r7, #7]
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71bb      	strb	r3, [r7, #6]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	717b      	strb	r3, [r7, #5]
 8001e00:	4613      	mov	r3, r2
 8001e02:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001e04:	79bb      	ldrb	r3, [r7, #6]
 8001e06:	08db      	lsrs	r3, r3, #3
 8001e08:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001e0a:	79bb      	ldrb	r3, [r7, #6]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8001e12:	797a      	ldrb	r2, [r7, #5]
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	7bbc      	ldrb	r4, [r7, #14]
 8001e1e:	79f9      	ldrb	r1, [r7, #7]
 8001e20:	7bf8      	ldrb	r0, [r7, #15]
 8001e22:	793b      	ldrb	r3, [r7, #4]
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	2307      	movs	r3, #7
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	4623      	mov	r3, r4
 8001e2c:	f7ff ff00 	bl	8001c30 <OLED_SetByte_Fine>
  if (bit)
 8001e30:	7bbb      	ldrb	r3, [r7, #14]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d014      	beq.n	8001e60 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	b2d8      	uxtb	r0, r3
 8001e3c:	797a      	ldrb	r2, [r7, #5]
 8001e3e:	7bbb      	ldrb	r3, [r7, #14]
 8001e40:	f1c3 0308 	rsb	r3, r3, #8
 8001e44:	fa42 f303 	asr.w	r3, r2, r3
 8001e48:	b2dc      	uxtb	r4, r3
 8001e4a:	7bbb      	ldrb	r3, [r7, #14]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	79f9      	ldrb	r1, [r7, #7]
 8001e52:	793a      	ldrb	r2, [r7, #4]
 8001e54:	9201      	str	r2, [sp, #4]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	f7ff fee8 	bl	8001c30 <OLED_SetByte_Fine>
  }
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}

08001e68 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	603a      	str	r2, [r7, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	460b      	mov	r3, r1
 8001e78:	71bb      	strb	r3, [r7, #6]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8001e7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8001e86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e025      	b.n	8001ee2 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	73bb      	strb	r3, [r7, #14]
 8001e9a:	e01b      	b.n	8001ed4 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001e9c:	79fa      	ldrb	r2, [r7, #7]
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2d8      	uxtb	r0, r3
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	4413      	add	r3, r2
 8001eae:	b2dc      	uxtb	r4, r3
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	7bbb      	ldrb	r3, [r7, #14]
 8001eb4:	7979      	ldrb	r1, [r7, #5]
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	4413      	add	r3, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	781a      	ldrb	r2, [r3, #0]
 8001ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ec8:	4621      	mov	r1, r4
 8001eca:	f7ff ff8c 	bl	8001de6 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8001ece:	7bbb      	ldrb	r3, [r7, #14]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	73bb      	strb	r3, [r7, #14]
 8001ed4:	7bba      	ldrb	r2, [r7, #14]
 8001ed6:	7b3b      	ldrb	r3, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d3df      	bcc.n	8001e9c <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	797b      	ldrb	r3, [r7, #5]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d3d5      	bcc.n	8001e96 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8001eea:	7afb      	ldrb	r3, [r7, #11]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d028      	beq.n	8001f42 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8001ef0:	797b      	ldrb	r3, [r7, #5]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	7b3a      	ldrb	r2, [r7, #12]
 8001ef6:	b292      	uxth	r2, r2
 8001ef8:	fb02 f303 	mul.w	r3, r2, r3
 8001efc:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	737b      	strb	r3, [r7, #13]
 8001f02:	e01a      	b.n	8001f3a <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8001f04:	79fa      	ldrb	r2, [r7, #7]
 8001f06:	7b7b      	ldrb	r3, [r7, #13]
 8001f08:	4413      	add	r3, r2
 8001f0a:	b2d8      	uxtb	r0, r3
 8001f0c:	7b3b      	ldrb	r3, [r7, #12]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	79bb      	ldrb	r3, [r7, #6]
 8001f14:	4413      	add	r3, r2
 8001f16:	b2d9      	uxtb	r1, r3
 8001f18:	893a      	ldrh	r2, [r7, #8]
 8001f1a:	7b7b      	ldrb	r3, [r7, #13]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	461a      	mov	r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	7afc      	ldrb	r4, [r7, #11]
 8001f28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	4623      	mov	r3, r4
 8001f30:	f7ff fefa 	bl	8001d28 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8001f34:	7b7b      	ldrb	r3, [r7, #13]
 8001f36:	3301      	adds	r3, #1
 8001f38:	737b      	strb	r3, [r7, #13]
 8001f3a:	7b7a      	ldrb	r2, [r7, #13]
 8001f3c:	797b      	ldrb	r3, [r7, #5]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d3e0      	bcc.n	8001f04 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}

08001f4a <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8001f4a:	b5b0      	push	{r4, r5, r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af02      	add	r7, sp, #8
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	460b      	mov	r3, r1
 8001f58:	71bb      	strb	r3, [r7, #6]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	797b      	ldrb	r3, [r7, #5]
 8001f64:	f1a3 0120 	sub.w	r1, r3, #32
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	3307      	adds	r3, #7
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da00      	bge.n	8001f74 <OLED_PrintASCIIChar+0x2a>
 8001f72:	3307      	adds	r3, #7
 8001f74:	10db      	asrs	r3, r3, #3
 8001f76:	4618      	mov	r0, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	785b      	ldrb	r3, [r3, #1]
 8001f7c:	fb00 f303 	mul.w	r3, r0, r3
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	18d4      	adds	r4, r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	785d      	ldrb	r5, [r3, #1]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	79b9      	ldrb	r1, [r7, #6]
 8001f90:	79f8      	ldrb	r0, [r7, #7]
 8001f92:	7e3a      	ldrb	r2, [r7, #24]
 8001f94:	9201      	str	r2, [sp, #4]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	462b      	mov	r3, r5
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	f7ff ff64 	bl	8001e68 <OLED_SetBlock>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bdb0      	pop	{r4, r5, r7, pc}

08001fa8 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b25b      	sxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db01      	blt.n	8001fbe <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e018      	b.n	8001ff0 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001fc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8001fc8:	d101      	bne.n	8001fce <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e010      	b.n	8001ff0 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fd6:	2be0      	cmp	r3, #224	@ 0xe0
 8001fd8:	d101      	bne.n	8001fde <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e008      	b.n	8001ff0 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8001fe6:	2bf0      	cmp	r3, #240	@ 0xf0
 8001fe8:	d101      	bne.n	8001fee <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8001fea:	2304      	movs	r3, #4
 8001fec:	e000      	b.n	8001ff0 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8001ffa:	b5b0      	push	{r4, r5, r7, lr}
 8001ffc:	b08a      	sub	sp, #40	@ 0x28
 8001ffe:	af02      	add	r7, sp, #8
 8002000:	60ba      	str	r2, [r7, #8]
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	4603      	mov	r3, r0
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	460b      	mov	r3, r1
 800200a:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 800200c:	2300      	movs	r3, #0
 800200e:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	3307      	adds	r3, #7
 8002016:	2b00      	cmp	r3, #0
 8002018:	da00      	bge.n	800201c <OLED_PrintString+0x22>
 800201a:	3307      	adds	r3, #7
 800201c:	10db      	asrs	r3, r3, #3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	7852      	ldrb	r2, [r2, #1]
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3304      	adds	r3, #4
 800202c:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 800202e:	e07d      	b.n	800212c <OLED_PrintString+0x132>
  {
    found = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8002034:	8bfb      	ldrh	r3, [r7, #30]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	4413      	add	r3, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ffb4 	bl	8001fa8 <_OLED_GetUTF8Len>
 8002040:	4603      	mov	r3, r0
 8002042:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8002044:	7ebb      	ldrb	r3, [r7, #26]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d078      	beq.n	800213c <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 800204a:	2300      	movs	r3, #0
 800204c:	773b      	strb	r3, [r7, #28]
 800204e:	e032      	b.n	80020b6 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	7f3a      	ldrb	r2, [r7, #28]
 8002056:	7ef9      	ldrb	r1, [r7, #27]
 8002058:	fb01 f202 	mul.w	r2, r1, r2
 800205c:	4413      	add	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8002060:	8bfb      	ldrh	r3, [r7, #30]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	4413      	add	r3, r2
 8002066:	7eba      	ldrb	r2, [r7, #26]
 8002068:	6979      	ldr	r1, [r7, #20]
 800206a:	4618      	mov	r0, r3
 800206c:	f004 fb8b 	bl	8006786 <memcmp>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d11c      	bne.n	80020b0 <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	1d1c      	adds	r4, r3, #4
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	785d      	ldrb	r5, [r3, #1]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	7bb9      	ldrb	r1, [r7, #14]
 8002084:	7bf8      	ldrb	r0, [r7, #15]
 8002086:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800208a:	9201      	str	r2, [sp, #4]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	462b      	mov	r3, r5
 8002090:	4622      	mov	r2, r4
 8002092:	f7ff fee9 	bl	8001e68 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	785a      	ldrb	r2, [r3, #1]
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	4413      	add	r3, r2
 800209e:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80020a0:	7ebb      	ldrb	r3, [r7, #26]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	8bfb      	ldrh	r3, [r7, #30]
 80020a6:	4413      	add	r3, r2
 80020a8:	83fb      	strh	r3, [r7, #30]
        found = 1;
 80020aa:	2301      	movs	r3, #1
 80020ac:	777b      	strb	r3, [r7, #29]
        break;
 80020ae:	e007      	b.n	80020c0 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 80020b0:	7f3b      	ldrb	r3, [r7, #28]
 80020b2:	3301      	adds	r3, #1
 80020b4:	773b      	strb	r3, [r7, #28]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7a1b      	ldrb	r3, [r3, #8]
 80020ba:	7f3a      	ldrb	r2, [r7, #28]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3c7      	bcc.n	8002050 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 80020c0:	7f7b      	ldrb	r3, [r7, #29]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d132      	bne.n	800212c <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 80020c6:	7ebb      	ldrb	r3, [r7, #26]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d119      	bne.n	8002100 <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 80020cc:	8bfb      	ldrh	r3, [r7, #30]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4413      	add	r3, r2
 80020d2:	781a      	ldrb	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68dc      	ldr	r4, [r3, #12]
 80020d8:	7bb9      	ldrb	r1, [r7, #14]
 80020da:	7bf8      	ldrb	r0, [r7, #15]
 80020dc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4623      	mov	r3, r4
 80020e4:	f7ff ff31 	bl	8001f4a <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	785a      	ldrb	r2, [r3, #1]
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	4413      	add	r3, r2
 80020f2:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80020f4:	7ebb      	ldrb	r3, [r7, #26]
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	8bfb      	ldrh	r3, [r7, #30]
 80020fa:	4413      	add	r3, r2
 80020fc:	83fb      	strh	r3, [r7, #30]
 80020fe:	e015      	b.n	800212c <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	7bb9      	ldrb	r1, [r7, #14]
 8002106:	7bf8      	ldrb	r0, [r7, #15]
 8002108:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	2220      	movs	r2, #32
 8002112:	f7ff ff1a 	bl	8001f4a <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	785a      	ldrb	r2, [r3, #1]
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	4413      	add	r3, r2
 8002120:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002122:	7ebb      	ldrb	r3, [r7, #26]
 8002124:	b29a      	uxth	r2, r3
 8002126:	8bfb      	ldrh	r3, [r7, #30]
 8002128:	4413      	add	r3, r2
 800212a:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 800212c:	8bfb      	ldrh	r3, [r7, #30]
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	4413      	add	r3, r2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f47f af7b 	bne.w	8002030 <OLED_PrintString+0x36>
      }
    }
  }
}
 800213a:	e000      	b.n	800213e <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 800213c:	bf00      	nop
}
 800213e:	bf00      	nop
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6193      	str	r3, [r2, #24]
 800215a:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_MspInit+0x5c>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4a0e      	ldr	r2, [pc, #56]	@ (80021a4 <HAL_MspInit+0x5c>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002170:	61d3      	str	r3, [r2, #28]
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800217e:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <HAL_MspInit+0x60>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <HAL_MspInit+0x60>)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010000 	.word	0x40010000

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <NMI_Handler+0x4>

080021b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <MemManage_Handler+0x4>

080021c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <BusFault_Handler+0x4>

080021cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <UsageFault_Handler+0x4>

080021d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fc:	f000 fb00 	bl	8002800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002208:	4802      	ldr	r0, [pc, #8]	@ (8002214 <TIM2_IRQHandler+0x10>)
 800220a:	f002 ff7d 	bl	8005108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200007c4 	.word	0x200007c4

08002218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return 1;
 800221c:	2301      	movs	r3, #1
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <_kill>:

int _kill(int pid, int sig)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002230:	f004 fb0c 	bl	800684c <__errno>
 8002234:	4603      	mov	r3, r0
 8002236:	2216      	movs	r2, #22
 8002238:	601a      	str	r2, [r3, #0]
  return -1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_exit>:

void _exit (int status)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800224e:	f04f 31ff 	mov.w	r1, #4294967295
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffe7 	bl	8002226 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <_exit+0x12>

0800225c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e00a      	b.n	8002284 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800226e:	f3af 8000 	nop.w
 8002272:	4601      	mov	r1, r0
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	60ba      	str	r2, [r7, #8]
 800227a:	b2ca      	uxtb	r2, r1
 800227c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	dbf0      	blt.n	800226e <_read+0x12>
  }

  return len;
 800228c:	687b      	ldr	r3, [r7, #4]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e009      	b.n	80022bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbf1      	blt.n	80022a8 <_write+0x12>
  }
  return len;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_close>:

int _close(int file)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022f4:	605a      	str	r2, [r3, #4]
  return 0;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <_isatty>:

int _isatty(int file)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
	...

08002330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002338:	4a14      	ldr	r2, [pc, #80]	@ (800238c <_sbrk+0x5c>)
 800233a:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <_sbrk+0x60>)
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002344:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800234c:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <_sbrk+0x64>)
 800234e:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <_sbrk+0x68>)
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	429a      	cmp	r2, r3
 800235e:	d207      	bcs.n	8002370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002360:	f004 fa74 	bl	800684c <__errno>
 8002364:	4603      	mov	r3, r0
 8002366:	220c      	movs	r2, #12
 8002368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	e009      	b.n	8002384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002370:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002376:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <_sbrk+0x64>)
 8002380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20005000 	.word	0x20005000
 8002390:	00000400 	.word	0x00000400
 8002394:	200007c0 	.word	0x200007c0
 8002398:	200009f0 	.word	0x200009f0

0800239c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023bc:	463b      	mov	r3, r7
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023c4:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <MX_TIM2_Init+0x94>)
 80023c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <MX_TIM2_Init+0x94>)
 80023ce:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80023d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d4:	4b19      	ldr	r3, [pc, #100]	@ (800243c <MX_TIM2_Init+0x94>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80023da:	4b18      	ldr	r3, [pc, #96]	@ (800243c <MX_TIM2_Init+0x94>)
 80023dc:	2263      	movs	r2, #99	@ 0x63
 80023de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e0:	4b16      	ldr	r3, [pc, #88]	@ (800243c <MX_TIM2_Init+0x94>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e6:	4b15      	ldr	r3, [pc, #84]	@ (800243c <MX_TIM2_Init+0x94>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023ec:	4813      	ldr	r0, [pc, #76]	@ (800243c <MX_TIM2_Init+0x94>)
 80023ee:	f002 fbbf 	bl	8004b70 <HAL_TIM_Base_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023f8:	f7ff fb19 	bl	8001a2e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002402:	f107 0308 	add.w	r3, r7, #8
 8002406:	4619      	mov	r1, r3
 8002408:	480c      	ldr	r0, [pc, #48]	@ (800243c <MX_TIM2_Init+0x94>)
 800240a:	f003 f82f 	bl	800546c <HAL_TIM_ConfigClockSource>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002414:	f7ff fb0b 	bl	8001a2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002420:	463b      	mov	r3, r7
 8002422:	4619      	mov	r1, r3
 8002424:	4805      	ldr	r0, [pc, #20]	@ (800243c <MX_TIM2_Init+0x94>)
 8002426:	f003 fbbd 	bl	8005ba4 <HAL_TIMEx_MasterConfigSynchronization>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002430:	f7ff fafd 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200007c4 	.word	0x200007c4

08002440 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08c      	sub	sp, #48	@ 0x30
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	2224      	movs	r2, #36	@ 0x24
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f004 f9a9 	bl	80067a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800245c:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 800245e:	4a21      	ldr	r2, [pc, #132]	@ (80024e4 <MX_TIM3_Init+0xa4>)
 8002460:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 8002462:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 8002464:	2201      	movs	r2, #1
 8002466:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002468:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800246e:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 8002470:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002474:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002476:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247c:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002482:	2303      	movs	r3, #3
 8002484:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800248a:	2301      	movs	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002496:	2302      	movs	r3, #2
 8002498:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800249a:	2301      	movs	r3, #1
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800249e:	2300      	movs	r3, #0
 80024a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	4619      	mov	r1, r3
 80024ac:	480c      	ldr	r0, [pc, #48]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 80024ae:	f002 fcfb 	bl	8004ea8 <HAL_TIM_Encoder_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80024b8:	f7ff fab9 	bl	8001a2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	4619      	mov	r1, r3
 80024c8:	4805      	ldr	r0, [pc, #20]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 80024ca:	f003 fb6b 	bl	8005ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80024d4:	f7ff faab 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024d8:	bf00      	nop
 80024da:	3730      	adds	r7, #48	@ 0x30
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	2000080c 	.word	0x2000080c
 80024e4:	40000400 	.word	0x40000400

080024e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08e      	sub	sp, #56	@ 0x38
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fc:	f107 0320 	add.w	r3, r7, #32
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
 8002514:	615a      	str	r2, [r3, #20]
 8002516:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002518:	4b2d      	ldr	r3, [pc, #180]	@ (80025d0 <MX_TIM4_Init+0xe8>)
 800251a:	4a2e      	ldr	r2, [pc, #184]	@ (80025d4 <MX_TIM4_Init+0xec>)
 800251c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800251e:	4b2c      	ldr	r3, [pc, #176]	@ (80025d0 <MX_TIM4_Init+0xe8>)
 8002520:	2200      	movs	r2, #0
 8002522:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002524:	4b2a      	ldr	r3, [pc, #168]	@ (80025d0 <MX_TIM4_Init+0xe8>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7200-1;
 800252a:	4b29      	ldr	r3, [pc, #164]	@ (80025d0 <MX_TIM4_Init+0xe8>)
 800252c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002530:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002532:	4b27      	ldr	r3, [pc, #156]	@ (80025d0 <MX_TIM4_Init+0xe8>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002538:	4b25      	ldr	r3, [pc, #148]	@ (80025d0 <MX_TIM4_Init+0xe8>)
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800253e:	4824      	ldr	r0, [pc, #144]	@ (80025d0 <MX_TIM4_Init+0xe8>)
 8002540:	f002 fb16 	bl	8004b70 <HAL_TIM_Base_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800254a:	f7ff fa70 	bl	8001a2e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800254e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002552:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002554:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002558:	4619      	mov	r1, r3
 800255a:	481d      	ldr	r0, [pc, #116]	@ (80025d0 <MX_TIM4_Init+0xe8>)
 800255c:	f002 ff86 	bl	800546c <HAL_TIM_ConfigClockSource>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002566:	f7ff fa62 	bl	8001a2e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800256a:	4819      	ldr	r0, [pc, #100]	@ (80025d0 <MX_TIM4_Init+0xe8>)
 800256c:	f002 fba2 	bl	8004cb4 <HAL_TIM_PWM_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002576:	f7ff fa5a 	bl	8001a2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002582:	f107 0320 	add.w	r3, r7, #32
 8002586:	4619      	mov	r1, r3
 8002588:	4811      	ldr	r0, [pc, #68]	@ (80025d0 <MX_TIM4_Init+0xe8>)
 800258a:	f003 fb0b 	bl	8005ba4 <HAL_TIMEx_MasterConfigSynchronization>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002594:	f7ff fa4b 	bl	8001a2e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002598:	2360      	movs	r3, #96	@ 0x60
 800259a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 7000;
 800259c:	f641 3358 	movw	r3, #7000	@ 0x1b58
 80025a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	2200      	movs	r2, #0
 80025ae:	4619      	mov	r1, r3
 80025b0:	4807      	ldr	r0, [pc, #28]	@ (80025d0 <MX_TIM4_Init+0xe8>)
 80025b2:	f002 fe99 	bl	80052e8 <HAL_TIM_PWM_ConfigChannel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80025bc:	f7ff fa37 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025c0:	4803      	ldr	r0, [pc, #12]	@ (80025d0 <MX_TIM4_Init+0xe8>)
 80025c2:	f000 f87f 	bl	80026c4 <HAL_TIM_MspPostInit>

}
 80025c6:	bf00      	nop
 80025c8:	3738      	adds	r7, #56	@ 0x38
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000854 	.word	0x20000854
 80025d4:	40000800 	.word	0x40000800

080025d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e8:	d114      	bne.n	8002614 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <HAL_TIM_Base_MspInit+0x68>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4a14      	ldr	r2, [pc, #80]	@ (8002640 <HAL_TIM_Base_MspInit+0x68>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	61d3      	str	r3, [r2, #28]
 80025f6:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <HAL_TIM_Base_MspInit+0x68>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	201c      	movs	r0, #28
 8002608:	f000 fec7 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800260c:	201c      	movs	r0, #28
 800260e:	f000 fee0 	bl	80033d2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002612:	e010      	b.n	8002636 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0a      	ldr	r2, [pc, #40]	@ (8002644 <HAL_TIM_Base_MspInit+0x6c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10b      	bne.n	8002636 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800261e:	4b08      	ldr	r3, [pc, #32]	@ (8002640 <HAL_TIM_Base_MspInit+0x68>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <HAL_TIM_Base_MspInit+0x68>)
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	61d3      	str	r3, [r2, #28]
 800262a:	4b05      	ldr	r3, [pc, #20]	@ (8002640 <HAL_TIM_Base_MspInit+0x68>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	40000800 	.word	0x40000800

08002648 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a15      	ldr	r2, [pc, #84]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x70>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d123      	bne.n	80026b0 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002668:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <HAL_TIM_Encoder_MspInit+0x74>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	4a13      	ldr	r2, [pc, #76]	@ (80026bc <HAL_TIM_Encoder_MspInit+0x74>)
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	61d3      	str	r3, [r2, #28]
 8002674:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <HAL_TIM_Encoder_MspInit+0x74>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002680:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <HAL_TIM_Encoder_MspInit+0x74>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	4a0d      	ldr	r2, [pc, #52]	@ (80026bc <HAL_TIM_Encoder_MspInit+0x74>)
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	6193      	str	r3, [r2, #24]
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <HAL_TIM_Encoder_MspInit+0x74>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002698:	23c0      	movs	r3, #192	@ 0xc0
 800269a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	4619      	mov	r1, r3
 80026aa:	4805      	ldr	r0, [pc, #20]	@ (80026c0 <HAL_TIM_Encoder_MspInit+0x78>)
 80026ac:	f000 feac 	bl	8003408 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026b0:	bf00      	nop
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40010800 	.word	0x40010800

080026c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 0310 	add.w	r3, r7, #16
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a0f      	ldr	r2, [pc, #60]	@ (800271c <HAL_TIM_MspPostInit+0x58>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d117      	bne.n	8002714 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <HAL_TIM_MspPostInit+0x5c>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <HAL_TIM_MspPostInit+0x5c>)
 80026ea:	f043 0308 	orr.w	r3, r3, #8
 80026ee:	6193      	str	r3, [r2, #24]
 80026f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <HAL_TIM_MspPostInit+0x5c>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PWMA_Pin;
 80026fc:	2340      	movs	r3, #64	@ 0x40
 80026fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2302      	movs	r3, #2
 8002706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMA_GPIO_Port, &GPIO_InitStruct);
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	4619      	mov	r1, r3
 800270e:	4805      	ldr	r0, [pc, #20]	@ (8002724 <HAL_TIM_MspPostInit+0x60>)
 8002710:	f000 fe7a 	bl	8003408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002714:	bf00      	nop
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40000800 	.word	0x40000800
 8002720:	40021000 	.word	0x40021000
 8002724:	40010c00 	.word	0x40010c00

08002728 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002728:	f7ff fe38 	bl	800239c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800272c:	480b      	ldr	r0, [pc, #44]	@ (800275c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800272e:	490c      	ldr	r1, [pc, #48]	@ (8002760 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002730:	4a0c      	ldr	r2, [pc, #48]	@ (8002764 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a09      	ldr	r2, [pc, #36]	@ (8002768 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002744:	4c09      	ldr	r4, [pc, #36]	@ (800276c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002752:	f004 f881 	bl	8006858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002756:	f7ff f87d 	bl	8001854 <main>
  bx lr
 800275a:	4770      	bx	lr
  ldr r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002760:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002764:	080093c8 	.word	0x080093c8
  ldr r2, =_sbss
 8002768:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800276c:	200009ec 	.word	0x200009ec

08002770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC1_2_IRQHandler>
	...

08002774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002778:	4b08      	ldr	r3, [pc, #32]	@ (800279c <HAL_Init+0x28>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a07      	ldr	r2, [pc, #28]	@ (800279c <HAL_Init+0x28>)
 800277e:	f043 0310 	orr.w	r3, r3, #16
 8002782:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002784:	2003      	movs	r0, #3
 8002786:	f000 fdfd 	bl	8003384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800278a:	200f      	movs	r0, #15
 800278c:	f000 f808 	bl	80027a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002790:	f7ff fcda 	bl	8002148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40022000 	.word	0x40022000

080027a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a8:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_InitTick+0x54>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <HAL_InitTick+0x58>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fe15 	bl	80033ee <HAL_SYSTICK_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00e      	b.n	80027ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b0f      	cmp	r3, #15
 80027d2:	d80a      	bhi.n	80027ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d4:	2200      	movs	r2, #0
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f000 fddd 	bl	800339a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e0:	4a06      	ldr	r2, [pc, #24]	@ (80027fc <HAL_InitTick+0x5c>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e000      	b.n	80027ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000004 	.word	0x20000004
 80027f8:	2000000c 	.word	0x2000000c
 80027fc:	20000008 	.word	0x20000008

08002800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_IncTick+0x1c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <HAL_IncTick+0x20>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4413      	add	r3, r2
 8002810:	4a03      	ldr	r2, [pc, #12]	@ (8002820 <HAL_IncTick+0x20>)
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	2000000c 	.word	0x2000000c
 8002820:	2000089c 	.word	0x2000089c

08002824 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return uwTick;
 8002828:	4b02      	ldr	r3, [pc, #8]	@ (8002834 <HAL_GetTick+0x10>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	2000089c 	.word	0x2000089c

08002838 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0be      	b.n	80029d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fd1c 	bl	80012b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fbc5 	bl	800300c <ADC_ConversionStop_Disable>
 8002882:	4603      	mov	r3, r0
 8002884:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 8099 	bne.w	80029c6 <HAL_ADC_Init+0x18e>
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 8095 	bne.w	80029c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028a4:	f023 0302 	bic.w	r3, r3, #2
 80028a8:	f043 0202 	orr.w	r2, r3, #2
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7b1b      	ldrb	r3, [r3, #12]
 80028be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d0:	d003      	beq.n	80028da <HAL_ADC_Init+0xa2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d102      	bne.n	80028e0 <HAL_ADC_Init+0xa8>
 80028da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028de:	e000      	b.n	80028e2 <HAL_ADC_Init+0xaa>
 80028e0:	2300      	movs	r3, #0
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7d1b      	ldrb	r3, [r3, #20]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d119      	bne.n	8002924 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7b1b      	ldrb	r3, [r3, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	035a      	lsls	r2, r3, #13
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	e00b      	b.n	8002924 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	f043 0201 	orr.w	r2, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	4b28      	ldr	r3, [pc, #160]	@ (80029e0 <HAL_ADC_Init+0x1a8>)
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	430b      	orrs	r3, r1
 800294a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002954:	d003      	beq.n	800295e <HAL_ADC_Init+0x126>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d104      	bne.n	8002968 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	3b01      	subs	r3, #1
 8002964:	051b      	lsls	r3, r3, #20
 8002966:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	430a      	orrs	r2, r1
 800297a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <HAL_ADC_Init+0x1ac>)
 8002984:	4013      	ands	r3, r2
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	429a      	cmp	r2, r3
 800298a:	d10b      	bne.n	80029a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029a2:	e018      	b.n	80029d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	f023 0312 	bic.w	r3, r3, #18
 80029ac:	f043 0210 	orr.w	r2, r3, #16
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029c4:	e007      	b.n	80029d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	f043 0210 	orr.w	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	ffe1f7fd 	.word	0xffe1f7fd
 80029e4:	ff1f0efe 	.word	0xff1f0efe

080029e8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_Start+0x1a>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e098      	b.n	8002b34 <HAL_ADC_Start+0x14c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 faa4 	bl	8002f58 <ADC_Enable>
 8002a10:	4603      	mov	r3, r0
 8002a12:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 8087 	bne.w	8002b2a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a41      	ldr	r2, [pc, #260]	@ (8002b3c <HAL_ADC_Start+0x154>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d105      	bne.n	8002a46 <HAL_ADC_Start+0x5e>
 8002a3a:	4b41      	ldr	r3, [pc, #260]	@ (8002b40 <HAL_ADC_Start+0x158>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d115      	bne.n	8002a72 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d026      	beq.n	8002aae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a64:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a68:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a70:	e01d      	b.n	8002aae <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a2f      	ldr	r2, [pc, #188]	@ (8002b40 <HAL_ADC_Start+0x158>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d004      	beq.n	8002a92 <HAL_ADC_Start+0xaa>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002b3c <HAL_ADC_Start+0x154>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10d      	bne.n	8002aae <HAL_ADC_Start+0xc6>
 8002a92:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <HAL_ADC_Start+0x158>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aa6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d006      	beq.n	8002ac8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	f023 0206 	bic.w	r2, r3, #6
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ac6:	e002      	b.n	8002ace <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f06f 0202 	mvn.w	r2, #2
 8002ade:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002aea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002aee:	d113      	bne.n	8002b18 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002af4:	4a11      	ldr	r2, [pc, #68]	@ (8002b3c <HAL_ADC_Start+0x154>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d105      	bne.n	8002b06 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002afa:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <HAL_ADC_Start+0x158>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d108      	bne.n	8002b18 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	e00c      	b.n	8002b32 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	e003      	b.n	8002b32 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40012800 	.word	0x40012800
 8002b40:	40012400 	.word	0x40012400

08002b44 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b5a:	f7ff fe63 	bl	8002824 <HAL_GetTick>
 8002b5e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b72:	f043 0220 	orr.w	r2, r3, #32
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0d3      	b.n	8002d2e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d131      	bne.n	8002bf8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d12a      	bne.n	8002bf8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ba2:	e021      	b.n	8002be8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d01d      	beq.n	8002be8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_ADC_PollForConversion+0x7e>
 8002bb2:	f7ff fe37 	bl	8002824 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d212      	bcs.n	8002be8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd4:	f043 0204 	orr.w	r2, r3, #4
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0a2      	b.n	8002d2e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0d6      	beq.n	8002ba4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bf6:	e070      	b.n	8002cda <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002bf8:	4b4f      	ldr	r3, [pc, #316]	@ (8002d38 <HAL_ADC_PollForConversion+0x1f4>)
 8002bfa:	681c      	ldr	r4, [r3, #0]
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	f001 ff01 	bl	8004a04 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c02:	4603      	mov	r3, r0
 8002c04:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6919      	ldr	r1, [r3, #16]
 8002c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d3c <HAL_ADC_PollForConversion+0x1f8>)
 8002c10:	400b      	ands	r3, r1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d118      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x104>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68d9      	ldr	r1, [r3, #12]
 8002c1c:	4b48      	ldr	r3, [pc, #288]	@ (8002d40 <HAL_ADC_PollForConversion+0x1fc>)
 8002c1e:	400b      	ands	r3, r1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d111      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x104>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6919      	ldr	r1, [r3, #16]
 8002c2a:	4b46      	ldr	r3, [pc, #280]	@ (8002d44 <HAL_ADC_PollForConversion+0x200>)
 8002c2c:	400b      	ands	r3, r1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d108      	bne.n	8002c44 <HAL_ADC_PollForConversion+0x100>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68d9      	ldr	r1, [r3, #12]
 8002c38:	4b43      	ldr	r3, [pc, #268]	@ (8002d48 <HAL_ADC_PollForConversion+0x204>)
 8002c3a:	400b      	ands	r3, r1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_PollForConversion+0x100>
 8002c40:	2314      	movs	r3, #20
 8002c42:	e020      	b.n	8002c86 <HAL_ADC_PollForConversion+0x142>
 8002c44:	2329      	movs	r3, #41	@ 0x29
 8002c46:	e01e      	b.n	8002c86 <HAL_ADC_PollForConversion+0x142>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6919      	ldr	r1, [r3, #16]
 8002c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d44 <HAL_ADC_PollForConversion+0x200>)
 8002c50:	400b      	ands	r3, r1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_ADC_PollForConversion+0x120>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68d9      	ldr	r1, [r3, #12]
 8002c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d48 <HAL_ADC_PollForConversion+0x204>)
 8002c5e:	400b      	ands	r3, r1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <HAL_ADC_PollForConversion+0x13c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	4b38      	ldr	r3, [pc, #224]	@ (8002d4c <HAL_ADC_PollForConversion+0x208>)
 8002c6c:	400b      	ands	r3, r1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <HAL_ADC_PollForConversion+0x140>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68d9      	ldr	r1, [r3, #12]
 8002c78:	4b34      	ldr	r3, [pc, #208]	@ (8002d4c <HAL_ADC_PollForConversion+0x208>)
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADC_PollForConversion+0x140>
 8002c80:	2354      	movs	r3, #84	@ 0x54
 8002c82:	e000      	b.n	8002c86 <HAL_ADC_PollForConversion+0x142>
 8002c84:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c8c:	e021      	b.n	8002cd2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d01a      	beq.n	8002ccc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_ADC_PollForConversion+0x168>
 8002c9c:	f7ff fdc2 	bl	8002824 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d20f      	bcs.n	8002ccc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d90b      	bls.n	8002ccc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	f043 0204 	orr.w	r2, r3, #4
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e030      	b.n	8002d2e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d8d9      	bhi.n	8002c8e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0212 	mvn.w	r2, #18
 8002ce2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002cfa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002cfe:	d115      	bne.n	8002d2c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d111      	bne.n	8002d2c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd90      	pop	{r4, r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000004 	.word	0x20000004
 8002d3c:	24924924 	.word	0x24924924
 8002d40:	00924924 	.word	0x00924924
 8002d44:	12492492 	.word	0x12492492
 8002d48:	00492492 	.word	0x00492492
 8002d4c:	00249249 	.word	0x00249249

08002d50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x20>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e0dc      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x1da>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b06      	cmp	r3, #6
 8002d96:	d81c      	bhi.n	8002dd2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	3b05      	subs	r3, #5
 8002daa:	221f      	movs	r2, #31
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	4019      	ands	r1, r3
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3b05      	subs	r3, #5
 8002dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dd0:	e03c      	b.n	8002e4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d81c      	bhi.n	8002e14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	3b23      	subs	r3, #35	@ 0x23
 8002dec:	221f      	movs	r2, #31
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	4019      	ands	r1, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	3b23      	subs	r3, #35	@ 0x23
 8002e06:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e12:	e01b      	b.n	8002e4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	3b41      	subs	r3, #65	@ 0x41
 8002e26:	221f      	movs	r2, #31
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	4019      	ands	r1, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b41      	subs	r3, #65	@ 0x41
 8002e40:	fa00 f203 	lsl.w	r2, r0, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b09      	cmp	r3, #9
 8002e52:	d91c      	bls.n	8002e8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68d9      	ldr	r1, [r3, #12]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	3b1e      	subs	r3, #30
 8002e66:	2207      	movs	r2, #7
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	4019      	ands	r1, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6898      	ldr	r0, [r3, #8]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3b1e      	subs	r3, #30
 8002e80:	fa00 f203 	lsl.w	r2, r0, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	60da      	str	r2, [r3, #12]
 8002e8c:	e019      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6919      	ldr	r1, [r3, #16]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	2207      	movs	r2, #7
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	4019      	ands	r1, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6898      	ldr	r0, [r3, #8]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d003      	beq.n	8002ed2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ece:	2b11      	cmp	r3, #17
 8002ed0:	d132      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f4c <HAL_ADC_ConfigChannel+0x1e4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d125      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d126      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002ef8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d11a      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f02:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a13      	ldr	r2, [pc, #76]	@ (8002f54 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	0c9a      	lsrs	r2, r3, #18
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f18:	e002      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f9      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x1b2>
 8002f26:	e007      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	40012400 	.word	0x40012400
 8002f50:	20000004 	.word	0x20000004
 8002f54:	431bde83 	.word	0x431bde83

08002f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d040      	beq.n	8002ff8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f86:	4b1f      	ldr	r3, [pc, #124]	@ (8003004 <ADC_Enable+0xac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003008 <ADC_Enable+0xb0>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	0c9b      	lsrs	r3, r3, #18
 8002f92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f94:	e002      	b.n	8002f9c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f9      	bne.n	8002f96 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fa2:	f7ff fc3f 	bl	8002824 <HAL_GetTick>
 8002fa6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fa8:	e01f      	b.n	8002fea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002faa:	f7ff fc3b 	bl	8002824 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d918      	bls.n	8002fea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d011      	beq.n	8002fea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fca:	f043 0210 	orr.w	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e007      	b.n	8002ffa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d1d8      	bne.n	8002faa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000004 	.word	0x20000004
 8003008:	431bde83 	.word	0x431bde83

0800300c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d12e      	bne.n	8003084 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003036:	f7ff fbf5 	bl	8002824 <HAL_GetTick>
 800303a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800303c:	e01b      	b.n	8003076 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800303e:	f7ff fbf1 	bl	8002824 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d914      	bls.n	8003076 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d10d      	bne.n	8003076 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305e:	f043 0210 	orr.w	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e007      	b.n	8003086 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d0dc      	beq.n	800303e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_ADCEx_Calibration_Start+0x1e>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e097      	b.n	80031de <HAL_ADCEx_Calibration_Start+0x14e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffa8 	bl	800300c <ADC_ConversionStop_Disable>
 80030bc:	4603      	mov	r3, r0
 80030be:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff49 	bl	8002f58 <ADC_Enable>
 80030c6:	4603      	mov	r3, r0
 80030c8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f040 8081 	bne.w	80031d4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030da:	f023 0302 	bic.w	r3, r3, #2
 80030de:	f043 0202 	orr.w	r2, r3, #2
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80030e6:	4b40      	ldr	r3, [pc, #256]	@ (80031e8 <HAL_ADCEx_Calibration_Start+0x158>)
 80030e8:	681c      	ldr	r4, [r3, #0]
 80030ea:	2002      	movs	r0, #2
 80030ec:	f001 fc8a 	bl	8004a04 <HAL_RCCEx_GetPeriphCLKFreq>
 80030f0:	4603      	mov	r3, r0
 80030f2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80030f6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80030f8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80030fa:	e002      	b.n	8003102 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	3b01      	subs	r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f9      	bne.n	80030fc <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0208 	orr.w	r2, r2, #8
 8003116:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003118:	f7ff fb84 	bl	8002824 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800311e:	e01b      	b.n	8003158 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003120:	f7ff fb80 	bl	8002824 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b0a      	cmp	r3, #10
 800312c:	d914      	bls.n	8003158 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00d      	beq.n	8003158 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	f023 0312 	bic.w	r3, r3, #18
 8003144:	f043 0210 	orr.w	r2, r3, #16
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e042      	b.n	80031de <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1dc      	bne.n	8003120 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0204 	orr.w	r2, r2, #4
 8003174:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003176:	f7ff fb55 	bl	8002824 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800317c:	e01b      	b.n	80031b6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800317e:	f7ff fb51 	bl	8002824 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b0a      	cmp	r3, #10
 800318a:	d914      	bls.n	80031b6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319e:	f023 0312 	bic.w	r3, r3, #18
 80031a2:	f043 0210 	orr.w	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e013      	b.n	80031de <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1dc      	bne.n	800317e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	f023 0303 	bic.w	r3, r3, #3
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd90      	pop	{r4, r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000004 	.word	0x20000004

080031ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003208:	4013      	ands	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800321c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321e:	4a04      	ldr	r2, [pc, #16]	@ (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	60d3      	str	r3, [r2, #12]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003238:	4b04      	ldr	r3, [pc, #16]	@ (800324c <__NVIC_GetPriorityGrouping+0x18>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	f003 0307 	and.w	r3, r3, #7
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	db0b      	blt.n	800327a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	f003 021f 	and.w	r2, r3, #31
 8003268:	4906      	ldr	r1, [pc, #24]	@ (8003284 <__NVIC_EnableIRQ+0x34>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2001      	movs	r0, #1
 8003272:	fa00 f202 	lsl.w	r2, r0, r2
 8003276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	e000e100 	.word	0xe000e100

08003288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	db0a      	blt.n	80032b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	490c      	ldr	r1, [pc, #48]	@ (80032d4 <__NVIC_SetPriority+0x4c>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	440b      	add	r3, r1
 80032ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b0:	e00a      	b.n	80032c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4908      	ldr	r1, [pc, #32]	@ (80032d8 <__NVIC_SetPriority+0x50>)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3b04      	subs	r3, #4
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	440b      	add	r3, r1
 80032c6:	761a      	strb	r2, [r3, #24]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	e000e100 	.word	0xe000e100
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b089      	sub	sp, #36	@ 0x24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f1c3 0307 	rsb	r3, r3, #7
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	bf28      	it	cs
 80032fa:	2304      	movcs	r3, #4
 80032fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3304      	adds	r3, #4
 8003302:	2b06      	cmp	r3, #6
 8003304:	d902      	bls.n	800330c <NVIC_EncodePriority+0x30>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3b03      	subs	r3, #3
 800330a:	e000      	b.n	800330e <NVIC_EncodePriority+0x32>
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	f04f 32ff 	mov.w	r2, #4294967295
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	401a      	ands	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003324:	f04f 31ff 	mov.w	r1, #4294967295
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	43d9      	mvns	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	4313      	orrs	r3, r2
         );
}
 8003336:	4618      	mov	r0, r3
 8003338:	3724      	adds	r7, #36	@ 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003350:	d301      	bcc.n	8003356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003352:	2301      	movs	r3, #1
 8003354:	e00f      	b.n	8003376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003356:	4a0a      	ldr	r2, [pc, #40]	@ (8003380 <SysTick_Config+0x40>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800335e:	210f      	movs	r1, #15
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	f7ff ff90 	bl	8003288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003368:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <SysTick_Config+0x40>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800336e:	4b04      	ldr	r3, [pc, #16]	@ (8003380 <SysTick_Config+0x40>)
 8003370:	2207      	movs	r2, #7
 8003372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	e000e010 	.word	0xe000e010

08003384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ff2d 	bl	80031ec <__NVIC_SetPriorityGrouping>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800339a:	b580      	push	{r7, lr}
 800339c:	b086      	sub	sp, #24
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ac:	f7ff ff42 	bl	8003234 <__NVIC_GetPriorityGrouping>
 80033b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	6978      	ldr	r0, [r7, #20]
 80033b8:	f7ff ff90 	bl	80032dc <NVIC_EncodePriority>
 80033bc:	4602      	mov	r2, r0
 80033be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff5f 	bl	8003288 <__NVIC_SetPriority>
}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff35 	bl	8003250 <__NVIC_EnableIRQ>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ffa2 	bl	8003340 <SysTick_Config>
 80033fc:	4603      	mov	r3, r0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003408:	b480      	push	{r7}
 800340a:	b08b      	sub	sp, #44	@ 0x2c
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003412:	2300      	movs	r3, #0
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800341a:	e169      	b.n	80036f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800341c:	2201      	movs	r2, #1
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	429a      	cmp	r2, r3
 8003436:	f040 8158 	bne.w	80036ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	4a9a      	ldr	r2, [pc, #616]	@ (80036a8 <HAL_GPIO_Init+0x2a0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d05e      	beq.n	8003502 <HAL_GPIO_Init+0xfa>
 8003444:	4a98      	ldr	r2, [pc, #608]	@ (80036a8 <HAL_GPIO_Init+0x2a0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d875      	bhi.n	8003536 <HAL_GPIO_Init+0x12e>
 800344a:	4a98      	ldr	r2, [pc, #608]	@ (80036ac <HAL_GPIO_Init+0x2a4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d058      	beq.n	8003502 <HAL_GPIO_Init+0xfa>
 8003450:	4a96      	ldr	r2, [pc, #600]	@ (80036ac <HAL_GPIO_Init+0x2a4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d86f      	bhi.n	8003536 <HAL_GPIO_Init+0x12e>
 8003456:	4a96      	ldr	r2, [pc, #600]	@ (80036b0 <HAL_GPIO_Init+0x2a8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d052      	beq.n	8003502 <HAL_GPIO_Init+0xfa>
 800345c:	4a94      	ldr	r2, [pc, #592]	@ (80036b0 <HAL_GPIO_Init+0x2a8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d869      	bhi.n	8003536 <HAL_GPIO_Init+0x12e>
 8003462:	4a94      	ldr	r2, [pc, #592]	@ (80036b4 <HAL_GPIO_Init+0x2ac>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04c      	beq.n	8003502 <HAL_GPIO_Init+0xfa>
 8003468:	4a92      	ldr	r2, [pc, #584]	@ (80036b4 <HAL_GPIO_Init+0x2ac>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d863      	bhi.n	8003536 <HAL_GPIO_Init+0x12e>
 800346e:	4a92      	ldr	r2, [pc, #584]	@ (80036b8 <HAL_GPIO_Init+0x2b0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d046      	beq.n	8003502 <HAL_GPIO_Init+0xfa>
 8003474:	4a90      	ldr	r2, [pc, #576]	@ (80036b8 <HAL_GPIO_Init+0x2b0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d85d      	bhi.n	8003536 <HAL_GPIO_Init+0x12e>
 800347a:	2b12      	cmp	r3, #18
 800347c:	d82a      	bhi.n	80034d4 <HAL_GPIO_Init+0xcc>
 800347e:	2b12      	cmp	r3, #18
 8003480:	d859      	bhi.n	8003536 <HAL_GPIO_Init+0x12e>
 8003482:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <HAL_GPIO_Init+0x80>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	08003503 	.word	0x08003503
 800348c:	080034dd 	.word	0x080034dd
 8003490:	080034ef 	.word	0x080034ef
 8003494:	08003531 	.word	0x08003531
 8003498:	08003537 	.word	0x08003537
 800349c:	08003537 	.word	0x08003537
 80034a0:	08003537 	.word	0x08003537
 80034a4:	08003537 	.word	0x08003537
 80034a8:	08003537 	.word	0x08003537
 80034ac:	08003537 	.word	0x08003537
 80034b0:	08003537 	.word	0x08003537
 80034b4:	08003537 	.word	0x08003537
 80034b8:	08003537 	.word	0x08003537
 80034bc:	08003537 	.word	0x08003537
 80034c0:	08003537 	.word	0x08003537
 80034c4:	08003537 	.word	0x08003537
 80034c8:	08003537 	.word	0x08003537
 80034cc:	080034e5 	.word	0x080034e5
 80034d0:	080034f9 	.word	0x080034f9
 80034d4:	4a79      	ldr	r2, [pc, #484]	@ (80036bc <HAL_GPIO_Init+0x2b4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034da:	e02c      	b.n	8003536 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	623b      	str	r3, [r7, #32]
          break;
 80034e2:	e029      	b.n	8003538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	3304      	adds	r3, #4
 80034ea:	623b      	str	r3, [r7, #32]
          break;
 80034ec:	e024      	b.n	8003538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	3308      	adds	r3, #8
 80034f4:	623b      	str	r3, [r7, #32]
          break;
 80034f6:	e01f      	b.n	8003538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	330c      	adds	r3, #12
 80034fe:	623b      	str	r3, [r7, #32]
          break;
 8003500:	e01a      	b.n	8003538 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800350a:	2304      	movs	r3, #4
 800350c:	623b      	str	r3, [r7, #32]
          break;
 800350e:	e013      	b.n	8003538 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d105      	bne.n	8003524 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003518:	2308      	movs	r3, #8
 800351a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	611a      	str	r2, [r3, #16]
          break;
 8003522:	e009      	b.n	8003538 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003524:	2308      	movs	r3, #8
 8003526:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	615a      	str	r2, [r3, #20]
          break;
 800352e:	e003      	b.n	8003538 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003530:	2300      	movs	r3, #0
 8003532:	623b      	str	r3, [r7, #32]
          break;
 8003534:	e000      	b.n	8003538 <HAL_GPIO_Init+0x130>
          break;
 8003536:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2bff      	cmp	r3, #255	@ 0xff
 800353c:	d801      	bhi.n	8003542 <HAL_GPIO_Init+0x13a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	e001      	b.n	8003546 <HAL_GPIO_Init+0x13e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3304      	adds	r3, #4
 8003546:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2bff      	cmp	r3, #255	@ 0xff
 800354c:	d802      	bhi.n	8003554 <HAL_GPIO_Init+0x14c>
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	e002      	b.n	800355a <HAL_GPIO_Init+0x152>
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	3b08      	subs	r3, #8
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	210f      	movs	r1, #15
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	401a      	ands	r2, r3
 800356c:	6a39      	ldr	r1, [r7, #32]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	fa01 f303 	lsl.w	r3, r1, r3
 8003574:	431a      	orrs	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80b1 	beq.w	80036ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003588:	4b4d      	ldr	r3, [pc, #308]	@ (80036c0 <HAL_GPIO_Init+0x2b8>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	4a4c      	ldr	r2, [pc, #304]	@ (80036c0 <HAL_GPIO_Init+0x2b8>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6193      	str	r3, [r2, #24]
 8003594:	4b4a      	ldr	r3, [pc, #296]	@ (80036c0 <HAL_GPIO_Init+0x2b8>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035a0:	4a48      	ldr	r2, [pc, #288]	@ (80036c4 <HAL_GPIO_Init+0x2bc>)
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	089b      	lsrs	r3, r3, #2
 80035a6:	3302      	adds	r3, #2
 80035a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	220f      	movs	r2, #15
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4013      	ands	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a40      	ldr	r2, [pc, #256]	@ (80036c8 <HAL_GPIO_Init+0x2c0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <HAL_GPIO_Init+0x1ec>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a3f      	ldr	r2, [pc, #252]	@ (80036cc <HAL_GPIO_Init+0x2c4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00d      	beq.n	80035f0 <HAL_GPIO_Init+0x1e8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a3e      	ldr	r2, [pc, #248]	@ (80036d0 <HAL_GPIO_Init+0x2c8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <HAL_GPIO_Init+0x1e4>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a3d      	ldr	r2, [pc, #244]	@ (80036d4 <HAL_GPIO_Init+0x2cc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d101      	bne.n	80035e8 <HAL_GPIO_Init+0x1e0>
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <HAL_GPIO_Init+0x1ee>
 80035e8:	2304      	movs	r3, #4
 80035ea:	e004      	b.n	80035f6 <HAL_GPIO_Init+0x1ee>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e002      	b.n	80035f6 <HAL_GPIO_Init+0x1ee>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_GPIO_Init+0x1ee>
 80035f4:	2300      	movs	r3, #0
 80035f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f8:	f002 0203 	and.w	r2, r2, #3
 80035fc:	0092      	lsls	r2, r2, #2
 80035fe:	4093      	lsls	r3, r2
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003606:	492f      	ldr	r1, [pc, #188]	@ (80036c4 <HAL_GPIO_Init+0x2bc>)
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	089b      	lsrs	r3, r3, #2
 800360c:	3302      	adds	r3, #2
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d006      	beq.n	800362e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003620:	4b2d      	ldr	r3, [pc, #180]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	492c      	ldr	r1, [pc, #176]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	608b      	str	r3, [r1, #8]
 800362c:	e006      	b.n	800363c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800362e:	4b2a      	ldr	r3, [pc, #168]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	43db      	mvns	r3, r3
 8003636:	4928      	ldr	r1, [pc, #160]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003638:	4013      	ands	r3, r2
 800363a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d006      	beq.n	8003656 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003648:	4b23      	ldr	r3, [pc, #140]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	4922      	ldr	r1, [pc, #136]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	4313      	orrs	r3, r2
 8003652:	60cb      	str	r3, [r1, #12]
 8003654:	e006      	b.n	8003664 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003656:	4b20      	ldr	r3, [pc, #128]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	43db      	mvns	r3, r3
 800365e:	491e      	ldr	r1, [pc, #120]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003660:	4013      	ands	r3, r2
 8003662:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003670:	4b19      	ldr	r3, [pc, #100]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	4918      	ldr	r1, [pc, #96]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
 800367c:	e006      	b.n	800368c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800367e:	4b16      	ldr	r3, [pc, #88]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	43db      	mvns	r3, r3
 8003686:	4914      	ldr	r1, [pc, #80]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003688:	4013      	ands	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d021      	beq.n	80036dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003698:	4b0f      	ldr	r3, [pc, #60]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	490e      	ldr	r1, [pc, #56]	@ (80036d8 <HAL_GPIO_Init+0x2d0>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
 80036a4:	e021      	b.n	80036ea <HAL_GPIO_Init+0x2e2>
 80036a6:	bf00      	nop
 80036a8:	10320000 	.word	0x10320000
 80036ac:	10310000 	.word	0x10310000
 80036b0:	10220000 	.word	0x10220000
 80036b4:	10210000 	.word	0x10210000
 80036b8:	10120000 	.word	0x10120000
 80036bc:	10110000 	.word	0x10110000
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40010800 	.word	0x40010800
 80036cc:	40010c00 	.word	0x40010c00
 80036d0:	40011000 	.word	0x40011000
 80036d4:	40011400 	.word	0x40011400
 80036d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_GPIO_Init+0x304>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	4909      	ldr	r1, [pc, #36]	@ (800370c <HAL_GPIO_Init+0x304>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	3301      	adds	r3, #1
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	fa22 f303 	lsr.w	r3, r2, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f47f ae8e 	bne.w	800341c <HAL_GPIO_Init+0x14>
  }
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	372c      	adds	r7, #44	@ 0x2c
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40010400 	.word	0x40010400

08003710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
 800371c:	4613      	mov	r3, r2
 800371e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003720:	787b      	ldrb	r3, [r7, #1]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800372c:	e003      	b.n	8003736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800372e:	887b      	ldrh	r3, [r7, #2]
 8003730:	041a      	lsls	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	611a      	str	r2, [r3, #16]
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e12b      	b.n	80039aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd fe88 	bl	800147c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	@ 0x24
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a4:	f001 f832 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 80037a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4a81      	ldr	r2, [pc, #516]	@ (80039b4 <HAL_I2C_Init+0x274>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d807      	bhi.n	80037c4 <HAL_I2C_Init+0x84>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a80      	ldr	r2, [pc, #512]	@ (80039b8 <HAL_I2C_Init+0x278>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	bf94      	ite	ls
 80037bc:	2301      	movls	r3, #1
 80037be:	2300      	movhi	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e006      	b.n	80037d2 <HAL_I2C_Init+0x92>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a7d      	ldr	r2, [pc, #500]	@ (80039bc <HAL_I2C_Init+0x27c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	bf94      	ite	ls
 80037cc:	2301      	movls	r3, #1
 80037ce:	2300      	movhi	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0e7      	b.n	80039aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4a78      	ldr	r2, [pc, #480]	@ (80039c0 <HAL_I2C_Init+0x280>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	0c9b      	lsrs	r3, r3, #18
 80037e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4a6a      	ldr	r2, [pc, #424]	@ (80039b4 <HAL_I2C_Init+0x274>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d802      	bhi.n	8003814 <HAL_I2C_Init+0xd4>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3301      	adds	r3, #1
 8003812:	e009      	b.n	8003828 <HAL_I2C_Init+0xe8>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	4a69      	ldr	r2, [pc, #420]	@ (80039c4 <HAL_I2C_Init+0x284>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	099b      	lsrs	r3, r3, #6
 8003826:	3301      	adds	r3, #1
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	430b      	orrs	r3, r1
 800382e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800383a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	495c      	ldr	r1, [pc, #368]	@ (80039b4 <HAL_I2C_Init+0x274>)
 8003844:	428b      	cmp	r3, r1
 8003846:	d819      	bhi.n	800387c <HAL_I2C_Init+0x13c>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1e59      	subs	r1, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fbb1 f3f3 	udiv	r3, r1, r3
 8003856:	1c59      	adds	r1, r3, #1
 8003858:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800385c:	400b      	ands	r3, r1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_I2C_Init+0x138>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1e59      	subs	r1, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003876:	e051      	b.n	800391c <HAL_I2C_Init+0x1dc>
 8003878:	2304      	movs	r3, #4
 800387a:	e04f      	b.n	800391c <HAL_I2C_Init+0x1dc>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d111      	bne.n	80038a8 <HAL_I2C_Init+0x168>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e58      	subs	r0, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	440b      	add	r3, r1
 8003892:	fbb0 f3f3 	udiv	r3, r0, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e012      	b.n	80038ce <HAL_I2C_Init+0x18e>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1e58      	subs	r0, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	0099      	lsls	r1, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Init+0x196>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e022      	b.n	800391c <HAL_I2C_Init+0x1dc>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10e      	bne.n	80038fc <HAL_I2C_Init+0x1bc>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e58      	subs	r0, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	440b      	add	r3, r1
 80038ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038fa:	e00f      	b.n	800391c <HAL_I2C_Init+0x1dc>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1e58      	subs	r0, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	0099      	lsls	r1, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	6809      	ldr	r1, [r1, #0]
 8003920:	4313      	orrs	r3, r2
 8003922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800394a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6911      	ldr	r1, [r2, #16]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	4311      	orrs	r1, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	430b      	orrs	r3, r1
 800395e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	000186a0 	.word	0x000186a0
 80039b8:	001e847f 	.word	0x001e847f
 80039bc:	003d08ff 	.word	0x003d08ff
 80039c0:	431bde83 	.word	0x431bde83
 80039c4:	10624dd3 	.word	0x10624dd3

080039c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	461a      	mov	r2, r3
 80039d4:	460b      	mov	r3, r1
 80039d6:	817b      	strh	r3, [r7, #10]
 80039d8:	4613      	mov	r3, r2
 80039da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7fe ff22 	bl	8002824 <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	f040 80e0 	bne.w	8003bb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2319      	movs	r3, #25
 80039f6:	2201      	movs	r2, #1
 80039f8:	4970      	ldr	r1, [pc, #448]	@ (8003bbc <HAL_I2C_Master_Transmit+0x1f4>)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f964 	bl	8003cc8 <I2C_WaitOnFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0d3      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_I2C_Master_Transmit+0x50>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e0cc      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d007      	beq.n	8003a3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2221      	movs	r2, #33	@ 0x21
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2210      	movs	r2, #16
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	893a      	ldrh	r2, [r7, #8]
 8003a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a50      	ldr	r2, [pc, #320]	@ (8003bc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a80:	8979      	ldrh	r1, [r7, #10]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f89c 	bl	8003bc4 <I2C_MasterRequestWrite>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e08d      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003aac:	e066      	b.n	8003b7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	6a39      	ldr	r1, [r7, #32]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fa22 	bl	8003efc <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d107      	bne.n	8003ad6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e06b      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d11b      	bne.n	8003b50 <HAL_I2C_Master_Transmit+0x188>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d017      	beq.n	8003b50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	6a39      	ldr	r1, [r7, #32]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fa19 	bl	8003f8c <I2C_WaitOnBTFFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00d      	beq.n	8003b7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d107      	bne.n	8003b78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e01a      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d194      	bne.n	8003aae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
  }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	00100002 	.word	0x00100002
 8003bc0:	ffff0000 	.word	0xffff0000

08003bc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d006      	beq.n	8003bee <I2C_MasterRequestWrite+0x2a>
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d003      	beq.n	8003bee <I2C_MasterRequestWrite+0x2a>
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bec:	d108      	bne.n	8003c00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e00b      	b.n	8003c18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	2b12      	cmp	r3, #18
 8003c06:	d107      	bne.n	8003c18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f84f 	bl	8003cc8 <I2C_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c3e:	d103      	bne.n	8003c48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e035      	b.n	8003cb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c54:	d108      	bne.n	8003c68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c56:	897b      	ldrh	r3, [r7, #10]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c64:	611a      	str	r2, [r3, #16]
 8003c66:	e01b      	b.n	8003ca0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c68:	897b      	ldrh	r3, [r7, #10]
 8003c6a:	11db      	asrs	r3, r3, #7
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f003 0306 	and.w	r3, r3, #6
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f063 030f 	orn	r3, r3, #15
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	490e      	ldr	r1, [pc, #56]	@ (8003cc0 <I2C_MasterRequestWrite+0xfc>)
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f898 	bl	8003dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e010      	b.n	8003cb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c96:	897b      	ldrh	r3, [r7, #10]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4907      	ldr	r1, [pc, #28]	@ (8003cc4 <I2C_MasterRequestWrite+0x100>)
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f888 	bl	8003dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	00010008 	.word	0x00010008
 8003cc4:	00010002 	.word	0x00010002

08003cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cd8:	e048      	b.n	8003d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d044      	beq.n	8003d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fe fd9f 	bl	8002824 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d139      	bne.n	8003d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	0c1b      	lsrs	r3, r3, #16
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10d      	bne.n	8003d1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	43da      	mvns	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	e00c      	b.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	43da      	mvns	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d116      	bne.n	8003d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e023      	b.n	8003db4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	0c1b      	lsrs	r3, r3, #16
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d10d      	bne.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	43da      	mvns	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4013      	ands	r3, r2
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	e00c      	b.n	8003dac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	43da      	mvns	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d093      	beq.n	8003cda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dca:	e071      	b.n	8003eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dda:	d123      	bne.n	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	f043 0204 	orr.w	r2, r3, #4
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e067      	b.n	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d041      	beq.n	8003eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2c:	f7fe fcfa 	bl	8002824 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d302      	bcc.n	8003e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d136      	bne.n	8003eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d10c      	bne.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	43da      	mvns	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4013      	ands	r3, r2
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bf14      	ite	ne
 8003e5e:	2301      	movne	r3, #1
 8003e60:	2300      	moveq	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	e00b      	b.n	8003e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	43da      	mvns	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4013      	ands	r3, r2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e021      	b.n	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	0c1b      	lsrs	r3, r3, #16
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10c      	bne.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e00b      	b.n	8003eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	43da      	mvns	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	bf14      	ite	ne
 8003ee6:	2301      	movne	r3, #1
 8003ee8:	2300      	moveq	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f47f af6d 	bne.w	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f08:	e034      	b.n	8003f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f886 	bl	800401c <I2C_IsAcknowledgeFailed>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e034      	b.n	8003f84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d028      	beq.n	8003f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fe fc7f 	bl	8002824 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11d      	bne.n	8003f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f42:	2b80      	cmp	r3, #128	@ 0x80
 8003f44:	d016      	beq.n	8003f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e007      	b.n	8003f84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7e:	2b80      	cmp	r3, #128	@ 0x80
 8003f80:	d1c3      	bne.n	8003f0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f98:	e034      	b.n	8004004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f83e 	bl	800401c <I2C_IsAcknowledgeFailed>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e034      	b.n	8004014 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d028      	beq.n	8004004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb2:	f7fe fc37 	bl	8002824 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d302      	bcc.n	8003fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d11d      	bne.n	8004004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d016      	beq.n	8004004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	f043 0220 	orr.w	r2, r3, #32
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e007      	b.n	8004014 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b04      	cmp	r3, #4
 8004010:	d1c3      	bne.n	8003f9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800402e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004032:	d11b      	bne.n	800406c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800403c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	f043 0204 	orr.w	r2, r3, #4
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e272      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8087 	beq.w	80041a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004098:	4b92      	ldr	r3, [pc, #584]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d00c      	beq.n	80040be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040a4:	4b8f      	ldr	r3, [pc, #572]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 030c 	and.w	r3, r3, #12
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d112      	bne.n	80040d6 <HAL_RCC_OscConfig+0x5e>
 80040b0:	4b8c      	ldr	r3, [pc, #560]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040bc:	d10b      	bne.n	80040d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040be:	4b89      	ldr	r3, [pc, #548]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d06c      	beq.n	80041a4 <HAL_RCC_OscConfig+0x12c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d168      	bne.n	80041a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e24c      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040de:	d106      	bne.n	80040ee <HAL_RCC_OscConfig+0x76>
 80040e0:	4b80      	ldr	r3, [pc, #512]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a7f      	ldr	r2, [pc, #508]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80040e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	e02e      	b.n	800414c <HAL_RCC_OscConfig+0xd4>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10c      	bne.n	8004110 <HAL_RCC_OscConfig+0x98>
 80040f6:	4b7b      	ldr	r3, [pc, #492]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a7a      	ldr	r2, [pc, #488]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	4b78      	ldr	r3, [pc, #480]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a77      	ldr	r2, [pc, #476]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 8004108:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e01d      	b.n	800414c <HAL_RCC_OscConfig+0xd4>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0xbc>
 800411a:	4b72      	ldr	r3, [pc, #456]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a71      	ldr	r2, [pc, #452]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 8004120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	4b6f      	ldr	r3, [pc, #444]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a6e      	ldr	r2, [pc, #440]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e00b      	b.n	800414c <HAL_RCC_OscConfig+0xd4>
 8004134:	4b6b      	ldr	r3, [pc, #428]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a6a      	ldr	r2, [pc, #424]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 800413a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4b68      	ldr	r3, [pc, #416]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a67      	ldr	r2, [pc, #412]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 8004146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800414a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d013      	beq.n	800417c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fe fb66 	bl	8002824 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800415c:	f7fe fb62 	bl	8002824 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	@ 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e200      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b5d      	ldr	r3, [pc, #372]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0xe4>
 800417a:	e014      	b.n	80041a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417c:	f7fe fb52 	bl	8002824 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004184:	f7fe fb4e 	bl	8002824 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	@ 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1ec      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	4b53      	ldr	r3, [pc, #332]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x10c>
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d063      	beq.n	800427a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041b2:	4b4c      	ldr	r3, [pc, #304]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041be:	4b49      	ldr	r3, [pc, #292]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d11c      	bne.n	8004204 <HAL_RCC_OscConfig+0x18c>
 80041ca:	4b46      	ldr	r3, [pc, #280]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d116      	bne.n	8004204 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d6:	4b43      	ldr	r3, [pc, #268]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_RCC_OscConfig+0x176>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d001      	beq.n	80041ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e1c0      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ee:	4b3d      	ldr	r3, [pc, #244]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4939      	ldr	r1, [pc, #228]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	e03a      	b.n	800427a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800420c:	4b36      	ldr	r3, [pc, #216]	@ (80042e8 <HAL_RCC_OscConfig+0x270>)
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004212:	f7fe fb07 	bl	8002824 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800421a:	f7fe fb03 	bl	8002824 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e1a1      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422c:	4b2d      	ldr	r3, [pc, #180]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004238:	4b2a      	ldr	r3, [pc, #168]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4927      	ldr	r1, [pc, #156]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]
 800424c:	e015      	b.n	800427a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800424e:	4b26      	ldr	r3, [pc, #152]	@ (80042e8 <HAL_RCC_OscConfig+0x270>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fe fae6 	bl	8002824 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800425c:	f7fe fae2 	bl	8002824 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e180      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426e:	4b1d      	ldr	r3, [pc, #116]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d03a      	beq.n	80042fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d019      	beq.n	80042c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428e:	4b17      	ldr	r3, [pc, #92]	@ (80042ec <HAL_RCC_OscConfig+0x274>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004294:	f7fe fac6 	bl	8002824 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800429c:	f7fe fac2 	bl	8002824 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e160      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ae:	4b0d      	ldr	r3, [pc, #52]	@ (80042e4 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042ba:	2001      	movs	r0, #1
 80042bc:	f000 face 	bl	800485c <RCC_Delay>
 80042c0:	e01c      	b.n	80042fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c2:	4b0a      	ldr	r3, [pc, #40]	@ (80042ec <HAL_RCC_OscConfig+0x274>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c8:	f7fe faac 	bl	8002824 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ce:	e00f      	b.n	80042f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d0:	f7fe faa8 	bl	8002824 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d908      	bls.n	80042f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e146      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000
 80042e8:	42420000 	.word	0x42420000
 80042ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	4b92      	ldr	r3, [pc, #584]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e9      	bne.n	80042d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80a6 	beq.w	8004456 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430e:	4b8b      	ldr	r3, [pc, #556]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10d      	bne.n	8004336 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	4b88      	ldr	r3, [pc, #544]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	4a87      	ldr	r2, [pc, #540]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 8004320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004324:	61d3      	str	r3, [r2, #28]
 8004326:	4b85      	ldr	r3, [pc, #532]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004336:	4b82      	ldr	r3, [pc, #520]	@ (8004540 <HAL_RCC_OscConfig+0x4c8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d118      	bne.n	8004374 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004342:	4b7f      	ldr	r3, [pc, #508]	@ (8004540 <HAL_RCC_OscConfig+0x4c8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a7e      	ldr	r2, [pc, #504]	@ (8004540 <HAL_RCC_OscConfig+0x4c8>)
 8004348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800434c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434e:	f7fe fa69 	bl	8002824 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004356:	f7fe fa65 	bl	8002824 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b64      	cmp	r3, #100	@ 0x64
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e103      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004368:	4b75      	ldr	r3, [pc, #468]	@ (8004540 <HAL_RCC_OscConfig+0x4c8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d106      	bne.n	800438a <HAL_RCC_OscConfig+0x312>
 800437c:	4b6f      	ldr	r3, [pc, #444]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	4a6e      	ldr	r2, [pc, #440]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6213      	str	r3, [r2, #32]
 8004388:	e02d      	b.n	80043e6 <HAL_RCC_OscConfig+0x36e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0x334>
 8004392:	4b6a      	ldr	r3, [pc, #424]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	4a69      	ldr	r2, [pc, #420]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	6213      	str	r3, [r2, #32]
 800439e:	4b67      	ldr	r3, [pc, #412]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	4a66      	ldr	r2, [pc, #408]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80043a4:	f023 0304 	bic.w	r3, r3, #4
 80043a8:	6213      	str	r3, [r2, #32]
 80043aa:	e01c      	b.n	80043e6 <HAL_RCC_OscConfig+0x36e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b05      	cmp	r3, #5
 80043b2:	d10c      	bne.n	80043ce <HAL_RCC_OscConfig+0x356>
 80043b4:	4b61      	ldr	r3, [pc, #388]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	4a60      	ldr	r2, [pc, #384]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80043ba:	f043 0304 	orr.w	r3, r3, #4
 80043be:	6213      	str	r3, [r2, #32]
 80043c0:	4b5e      	ldr	r3, [pc, #376]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	4a5d      	ldr	r2, [pc, #372]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	6213      	str	r3, [r2, #32]
 80043cc:	e00b      	b.n	80043e6 <HAL_RCC_OscConfig+0x36e>
 80043ce:	4b5b      	ldr	r3, [pc, #364]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4a5a      	ldr	r2, [pc, #360]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	6213      	str	r3, [r2, #32]
 80043da:	4b58      	ldr	r3, [pc, #352]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	4a57      	ldr	r2, [pc, #348]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80043e0:	f023 0304 	bic.w	r3, r3, #4
 80043e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d015      	beq.n	800441a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ee:	f7fe fa19 	bl	8002824 <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f4:	e00a      	b.n	800440c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f6:	f7fe fa15 	bl	8002824 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004404:	4293      	cmp	r3, r2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e0b1      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440c:	4b4b      	ldr	r3, [pc, #300]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0ee      	beq.n	80043f6 <HAL_RCC_OscConfig+0x37e>
 8004418:	e014      	b.n	8004444 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441a:	f7fe fa03 	bl	8002824 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004420:	e00a      	b.n	8004438 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004422:	f7fe f9ff 	bl	8002824 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e09b      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004438:	4b40      	ldr	r3, [pc, #256]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1ee      	bne.n	8004422 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444a:	4b3c      	ldr	r3, [pc, #240]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4a3b      	ldr	r2, [pc, #236]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 8004450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004454:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8087 	beq.w	800456e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004460:	4b36      	ldr	r3, [pc, #216]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 030c 	and.w	r3, r3, #12
 8004468:	2b08      	cmp	r3, #8
 800446a:	d061      	beq.n	8004530 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d146      	bne.n	8004502 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004474:	4b33      	ldr	r3, [pc, #204]	@ (8004544 <HAL_RCC_OscConfig+0x4cc>)
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447a:	f7fe f9d3 	bl	8002824 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004482:	f7fe f9cf 	bl	8002824 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e06d      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004494:	4b29      	ldr	r3, [pc, #164]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f0      	bne.n	8004482 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a8:	d108      	bne.n	80044bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044aa:	4b24      	ldr	r3, [pc, #144]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4921      	ldr	r1, [pc, #132]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044bc:	4b1f      	ldr	r3, [pc, #124]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a19      	ldr	r1, [r3, #32]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	430b      	orrs	r3, r1
 80044ce:	491b      	ldr	r1, [pc, #108]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004544 <HAL_RCC_OscConfig+0x4cc>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044da:	f7fe f9a3 	bl	8002824 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e2:	f7fe f99f 	bl	8002824 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e03d      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044f4:	4b11      	ldr	r3, [pc, #68]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x46a>
 8004500:	e035      	b.n	800456e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004502:	4b10      	ldr	r3, [pc, #64]	@ (8004544 <HAL_RCC_OscConfig+0x4cc>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004508:	f7fe f98c 	bl	8002824 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004510:	f7fe f988 	bl	8002824 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e026      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004522:	4b06      	ldr	r3, [pc, #24]	@ (800453c <HAL_RCC_OscConfig+0x4c4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x498>
 800452e:	e01e      	b.n	800456e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d107      	bne.n	8004548 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e019      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
 800453c:	40021000 	.word	0x40021000
 8004540:	40007000 	.word	0x40007000
 8004544:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <HAL_RCC_OscConfig+0x500>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	429a      	cmp	r2, r3
 800455a:	d106      	bne.n	800456a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004566:	429a      	cmp	r2, r3
 8004568:	d001      	beq.n	800456e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000

0800457c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0d0      	b.n	8004732 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004590:	4b6a      	ldr	r3, [pc, #424]	@ (800473c <HAL_RCC_ClockConfig+0x1c0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d910      	bls.n	80045c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459e:	4b67      	ldr	r3, [pc, #412]	@ (800473c <HAL_RCC_ClockConfig+0x1c0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 0207 	bic.w	r2, r3, #7
 80045a6:	4965      	ldr	r1, [pc, #404]	@ (800473c <HAL_RCC_ClockConfig+0x1c0>)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ae:	4b63      	ldr	r3, [pc, #396]	@ (800473c <HAL_RCC_ClockConfig+0x1c0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0b8      	b.n	8004732 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d020      	beq.n	800460e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d8:	4b59      	ldr	r3, [pc, #356]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4a58      	ldr	r2, [pc, #352]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045f0:	4b53      	ldr	r3, [pc, #332]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4a52      	ldr	r2, [pc, #328]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 80045f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045fc:	4b50      	ldr	r3, [pc, #320]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	494d      	ldr	r1, [pc, #308]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d040      	beq.n	800469c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d107      	bne.n	8004632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	4b47      	ldr	r3, [pc, #284]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d115      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e07f      	b.n	8004732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463a:	4b41      	ldr	r3, [pc, #260]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e073      	b.n	8004732 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464a:	4b3d      	ldr	r3, [pc, #244]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e06b      	b.n	8004732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800465a:	4b39      	ldr	r3, [pc, #228]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f023 0203 	bic.w	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4936      	ldr	r1, [pc, #216]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800466c:	f7fe f8da 	bl	8002824 <HAL_GetTick>
 8004670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004672:	e00a      	b.n	800468a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004674:	f7fe f8d6 	bl	8002824 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e053      	b.n	8004732 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468a:	4b2d      	ldr	r3, [pc, #180]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 020c 	and.w	r2, r3, #12
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	429a      	cmp	r2, r3
 800469a:	d1eb      	bne.n	8004674 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800469c:	4b27      	ldr	r3, [pc, #156]	@ (800473c <HAL_RCC_ClockConfig+0x1c0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d210      	bcs.n	80046cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b24      	ldr	r3, [pc, #144]	@ (800473c <HAL_RCC_ClockConfig+0x1c0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 0207 	bic.w	r2, r3, #7
 80046b2:	4922      	ldr	r1, [pc, #136]	@ (800473c <HAL_RCC_ClockConfig+0x1c0>)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ba:	4b20      	ldr	r3, [pc, #128]	@ (800473c <HAL_RCC_ClockConfig+0x1c0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e032      	b.n	8004732 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d8:	4b19      	ldr	r3, [pc, #100]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4916      	ldr	r1, [pc, #88]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046f6:	4b12      	ldr	r3, [pc, #72]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	490e      	ldr	r1, [pc, #56]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	4313      	orrs	r3, r2
 8004708:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800470a:	f000 f821 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 800470e:	4602      	mov	r2, r0
 8004710:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <HAL_RCC_ClockConfig+0x1c4>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	490a      	ldr	r1, [pc, #40]	@ (8004744 <HAL_RCC_ClockConfig+0x1c8>)
 800471c:	5ccb      	ldrb	r3, [r1, r3]
 800471e:	fa22 f303 	lsr.w	r3, r2, r3
 8004722:	4a09      	ldr	r2, [pc, #36]	@ (8004748 <HAL_RCC_ClockConfig+0x1cc>)
 8004724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004726:	4b09      	ldr	r3, [pc, #36]	@ (800474c <HAL_RCC_ClockConfig+0x1d0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe f838 	bl	80027a0 <HAL_InitTick>

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40022000 	.word	0x40022000
 8004740:	40021000 	.word	0x40021000
 8004744:	0800900c 	.word	0x0800900c
 8004748:	20000004 	.word	0x20000004
 800474c:	20000008 	.word	0x20000008

08004750 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	2300      	movs	r3, #0
 8004764:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800476a:	4b1e      	ldr	r3, [pc, #120]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b04      	cmp	r3, #4
 8004778:	d002      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x30>
 800477a:	2b08      	cmp	r3, #8
 800477c:	d003      	beq.n	8004786 <HAL_RCC_GetSysClockFreq+0x36>
 800477e:	e027      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004780:	4b19      	ldr	r3, [pc, #100]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004782:	613b      	str	r3, [r7, #16]
      break;
 8004784:	e027      	b.n	80047d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	0c9b      	lsrs	r3, r3, #18
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	4a17      	ldr	r2, [pc, #92]	@ (80047ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8004790:	5cd3      	ldrb	r3, [r2, r3]
 8004792:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d010      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800479e:	4b11      	ldr	r3, [pc, #68]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	0c5b      	lsrs	r3, r3, #17
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	4a11      	ldr	r2, [pc, #68]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80047aa:	5cd3      	ldrb	r3, [r2, r3]
 80047ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a0d      	ldr	r2, [pc, #52]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80047b2:	fb03 f202 	mul.w	r2, r3, r2
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e004      	b.n	80047ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a0c      	ldr	r2, [pc, #48]	@ (80047f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047c4:	fb02 f303 	mul.w	r3, r2, r3
 80047c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	613b      	str	r3, [r7, #16]
      break;
 80047ce:	e002      	b.n	80047d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047d0:	4b05      	ldr	r3, [pc, #20]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80047d2:	613b      	str	r3, [r7, #16]
      break;
 80047d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047d6:	693b      	ldr	r3, [r7, #16]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	007a1200 	.word	0x007a1200
 80047ec:	08009024 	.word	0x08009024
 80047f0:	08009034 	.word	0x08009034
 80047f4:	003d0900 	.word	0x003d0900

080047f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047fc:	4b02      	ldr	r3, [pc, #8]	@ (8004808 <HAL_RCC_GetHCLKFreq+0x10>)
 80047fe:	681b      	ldr	r3, [r3, #0]
}
 8004800:	4618      	mov	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr
 8004808:	20000004 	.word	0x20000004

0800480c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004810:	f7ff fff2 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b05      	ldr	r3, [pc, #20]	@ (800482c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4903      	ldr	r1, [pc, #12]	@ (8004830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40021000 	.word	0x40021000
 8004830:	0800901c 	.word	0x0800901c

08004834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004838:	f7ff ffde 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 800483c:	4602      	mov	r2, r0
 800483e:	4b05      	ldr	r3, [pc, #20]	@ (8004854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	0adb      	lsrs	r3, r3, #11
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	4903      	ldr	r1, [pc, #12]	@ (8004858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800484a:	5ccb      	ldrb	r3, [r1, r3]
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000
 8004858:	0800901c 	.word	0x0800901c

0800485c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004864:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <RCC_Delay+0x34>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a0a      	ldr	r2, [pc, #40]	@ (8004894 <RCC_Delay+0x38>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	0a5b      	lsrs	r3, r3, #9
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	fb02 f303 	mul.w	r3, r2, r3
 8004876:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004878:	bf00      	nop
  }
  while (Delay --);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1e5a      	subs	r2, r3, #1
 800487e:	60fa      	str	r2, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f9      	bne.n	8004878 <RCC_Delay+0x1c>
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr
 8004890:	20000004 	.word	0x20000004
 8004894:	10624dd3 	.word	0x10624dd3

08004898 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d07d      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80048b4:	2300      	movs	r3, #0
 80048b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b8:	4b4f      	ldr	r3, [pc, #316]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10d      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c4:	4b4c      	ldr	r3, [pc, #304]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	4a4b      	ldr	r2, [pc, #300]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ce:	61d3      	str	r3, [r2, #28]
 80048d0:	4b49      	ldr	r3, [pc, #292]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048dc:	2301      	movs	r3, #1
 80048de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	4b46      	ldr	r3, [pc, #280]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d118      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ec:	4b43      	ldr	r3, [pc, #268]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a42      	ldr	r2, [pc, #264]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f8:	f7fd ff94 	bl	8002824 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fe:	e008      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004900:	f7fd ff90 	bl	8002824 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b64      	cmp	r3, #100	@ 0x64
 800490c:	d901      	bls.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e06d      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004912:	4b3a      	ldr	r3, [pc, #232]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800491e:	4b36      	ldr	r3, [pc, #216]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004926:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d02e      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	429a      	cmp	r2, r3
 800493a:	d027      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800493c:	4b2e      	ldr	r3, [pc, #184]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004944:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004946:	4b2e      	ldr	r3, [pc, #184]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800494c:	4b2c      	ldr	r3, [pc, #176]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004952:	4a29      	ldr	r2, [pc, #164]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d014      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004962:	f7fd ff5f 	bl	8002824 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004968:	e00a      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496a:	f7fd ff5b 	bl	8002824 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004978:	4293      	cmp	r3, r2
 800497a:	d901      	bls.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e036      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004980:	4b1d      	ldr	r3, [pc, #116]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0ee      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800498c:	4b1a      	ldr	r3, [pc, #104]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4917      	ldr	r1, [pc, #92]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499a:	4313      	orrs	r3, r2
 800499c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d105      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a4:	4b14      	ldr	r3, [pc, #80]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	4a13      	ldr	r2, [pc, #76]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049bc:	4b0e      	ldr	r3, [pc, #56]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	490b      	ldr	r1, [pc, #44]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049da:	4b07      	ldr	r3, [pc, #28]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	4904      	ldr	r1, [pc, #16]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40007000 	.word	0x40007000
 8004a00:	42420440 	.word	0x42420440

08004a04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	2300      	movs	r3, #0
 8004a16:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b10      	cmp	r3, #16
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	f200 808a 	bhi.w	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d045      	beq.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d075      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004a3a:	e082      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004a3c:	4b46      	ldr	r3, [pc, #280]	@ (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004a42:	4b45      	ldr	r3, [pc, #276]	@ (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d07b      	beq.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	0c9b      	lsrs	r3, r3, #18
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	4a41      	ldr	r2, [pc, #260]	@ (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004a58:	5cd3      	ldrb	r3, [r2, r3]
 8004a5a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d015      	beq.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a66:	4b3c      	ldr	r3, [pc, #240]	@ (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	0c5b      	lsrs	r3, r3, #17
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	4a3b      	ldr	r2, [pc, #236]	@ (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004a72:	5cd3      	ldrb	r3, [r2, r3]
 8004a74:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00d      	beq.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004a80:	4a38      	ldr	r2, [pc, #224]	@ (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	e004      	b.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4a34      	ldr	r2, [pc, #208]	@ (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aa8:	d102      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	61bb      	str	r3, [r7, #24]
      break;
 8004aae:	e04a      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	61bb      	str	r3, [r7, #24]
      break;
 8004abe:	e042      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004ac0:	4b25      	ldr	r3, [pc, #148]	@ (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad0:	d108      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004adc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	e01f      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aee:	d109      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004af0:	4b19      	ldr	r3, [pc, #100]	@ (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004afc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	e00f      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b0e:	d11c      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004b10:	4b11      	ldr	r3, [pc, #68]	@ (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d016      	beq.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004b1c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004b20:	61bb      	str	r3, [r7, #24]
      break;
 8004b22:	e012      	b.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004b24:	e011      	b.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004b26:	f7ff fe85 	bl	8004834 <HAL_RCC_GetPCLK2Freq>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	0b9b      	lsrs	r3, r3, #14
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	3301      	adds	r3, #1
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	61bb      	str	r3, [r7, #24]
      break;
 8004b40:	e004      	b.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b42:	bf00      	nop
 8004b44:	e002      	b.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b46:	bf00      	nop
 8004b48:	e000      	b.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b4a:	bf00      	nop
    }
  }
  return (frequency);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	08009038 	.word	0x08009038
 8004b60:	08009048 	.word	0x08009048
 8004b64:	007a1200 	.word	0x007a1200
 8004b68:	003d0900 	.word	0x003d0900
 8004b6c:	aaaaaaab 	.word	0xaaaaaaab

08004b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e041      	b.n	8004c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fd fd1e 	bl	80025d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f000 fd48 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d001      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e03a      	b.n	8004c9e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a18      	ldr	r2, [pc, #96]	@ (8004ca8 <HAL_TIM_Base_Start_IT+0x98>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x58>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c52:	d009      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x58>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a14      	ldr	r2, [pc, #80]	@ (8004cac <HAL_TIM_Base_Start_IT+0x9c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x58>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a13      	ldr	r2, [pc, #76]	@ (8004cb0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d111      	bne.n	8004c8c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b06      	cmp	r3, #6
 8004c78:	d010      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8a:	e007      	b.n	8004c9c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	40012c00 	.word	0x40012c00
 8004cac:	40000400 	.word	0x40000400
 8004cb0:	40000800 	.word	0x40000800

08004cb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e041      	b.n	8004d4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f839 	bl	8004d52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f000 fca6 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d109      	bne.n	8004d88 <HAL_TIM_PWM_Start+0x24>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e022      	b.n	8004dce <HAL_TIM_PWM_Start+0x6a>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d109      	bne.n	8004da2 <HAL_TIM_PWM_Start+0x3e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	e015      	b.n	8004dce <HAL_TIM_PWM_Start+0x6a>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d109      	bne.n	8004dbc <HAL_TIM_PWM_Start+0x58>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	bf14      	ite	ne
 8004db4:	2301      	movne	r3, #1
 8004db6:	2300      	moveq	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	e008      	b.n	8004dce <HAL_TIM_PWM_Start+0x6a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e05e      	b.n	8004e94 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_PWM_Start+0x82>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de4:	e013      	b.n	8004e0e <HAL_TIM_PWM_Start+0xaa>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_PWM_Start+0x92>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004df4:	e00b      	b.n	8004e0e <HAL_TIM_PWM_Start+0xaa>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start+0xa2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e04:	e003      	b.n	8004e0e <HAL_TIM_PWM_Start+0xaa>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2201      	movs	r2, #1
 8004e14:	6839      	ldr	r1, [r7, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fea0 	bl	8005b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1e      	ldr	r2, [pc, #120]	@ (8004e9c <HAL_TIM_PWM_Start+0x138>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d107      	bne.n	8004e36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a18      	ldr	r2, [pc, #96]	@ (8004e9c <HAL_TIM_PWM_Start+0x138>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_TIM_PWM_Start+0xfa>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e48:	d009      	beq.n	8004e5e <HAL_TIM_PWM_Start+0xfa>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <HAL_TIM_PWM_Start+0x13c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_TIM_PWM_Start+0xfa>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a12      	ldr	r2, [pc, #72]	@ (8004ea4 <HAL_TIM_PWM_Start+0x140>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d111      	bne.n	8004e82 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b06      	cmp	r3, #6
 8004e6e:	d010      	beq.n	8004e92 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e80:	e007      	b.n	8004e92 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0201 	orr.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800

08004ea8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e093      	b.n	8004fe4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fd fbb9 	bl	8002648 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eec:	f023 0307 	bic.w	r3, r3, #7
 8004ef0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f000 fba1 	bl	8005644 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004f48:	f023 030c 	bic.w	r3, r3, #12
 8004f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	4313      	orrs	r3, r2
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	011a      	lsls	r2, r3, #4
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	031b      	lsls	r3, r3, #12
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004f86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	4313      	orrs	r3, r2
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ffc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005004:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800500c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005014:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d110      	bne.n	800503e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d102      	bne.n	8005028 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005022:	7b7b      	ldrb	r3, [r7, #13]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d001      	beq.n	800502c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e069      	b.n	8005100 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800503c:	e031      	b.n	80050a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b04      	cmp	r3, #4
 8005042:	d110      	bne.n	8005066 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005044:	7bbb      	ldrb	r3, [r7, #14]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d102      	bne.n	8005050 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800504a:	7b3b      	ldrb	r3, [r7, #12]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d001      	beq.n	8005054 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e055      	b.n	8005100 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005064:	e01d      	b.n	80050a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d108      	bne.n	800507e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800506c:	7bbb      	ldrb	r3, [r7, #14]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d105      	bne.n	800507e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005072:	7b7b      	ldrb	r3, [r7, #13]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d102      	bne.n	800507e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005078:	7b3b      	ldrb	r3, [r7, #12]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d001      	beq.n	8005082 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e03e      	b.n	8005100 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2202      	movs	r2, #2
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_TIM_Encoder_Start+0xc4>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d008      	beq.n	80050c0 <HAL_TIM_Encoder_Start+0xd4>
 80050ae:	e00f      	b.n	80050d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2201      	movs	r2, #1
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fd4f 	bl	8005b5c <TIM_CCxChannelCmd>
      break;
 80050be:	e016      	b.n	80050ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2201      	movs	r2, #1
 80050c6:	2104      	movs	r1, #4
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fd47 	bl	8005b5c <TIM_CCxChannelCmd>
      break;
 80050ce:	e00e      	b.n	80050ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2201      	movs	r2, #1
 80050d6:	2100      	movs	r1, #0
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fd3f 	bl	8005b5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2201      	movs	r2, #1
 80050e4:	2104      	movs	r1, #4
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fd38 	bl	8005b5c <TIM_CCxChannelCmd>
      break;
 80050ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0201 	orr.w	r2, r2, #1
 80050fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d020      	beq.n	800516c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01b      	beq.n	800516c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0202 	mvn.w	r2, #2
 800513c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa5a 	bl	800560c <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fa4d 	bl	80055fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fa5c 	bl	800561e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d020      	beq.n	80051b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01b      	beq.n	80051b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0204 	mvn.w	r2, #4
 8005188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fa34 	bl	800560c <HAL_TIM_IC_CaptureCallback>
 80051a4:	e005      	b.n	80051b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fa27 	bl	80055fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fa36 	bl	800561e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d020      	beq.n	8005204 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01b      	beq.n	8005204 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0208 	mvn.w	r2, #8
 80051d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2204      	movs	r2, #4
 80051da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fa0e 	bl	800560c <HAL_TIM_IC_CaptureCallback>
 80051f0:	e005      	b.n	80051fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa01 	bl	80055fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fa10 	bl	800561e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b00      	cmp	r3, #0
 800520c:	d020      	beq.n	8005250 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01b      	beq.n	8005250 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0210 	mvn.w	r2, #16
 8005220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2208      	movs	r2, #8
 8005226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f9e8 	bl	800560c <HAL_TIM_IC_CaptureCallback>
 800523c:	e005      	b.n	800524a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9db 	bl	80055fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f9ea 	bl	800561e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00c      	beq.n	8005274 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0201 	mvn.w	r2, #1
 800526c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fc fa4c 	bl	800170c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00c      	beq.n	8005298 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fced 	bl	8005c72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00c      	beq.n	80052bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d007      	beq.n	80052bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f9ba 	bl	8005630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00c      	beq.n	80052e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0220 	mvn.w	r2, #32
 80052d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fcc0 	bl	8005c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005302:	2302      	movs	r3, #2
 8005304:	e0ae      	b.n	8005464 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b0c      	cmp	r3, #12
 8005312:	f200 809f 	bhi.w	8005454 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005316:	a201      	add	r2, pc, #4	@ (adr r2, 800531c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	08005351 	.word	0x08005351
 8005320:	08005455 	.word	0x08005455
 8005324:	08005455 	.word	0x08005455
 8005328:	08005455 	.word	0x08005455
 800532c:	08005391 	.word	0x08005391
 8005330:	08005455 	.word	0x08005455
 8005334:	08005455 	.word	0x08005455
 8005338:	08005455 	.word	0x08005455
 800533c:	080053d3 	.word	0x080053d3
 8005340:	08005455 	.word	0x08005455
 8005344:	08005455 	.word	0x08005455
 8005348:	08005455 	.word	0x08005455
 800534c:	08005413 	.word	0x08005413
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	4618      	mov	r0, r3
 8005358:	f000 f9e2 	bl	8005720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0208 	orr.w	r2, r2, #8
 800536a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0204 	bic.w	r2, r2, #4
 800537a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6999      	ldr	r1, [r3, #24]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	619a      	str	r2, [r3, #24]
      break;
 800538e:	e064      	b.n	800545a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fa28 	bl	80057ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6999      	ldr	r1, [r3, #24]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	021a      	lsls	r2, r3, #8
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	619a      	str	r2, [r3, #24]
      break;
 80053d0:	e043      	b.n	800545a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fa71 	bl	80058c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69da      	ldr	r2, [r3, #28]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0208 	orr.w	r2, r2, #8
 80053ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0204 	bic.w	r2, r2, #4
 80053fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69d9      	ldr	r1, [r3, #28]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	61da      	str	r2, [r3, #28]
      break;
 8005410:	e023      	b.n	800545a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fabb 	bl	8005994 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800542c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800543c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69d9      	ldr	r1, [r3, #28]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	021a      	lsls	r2, r3, #8
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	61da      	str	r2, [r3, #28]
      break;
 8005452:	e002      	b.n	800545a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	75fb      	strb	r3, [r7, #23]
      break;
 8005458:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIM_ConfigClockSource+0x1c>
 8005484:	2302      	movs	r3, #2
 8005486:	e0b4      	b.n	80055f2 <HAL_TIM_ConfigClockSource+0x186>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054c0:	d03e      	beq.n	8005540 <HAL_TIM_ConfigClockSource+0xd4>
 80054c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054c6:	f200 8087 	bhi.w	80055d8 <HAL_TIM_ConfigClockSource+0x16c>
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ce:	f000 8086 	beq.w	80055de <HAL_TIM_ConfigClockSource+0x172>
 80054d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d6:	d87f      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x16c>
 80054d8:	2b70      	cmp	r3, #112	@ 0x70
 80054da:	d01a      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0xa6>
 80054dc:	2b70      	cmp	r3, #112	@ 0x70
 80054de:	d87b      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x16c>
 80054e0:	2b60      	cmp	r3, #96	@ 0x60
 80054e2:	d050      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x11a>
 80054e4:	2b60      	cmp	r3, #96	@ 0x60
 80054e6:	d877      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x16c>
 80054e8:	2b50      	cmp	r3, #80	@ 0x50
 80054ea:	d03c      	beq.n	8005566 <HAL_TIM_ConfigClockSource+0xfa>
 80054ec:	2b50      	cmp	r3, #80	@ 0x50
 80054ee:	d873      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x16c>
 80054f0:	2b40      	cmp	r3, #64	@ 0x40
 80054f2:	d058      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0x13a>
 80054f4:	2b40      	cmp	r3, #64	@ 0x40
 80054f6:	d86f      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x16c>
 80054f8:	2b30      	cmp	r3, #48	@ 0x30
 80054fa:	d064      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x15a>
 80054fc:	2b30      	cmp	r3, #48	@ 0x30
 80054fe:	d86b      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005500:	2b20      	cmp	r3, #32
 8005502:	d060      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005504:	2b20      	cmp	r3, #32
 8005506:	d867      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d05c      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x15a>
 800550c:	2b10      	cmp	r3, #16
 800550e:	d05a      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005510:	e062      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005522:	f000 fafc 	bl	8005b1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	609a      	str	r2, [r3, #8]
      break;
 800553e:	e04f      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005550:	f000 fae5 	bl	8005b1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005562:	609a      	str	r2, [r3, #8]
      break;
 8005564:	e03c      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005572:	461a      	mov	r2, r3
 8005574:	f000 fa5c 	bl	8005a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2150      	movs	r1, #80	@ 0x50
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fab3 	bl	8005aea <TIM_ITRx_SetConfig>
      break;
 8005584:	e02c      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005592:	461a      	mov	r2, r3
 8005594:	f000 fa7a 	bl	8005a8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2160      	movs	r1, #96	@ 0x60
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 faa3 	bl	8005aea <TIM_ITRx_SetConfig>
      break;
 80055a4:	e01c      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055b2:	461a      	mov	r2, r3
 80055b4:	f000 fa3c 	bl	8005a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2140      	movs	r1, #64	@ 0x40
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fa93 	bl	8005aea <TIM_ITRx_SetConfig>
      break;
 80055c4:	e00c      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4619      	mov	r1, r3
 80055d0:	4610      	mov	r0, r2
 80055d2:	f000 fa8a 	bl	8005aea <TIM_ITRx_SetConfig>
      break;
 80055d6:	e003      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
      break;
 80055dc:	e000      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr

0800561e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr
	...

08005644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a2f      	ldr	r2, [pc, #188]	@ (8005714 <TIM_Base_SetConfig+0xd0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_Base_SetConfig+0x30>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005662:	d007      	beq.n	8005674 <TIM_Base_SetConfig+0x30>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a2c      	ldr	r2, [pc, #176]	@ (8005718 <TIM_Base_SetConfig+0xd4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0x30>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a2b      	ldr	r2, [pc, #172]	@ (800571c <TIM_Base_SetConfig+0xd8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d108      	bne.n	8005686 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a22      	ldr	r2, [pc, #136]	@ (8005714 <TIM_Base_SetConfig+0xd0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00b      	beq.n	80056a6 <TIM_Base_SetConfig+0x62>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005694:	d007      	beq.n	80056a6 <TIM_Base_SetConfig+0x62>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a1f      	ldr	r2, [pc, #124]	@ (8005718 <TIM_Base_SetConfig+0xd4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d003      	beq.n	80056a6 <TIM_Base_SetConfig+0x62>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a1e      	ldr	r2, [pc, #120]	@ (800571c <TIM_Base_SetConfig+0xd8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d108      	bne.n	80056b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a0d      	ldr	r2, [pc, #52]	@ (8005714 <TIM_Base_SetConfig+0xd0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d103      	bne.n	80056ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f023 0201 	bic.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	611a      	str	r2, [r3, #16]
  }
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800

08005720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f023 0201 	bic.w	r2, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0303 	bic.w	r3, r3, #3
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 0302 	bic.w	r3, r3, #2
 8005768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a1c      	ldr	r2, [pc, #112]	@ (80057e8 <TIM_OC1_SetConfig+0xc8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d10c      	bne.n	8005796 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0308 	bic.w	r3, r3, #8
 8005782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 0304 	bic.w	r3, r3, #4
 8005794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a13      	ldr	r2, [pc, #76]	@ (80057e8 <TIM_OC1_SetConfig+0xc8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d111      	bne.n	80057c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	621a      	str	r2, [r3, #32]
}
 80057dc:	bf00      	nop
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40012c00 	.word	0x40012c00

080057ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f023 0210 	bic.w	r2, r3, #16
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 0320 	bic.w	r3, r3, #32
 8005836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a1d      	ldr	r2, [pc, #116]	@ (80058bc <TIM_OC2_SetConfig+0xd0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d10d      	bne.n	8005868 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005866:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a14      	ldr	r2, [pc, #80]	@ (80058bc <TIM_OC2_SetConfig+0xd0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d113      	bne.n	8005898 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800587e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	621a      	str	r2, [r3, #32]
}
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr
 80058bc:	40012c00 	.word	0x40012c00

080058c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a1d      	ldr	r2, [pc, #116]	@ (8005990 <TIM_OC3_SetConfig+0xd0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d10d      	bne.n	800593a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a14      	ldr	r2, [pc, #80]	@ (8005990 <TIM_OC3_SetConfig+0xd0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d113      	bne.n	800596a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	621a      	str	r2, [r3, #32]
}
 8005984:	bf00      	nop
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40012c00 	.word	0x40012c00

08005994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	021b      	lsls	r3, r3, #8
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	031b      	lsls	r3, r3, #12
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a0f      	ldr	r2, [pc, #60]	@ (8005a2c <TIM_OC4_SetConfig+0x98>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d109      	bne.n	8005a08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	019b      	lsls	r3, r3, #6
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	40012c00 	.word	0x40012c00

08005a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f023 0201 	bic.w	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f023 030a 	bic.w	r3, r3, #10
 8005a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	621a      	str	r2, [r3, #32]
}
 8005a82:	bf00      	nop
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr

08005a8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	f023 0210 	bic.w	r2, r3, #16
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	031b      	lsls	r3, r3, #12
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	621a      	str	r2, [r3, #32]
}
 8005ae0:	bf00      	nop
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f043 0307 	orr.w	r3, r3, #7
 8005b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	609a      	str	r2, [r3, #8]
}
 8005b14:	bf00      	nop
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr

08005b1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b087      	sub	sp, #28
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	021a      	lsls	r2, r3, #8
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	609a      	str	r2, [r3, #8]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr

08005b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 031f 	and.w	r3, r3, #31
 8005b6e:	2201      	movs	r2, #1
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1a      	ldr	r2, [r3, #32]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	401a      	ands	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a1a      	ldr	r2, [r3, #32]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 031f 	and.w	r3, r3, #31
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	fa01 f303 	lsl.w	r3, r1, r3
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e046      	b.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a16      	ldr	r2, [pc, #88]	@ (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00e      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c08:	d009      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a12      	ldr	r2, [pc, #72]	@ (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d004      	beq.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a10      	ldr	r2, [pc, #64]	@ (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d10c      	bne.n	8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr
 8005c54:	40012c00 	.word	0x40012c00
 8005c58:	40000400 	.word	0x40000400
 8005c5c:	40000800 	.word	0x40000800

08005c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr

08005c72 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr

08005c84 <__cvt>:
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8a:	461d      	mov	r5, r3
 8005c8c:	bfbb      	ittet	lt
 8005c8e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005c92:	461d      	movlt	r5, r3
 8005c94:	2300      	movge	r3, #0
 8005c96:	232d      	movlt	r3, #45	@ 0x2d
 8005c98:	b088      	sub	sp, #32
 8005c9a:	4614      	mov	r4, r2
 8005c9c:	bfb8      	it	lt
 8005c9e:	4614      	movlt	r4, r2
 8005ca0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ca2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005ca4:	7013      	strb	r3, [r2, #0]
 8005ca6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ca8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005cac:	f023 0820 	bic.w	r8, r3, #32
 8005cb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005cb4:	d005      	beq.n	8005cc2 <__cvt+0x3e>
 8005cb6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005cba:	d100      	bne.n	8005cbe <__cvt+0x3a>
 8005cbc:	3601      	adds	r6, #1
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e000      	b.n	8005cc4 <__cvt+0x40>
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	aa07      	add	r2, sp, #28
 8005cc6:	9204      	str	r2, [sp, #16]
 8005cc8:	aa06      	add	r2, sp, #24
 8005cca:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005cce:	e9cd 3600 	strd	r3, r6, [sp]
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	f000 fe8b 	bl	80069f0 <_dtoa_r>
 8005cda:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005cde:	4607      	mov	r7, r0
 8005ce0:	d119      	bne.n	8005d16 <__cvt+0x92>
 8005ce2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ce4:	07db      	lsls	r3, r3, #31
 8005ce6:	d50e      	bpl.n	8005d06 <__cvt+0x82>
 8005ce8:	eb00 0906 	add.w	r9, r0, r6
 8005cec:	2200      	movs	r2, #0
 8005cee:	2300      	movs	r3, #0
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	f7fa fe58 	bl	80009a8 <__aeabi_dcmpeq>
 8005cf8:	b108      	cbz	r0, 8005cfe <__cvt+0x7a>
 8005cfa:	f8cd 901c 	str.w	r9, [sp, #28]
 8005cfe:	2230      	movs	r2, #48	@ 0x30
 8005d00:	9b07      	ldr	r3, [sp, #28]
 8005d02:	454b      	cmp	r3, r9
 8005d04:	d31e      	bcc.n	8005d44 <__cvt+0xc0>
 8005d06:	4638      	mov	r0, r7
 8005d08:	9b07      	ldr	r3, [sp, #28]
 8005d0a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005d0c:	1bdb      	subs	r3, r3, r7
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	b008      	add	sp, #32
 8005d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d16:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d1a:	eb00 0906 	add.w	r9, r0, r6
 8005d1e:	d1e5      	bne.n	8005cec <__cvt+0x68>
 8005d20:	7803      	ldrb	r3, [r0, #0]
 8005d22:	2b30      	cmp	r3, #48	@ 0x30
 8005d24:	d10a      	bne.n	8005d3c <__cvt+0xb8>
 8005d26:	2200      	movs	r2, #0
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f7fa fe3b 	bl	80009a8 <__aeabi_dcmpeq>
 8005d32:	b918      	cbnz	r0, 8005d3c <__cvt+0xb8>
 8005d34:	f1c6 0601 	rsb	r6, r6, #1
 8005d38:	f8ca 6000 	str.w	r6, [sl]
 8005d3c:	f8da 3000 	ldr.w	r3, [sl]
 8005d40:	4499      	add	r9, r3
 8005d42:	e7d3      	b.n	8005cec <__cvt+0x68>
 8005d44:	1c59      	adds	r1, r3, #1
 8005d46:	9107      	str	r1, [sp, #28]
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	e7d9      	b.n	8005d00 <__cvt+0x7c>

08005d4c <__exponent>:
 8005d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d4e:	2900      	cmp	r1, #0
 8005d50:	bfb6      	itet	lt
 8005d52:	232d      	movlt	r3, #45	@ 0x2d
 8005d54:	232b      	movge	r3, #43	@ 0x2b
 8005d56:	4249      	neglt	r1, r1
 8005d58:	2909      	cmp	r1, #9
 8005d5a:	7002      	strb	r2, [r0, #0]
 8005d5c:	7043      	strb	r3, [r0, #1]
 8005d5e:	dd29      	ble.n	8005db4 <__exponent+0x68>
 8005d60:	f10d 0307 	add.w	r3, sp, #7
 8005d64:	461d      	mov	r5, r3
 8005d66:	270a      	movs	r7, #10
 8005d68:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	fb07 1416 	mls	r4, r7, r6, r1
 8005d72:	3430      	adds	r4, #48	@ 0x30
 8005d74:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005d78:	460c      	mov	r4, r1
 8005d7a:	2c63      	cmp	r4, #99	@ 0x63
 8005d7c:	4631      	mov	r1, r6
 8005d7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d82:	dcf1      	bgt.n	8005d68 <__exponent+0x1c>
 8005d84:	3130      	adds	r1, #48	@ 0x30
 8005d86:	1e94      	subs	r4, r2, #2
 8005d88:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d8c:	4623      	mov	r3, r4
 8005d8e:	1c41      	adds	r1, r0, #1
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	d30a      	bcc.n	8005daa <__exponent+0x5e>
 8005d94:	f10d 0309 	add.w	r3, sp, #9
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	42ac      	cmp	r4, r5
 8005d9c:	bf88      	it	hi
 8005d9e:	2300      	movhi	r3, #0
 8005da0:	3302      	adds	r3, #2
 8005da2:	4403      	add	r3, r0
 8005da4:	1a18      	subs	r0, r3, r0
 8005da6:	b003      	add	sp, #12
 8005da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005daa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005dae:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005db2:	e7ed      	b.n	8005d90 <__exponent+0x44>
 8005db4:	2330      	movs	r3, #48	@ 0x30
 8005db6:	3130      	adds	r1, #48	@ 0x30
 8005db8:	7083      	strb	r3, [r0, #2]
 8005dba:	70c1      	strb	r1, [r0, #3]
 8005dbc:	1d03      	adds	r3, r0, #4
 8005dbe:	e7f1      	b.n	8005da4 <__exponent+0x58>

08005dc0 <_printf_float>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	b091      	sub	sp, #68	@ 0x44
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005dcc:	4616      	mov	r6, r2
 8005dce:	461f      	mov	r7, r3
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	f000 fcf1 	bl	80067b8 <_localeconv_r>
 8005dd6:	6803      	ldr	r3, [r0, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	9308      	str	r3, [sp, #32]
 8005ddc:	f7fa f9b8 	bl	8000150 <strlen>
 8005de0:	2300      	movs	r3, #0
 8005de2:	930e      	str	r3, [sp, #56]	@ 0x38
 8005de4:	f8d8 3000 	ldr.w	r3, [r8]
 8005de8:	9009      	str	r0, [sp, #36]	@ 0x24
 8005dea:	3307      	adds	r3, #7
 8005dec:	f023 0307 	bic.w	r3, r3, #7
 8005df0:	f103 0208 	add.w	r2, r3, #8
 8005df4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005df8:	f8d4 b000 	ldr.w	fp, [r4]
 8005dfc:	f8c8 2000 	str.w	r2, [r8]
 8005e00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e0a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e1a:	4b9c      	ldr	r3, [pc, #624]	@ (800608c <_printf_float+0x2cc>)
 8005e1c:	f7fa fdf6 	bl	8000a0c <__aeabi_dcmpun>
 8005e20:	bb70      	cbnz	r0, 8005e80 <_printf_float+0xc0>
 8005e22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	4b98      	ldr	r3, [pc, #608]	@ (800608c <_printf_float+0x2cc>)
 8005e2c:	f7fa fdd0 	bl	80009d0 <__aeabi_dcmple>
 8005e30:	bb30      	cbnz	r0, 8005e80 <_printf_float+0xc0>
 8005e32:	2200      	movs	r2, #0
 8005e34:	2300      	movs	r3, #0
 8005e36:	4640      	mov	r0, r8
 8005e38:	4649      	mov	r1, r9
 8005e3a:	f7fa fdbf 	bl	80009bc <__aeabi_dcmplt>
 8005e3e:	b110      	cbz	r0, 8005e46 <_printf_float+0x86>
 8005e40:	232d      	movs	r3, #45	@ 0x2d
 8005e42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e46:	4a92      	ldr	r2, [pc, #584]	@ (8006090 <_printf_float+0x2d0>)
 8005e48:	4b92      	ldr	r3, [pc, #584]	@ (8006094 <_printf_float+0x2d4>)
 8005e4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005e4e:	bf94      	ite	ls
 8005e50:	4690      	movls	r8, r2
 8005e52:	4698      	movhi	r8, r3
 8005e54:	2303      	movs	r3, #3
 8005e56:	f04f 0900 	mov.w	r9, #0
 8005e5a:	6123      	str	r3, [r4, #16]
 8005e5c:	f02b 0304 	bic.w	r3, fp, #4
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	4633      	mov	r3, r6
 8005e64:	4621      	mov	r1, r4
 8005e66:	4628      	mov	r0, r5
 8005e68:	9700      	str	r7, [sp, #0]
 8005e6a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005e6c:	f000 f9d4 	bl	8006218 <_printf_common>
 8005e70:	3001      	adds	r0, #1
 8005e72:	f040 8090 	bne.w	8005f96 <_printf_float+0x1d6>
 8005e76:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7a:	b011      	add	sp, #68	@ 0x44
 8005e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	4640      	mov	r0, r8
 8005e86:	4649      	mov	r1, r9
 8005e88:	f7fa fdc0 	bl	8000a0c <__aeabi_dcmpun>
 8005e8c:	b148      	cbz	r0, 8005ea2 <_printf_float+0xe2>
 8005e8e:	464b      	mov	r3, r9
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	bfb8      	it	lt
 8005e94:	232d      	movlt	r3, #45	@ 0x2d
 8005e96:	4a80      	ldr	r2, [pc, #512]	@ (8006098 <_printf_float+0x2d8>)
 8005e98:	bfb8      	it	lt
 8005e9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e9e:	4b7f      	ldr	r3, [pc, #508]	@ (800609c <_printf_float+0x2dc>)
 8005ea0:	e7d3      	b.n	8005e4a <_printf_float+0x8a>
 8005ea2:	6863      	ldr	r3, [r4, #4]
 8005ea4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	d13f      	bne.n	8005f2c <_printf_float+0x16c>
 8005eac:	2306      	movs	r3, #6
 8005eae:	6063      	str	r3, [r4, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005eb6:	6023      	str	r3, [r4, #0]
 8005eb8:	9206      	str	r2, [sp, #24]
 8005eba:	aa0e      	add	r2, sp, #56	@ 0x38
 8005ebc:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005ec0:	aa0d      	add	r2, sp, #52	@ 0x34
 8005ec2:	9203      	str	r2, [sp, #12]
 8005ec4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005ec8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005ecc:	6863      	ldr	r3, [r4, #4]
 8005ece:	4642      	mov	r2, r8
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	464b      	mov	r3, r9
 8005ed6:	910a      	str	r1, [sp, #40]	@ 0x28
 8005ed8:	f7ff fed4 	bl	8005c84 <__cvt>
 8005edc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ede:	4680      	mov	r8, r0
 8005ee0:	2947      	cmp	r1, #71	@ 0x47
 8005ee2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005ee4:	d128      	bne.n	8005f38 <_printf_float+0x178>
 8005ee6:	1cc8      	adds	r0, r1, #3
 8005ee8:	db02      	blt.n	8005ef0 <_printf_float+0x130>
 8005eea:	6863      	ldr	r3, [r4, #4]
 8005eec:	4299      	cmp	r1, r3
 8005eee:	dd40      	ble.n	8005f72 <_printf_float+0x1b2>
 8005ef0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ef4:	fa5f fa8a 	uxtb.w	sl, sl
 8005ef8:	4652      	mov	r2, sl
 8005efa:	3901      	subs	r1, #1
 8005efc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f00:	910d      	str	r1, [sp, #52]	@ 0x34
 8005f02:	f7ff ff23 	bl	8005d4c <__exponent>
 8005f06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f08:	4681      	mov	r9, r0
 8005f0a:	1813      	adds	r3, r2, r0
 8005f0c:	2a01      	cmp	r2, #1
 8005f0e:	6123      	str	r3, [r4, #16]
 8005f10:	dc02      	bgt.n	8005f18 <_printf_float+0x158>
 8005f12:	6822      	ldr	r2, [r4, #0]
 8005f14:	07d2      	lsls	r2, r2, #31
 8005f16:	d501      	bpl.n	8005f1c <_printf_float+0x15c>
 8005f18:	3301      	adds	r3, #1
 8005f1a:	6123      	str	r3, [r4, #16]
 8005f1c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d09e      	beq.n	8005e62 <_printf_float+0xa2>
 8005f24:	232d      	movs	r3, #45	@ 0x2d
 8005f26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f2a:	e79a      	b.n	8005e62 <_printf_float+0xa2>
 8005f2c:	2947      	cmp	r1, #71	@ 0x47
 8005f2e:	d1bf      	bne.n	8005eb0 <_printf_float+0xf0>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1bd      	bne.n	8005eb0 <_printf_float+0xf0>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e7ba      	b.n	8005eae <_printf_float+0xee>
 8005f38:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f3c:	d9dc      	bls.n	8005ef8 <_printf_float+0x138>
 8005f3e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f42:	d118      	bne.n	8005f76 <_printf_float+0x1b6>
 8005f44:	2900      	cmp	r1, #0
 8005f46:	6863      	ldr	r3, [r4, #4]
 8005f48:	dd0b      	ble.n	8005f62 <_printf_float+0x1a2>
 8005f4a:	6121      	str	r1, [r4, #16]
 8005f4c:	b913      	cbnz	r3, 8005f54 <_printf_float+0x194>
 8005f4e:	6822      	ldr	r2, [r4, #0]
 8005f50:	07d0      	lsls	r0, r2, #31
 8005f52:	d502      	bpl.n	8005f5a <_printf_float+0x19a>
 8005f54:	3301      	adds	r3, #1
 8005f56:	440b      	add	r3, r1
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	f04f 0900 	mov.w	r9, #0
 8005f5e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005f60:	e7dc      	b.n	8005f1c <_printf_float+0x15c>
 8005f62:	b913      	cbnz	r3, 8005f6a <_printf_float+0x1aa>
 8005f64:	6822      	ldr	r2, [r4, #0]
 8005f66:	07d2      	lsls	r2, r2, #31
 8005f68:	d501      	bpl.n	8005f6e <_printf_float+0x1ae>
 8005f6a:	3302      	adds	r3, #2
 8005f6c:	e7f4      	b.n	8005f58 <_printf_float+0x198>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e7f2      	b.n	8005f58 <_printf_float+0x198>
 8005f72:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f78:	4299      	cmp	r1, r3
 8005f7a:	db05      	blt.n	8005f88 <_printf_float+0x1c8>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	6121      	str	r1, [r4, #16]
 8005f80:	07d8      	lsls	r0, r3, #31
 8005f82:	d5ea      	bpl.n	8005f5a <_printf_float+0x19a>
 8005f84:	1c4b      	adds	r3, r1, #1
 8005f86:	e7e7      	b.n	8005f58 <_printf_float+0x198>
 8005f88:	2900      	cmp	r1, #0
 8005f8a:	bfcc      	ite	gt
 8005f8c:	2201      	movgt	r2, #1
 8005f8e:	f1c1 0202 	rsble	r2, r1, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	e7e0      	b.n	8005f58 <_printf_float+0x198>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	055a      	lsls	r2, r3, #21
 8005f9a:	d407      	bmi.n	8005fac <_printf_float+0x1ec>
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d12b      	bne.n	8006002 <_printf_float+0x242>
 8005faa:	e764      	b.n	8005e76 <_printf_float+0xb6>
 8005fac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005fb0:	f240 80dc 	bls.w	800616c <_printf_float+0x3ac>
 8005fb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f7fa fcf4 	bl	80009a8 <__aeabi_dcmpeq>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d033      	beq.n	800602c <_printf_float+0x26c>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	4a35      	ldr	r2, [pc, #212]	@ (80060a0 <_printf_float+0x2e0>)
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f43f af51 	beq.w	8005e76 <_printf_float+0xb6>
 8005fd4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005fd8:	4543      	cmp	r3, r8
 8005fda:	db02      	blt.n	8005fe2 <_printf_float+0x222>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	07d8      	lsls	r0, r3, #31
 8005fe0:	d50f      	bpl.n	8006002 <_printf_float+0x242>
 8005fe2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	4628      	mov	r0, r5
 8005fea:	47b8      	blx	r7
 8005fec:	3001      	adds	r0, #1
 8005fee:	f43f af42 	beq.w	8005e76 <_printf_float+0xb6>
 8005ff2:	f04f 0900 	mov.w	r9, #0
 8005ff6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ffa:	f104 0a1a 	add.w	sl, r4, #26
 8005ffe:	45c8      	cmp	r8, r9
 8006000:	dc09      	bgt.n	8006016 <_printf_float+0x256>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	079b      	lsls	r3, r3, #30
 8006006:	f100 8102 	bmi.w	800620e <_printf_float+0x44e>
 800600a:	68e0      	ldr	r0, [r4, #12]
 800600c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800600e:	4298      	cmp	r0, r3
 8006010:	bfb8      	it	lt
 8006012:	4618      	movlt	r0, r3
 8006014:	e731      	b.n	8005e7a <_printf_float+0xba>
 8006016:	2301      	movs	r3, #1
 8006018:	4652      	mov	r2, sl
 800601a:	4631      	mov	r1, r6
 800601c:	4628      	mov	r0, r5
 800601e:	47b8      	blx	r7
 8006020:	3001      	adds	r0, #1
 8006022:	f43f af28 	beq.w	8005e76 <_printf_float+0xb6>
 8006026:	f109 0901 	add.w	r9, r9, #1
 800602a:	e7e8      	b.n	8005ffe <_printf_float+0x23e>
 800602c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800602e:	2b00      	cmp	r3, #0
 8006030:	dc38      	bgt.n	80060a4 <_printf_float+0x2e4>
 8006032:	2301      	movs	r3, #1
 8006034:	4631      	mov	r1, r6
 8006036:	4628      	mov	r0, r5
 8006038:	4a19      	ldr	r2, [pc, #100]	@ (80060a0 <_printf_float+0x2e0>)
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	f43f af1a 	beq.w	8005e76 <_printf_float+0xb6>
 8006042:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006046:	ea59 0303 	orrs.w	r3, r9, r3
 800604a:	d102      	bne.n	8006052 <_printf_float+0x292>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	07d9      	lsls	r1, r3, #31
 8006050:	d5d7      	bpl.n	8006002 <_printf_float+0x242>
 8006052:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	f43f af0a 	beq.w	8005e76 <_printf_float+0xb6>
 8006062:	f04f 0a00 	mov.w	sl, #0
 8006066:	f104 0b1a 	add.w	fp, r4, #26
 800606a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800606c:	425b      	negs	r3, r3
 800606e:	4553      	cmp	r3, sl
 8006070:	dc01      	bgt.n	8006076 <_printf_float+0x2b6>
 8006072:	464b      	mov	r3, r9
 8006074:	e793      	b.n	8005f9e <_printf_float+0x1de>
 8006076:	2301      	movs	r3, #1
 8006078:	465a      	mov	r2, fp
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	f43f aef8 	beq.w	8005e76 <_printf_float+0xb6>
 8006086:	f10a 0a01 	add.w	sl, sl, #1
 800608a:	e7ee      	b.n	800606a <_printf_float+0x2aa>
 800608c:	7fefffff 	.word	0x7fefffff
 8006090:	0800904a 	.word	0x0800904a
 8006094:	0800904e 	.word	0x0800904e
 8006098:	08009052 	.word	0x08009052
 800609c:	08009056 	.word	0x08009056
 80060a0:	0800905a 	.word	0x0800905a
 80060a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060a6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80060aa:	4553      	cmp	r3, sl
 80060ac:	bfa8      	it	ge
 80060ae:	4653      	movge	r3, sl
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	4699      	mov	r9, r3
 80060b4:	dc36      	bgt.n	8006124 <_printf_float+0x364>
 80060b6:	f04f 0b00 	mov.w	fp, #0
 80060ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060be:	f104 021a 	add.w	r2, r4, #26
 80060c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80060c6:	eba3 0309 	sub.w	r3, r3, r9
 80060ca:	455b      	cmp	r3, fp
 80060cc:	dc31      	bgt.n	8006132 <_printf_float+0x372>
 80060ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060d0:	459a      	cmp	sl, r3
 80060d2:	dc3a      	bgt.n	800614a <_printf_float+0x38a>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	07da      	lsls	r2, r3, #31
 80060d8:	d437      	bmi.n	800614a <_printf_float+0x38a>
 80060da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060dc:	ebaa 0903 	sub.w	r9, sl, r3
 80060e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060e2:	ebaa 0303 	sub.w	r3, sl, r3
 80060e6:	4599      	cmp	r9, r3
 80060e8:	bfa8      	it	ge
 80060ea:	4699      	movge	r9, r3
 80060ec:	f1b9 0f00 	cmp.w	r9, #0
 80060f0:	dc33      	bgt.n	800615a <_printf_float+0x39a>
 80060f2:	f04f 0800 	mov.w	r8, #0
 80060f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060fa:	f104 0b1a 	add.w	fp, r4, #26
 80060fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006100:	ebaa 0303 	sub.w	r3, sl, r3
 8006104:	eba3 0309 	sub.w	r3, r3, r9
 8006108:	4543      	cmp	r3, r8
 800610a:	f77f af7a 	ble.w	8006002 <_printf_float+0x242>
 800610e:	2301      	movs	r3, #1
 8006110:	465a      	mov	r2, fp
 8006112:	4631      	mov	r1, r6
 8006114:	4628      	mov	r0, r5
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	f43f aeac 	beq.w	8005e76 <_printf_float+0xb6>
 800611e:	f108 0801 	add.w	r8, r8, #1
 8006122:	e7ec      	b.n	80060fe <_printf_float+0x33e>
 8006124:	4642      	mov	r2, r8
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	d1c2      	bne.n	80060b6 <_printf_float+0x2f6>
 8006130:	e6a1      	b.n	8005e76 <_printf_float+0xb6>
 8006132:	2301      	movs	r3, #1
 8006134:	4631      	mov	r1, r6
 8006136:	4628      	mov	r0, r5
 8006138:	920a      	str	r2, [sp, #40]	@ 0x28
 800613a:	47b8      	blx	r7
 800613c:	3001      	adds	r0, #1
 800613e:	f43f ae9a 	beq.w	8005e76 <_printf_float+0xb6>
 8006142:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006144:	f10b 0b01 	add.w	fp, fp, #1
 8006148:	e7bb      	b.n	80060c2 <_printf_float+0x302>
 800614a:	4631      	mov	r1, r6
 800614c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006150:	4628      	mov	r0, r5
 8006152:	47b8      	blx	r7
 8006154:	3001      	adds	r0, #1
 8006156:	d1c0      	bne.n	80060da <_printf_float+0x31a>
 8006158:	e68d      	b.n	8005e76 <_printf_float+0xb6>
 800615a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800615c:	464b      	mov	r3, r9
 800615e:	4631      	mov	r1, r6
 8006160:	4628      	mov	r0, r5
 8006162:	4442      	add	r2, r8
 8006164:	47b8      	blx	r7
 8006166:	3001      	adds	r0, #1
 8006168:	d1c3      	bne.n	80060f2 <_printf_float+0x332>
 800616a:	e684      	b.n	8005e76 <_printf_float+0xb6>
 800616c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006170:	f1ba 0f01 	cmp.w	sl, #1
 8006174:	dc01      	bgt.n	800617a <_printf_float+0x3ba>
 8006176:	07db      	lsls	r3, r3, #31
 8006178:	d536      	bpl.n	80061e8 <_printf_float+0x428>
 800617a:	2301      	movs	r3, #1
 800617c:	4642      	mov	r2, r8
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f ae76 	beq.w	8005e76 <_printf_float+0xb6>
 800618a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800618e:	4631      	mov	r1, r6
 8006190:	4628      	mov	r0, r5
 8006192:	47b8      	blx	r7
 8006194:	3001      	adds	r0, #1
 8006196:	f43f ae6e 	beq.w	8005e76 <_printf_float+0xb6>
 800619a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800619e:	2200      	movs	r2, #0
 80061a0:	2300      	movs	r3, #0
 80061a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061a6:	f7fa fbff 	bl	80009a8 <__aeabi_dcmpeq>
 80061aa:	b9c0      	cbnz	r0, 80061de <_printf_float+0x41e>
 80061ac:	4653      	mov	r3, sl
 80061ae:	f108 0201 	add.w	r2, r8, #1
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	d10c      	bne.n	80061d6 <_printf_float+0x416>
 80061bc:	e65b      	b.n	8005e76 <_printf_float+0xb6>
 80061be:	2301      	movs	r3, #1
 80061c0:	465a      	mov	r2, fp
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	f43f ae54 	beq.w	8005e76 <_printf_float+0xb6>
 80061ce:	f108 0801 	add.w	r8, r8, #1
 80061d2:	45d0      	cmp	r8, sl
 80061d4:	dbf3      	blt.n	80061be <_printf_float+0x3fe>
 80061d6:	464b      	mov	r3, r9
 80061d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80061dc:	e6e0      	b.n	8005fa0 <_printf_float+0x1e0>
 80061de:	f04f 0800 	mov.w	r8, #0
 80061e2:	f104 0b1a 	add.w	fp, r4, #26
 80061e6:	e7f4      	b.n	80061d2 <_printf_float+0x412>
 80061e8:	2301      	movs	r3, #1
 80061ea:	4642      	mov	r2, r8
 80061ec:	e7e1      	b.n	80061b2 <_printf_float+0x3f2>
 80061ee:	2301      	movs	r3, #1
 80061f0:	464a      	mov	r2, r9
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f ae3c 	beq.w	8005e76 <_printf_float+0xb6>
 80061fe:	f108 0801 	add.w	r8, r8, #1
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006206:	1a5b      	subs	r3, r3, r1
 8006208:	4543      	cmp	r3, r8
 800620a:	dcf0      	bgt.n	80061ee <_printf_float+0x42e>
 800620c:	e6fd      	b.n	800600a <_printf_float+0x24a>
 800620e:	f04f 0800 	mov.w	r8, #0
 8006212:	f104 0919 	add.w	r9, r4, #25
 8006216:	e7f4      	b.n	8006202 <_printf_float+0x442>

08006218 <_printf_common>:
 8006218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800621c:	4616      	mov	r6, r2
 800621e:	4698      	mov	r8, r3
 8006220:	688a      	ldr	r2, [r1, #8]
 8006222:	690b      	ldr	r3, [r1, #16]
 8006224:	4607      	mov	r7, r0
 8006226:	4293      	cmp	r3, r2
 8006228:	bfb8      	it	lt
 800622a:	4613      	movlt	r3, r2
 800622c:	6033      	str	r3, [r6, #0]
 800622e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006232:	460c      	mov	r4, r1
 8006234:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006238:	b10a      	cbz	r2, 800623e <_printf_common+0x26>
 800623a:	3301      	adds	r3, #1
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	0699      	lsls	r1, r3, #26
 8006242:	bf42      	ittt	mi
 8006244:	6833      	ldrmi	r3, [r6, #0]
 8006246:	3302      	addmi	r3, #2
 8006248:	6033      	strmi	r3, [r6, #0]
 800624a:	6825      	ldr	r5, [r4, #0]
 800624c:	f015 0506 	ands.w	r5, r5, #6
 8006250:	d106      	bne.n	8006260 <_printf_common+0x48>
 8006252:	f104 0a19 	add.w	sl, r4, #25
 8006256:	68e3      	ldr	r3, [r4, #12]
 8006258:	6832      	ldr	r2, [r6, #0]
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	42ab      	cmp	r3, r5
 800625e:	dc2b      	bgt.n	80062b8 <_printf_common+0xa0>
 8006260:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	3b00      	subs	r3, #0
 8006268:	bf18      	it	ne
 800626a:	2301      	movne	r3, #1
 800626c:	0692      	lsls	r2, r2, #26
 800626e:	d430      	bmi.n	80062d2 <_printf_common+0xba>
 8006270:	4641      	mov	r1, r8
 8006272:	4638      	mov	r0, r7
 8006274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006278:	47c8      	blx	r9
 800627a:	3001      	adds	r0, #1
 800627c:	d023      	beq.n	80062c6 <_printf_common+0xae>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	6922      	ldr	r2, [r4, #16]
 8006282:	f003 0306 	and.w	r3, r3, #6
 8006286:	2b04      	cmp	r3, #4
 8006288:	bf14      	ite	ne
 800628a:	2500      	movne	r5, #0
 800628c:	6833      	ldreq	r3, [r6, #0]
 800628e:	f04f 0600 	mov.w	r6, #0
 8006292:	bf08      	it	eq
 8006294:	68e5      	ldreq	r5, [r4, #12]
 8006296:	f104 041a 	add.w	r4, r4, #26
 800629a:	bf08      	it	eq
 800629c:	1aed      	subeq	r5, r5, r3
 800629e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80062a2:	bf08      	it	eq
 80062a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062a8:	4293      	cmp	r3, r2
 80062aa:	bfc4      	itt	gt
 80062ac:	1a9b      	subgt	r3, r3, r2
 80062ae:	18ed      	addgt	r5, r5, r3
 80062b0:	42b5      	cmp	r5, r6
 80062b2:	d11a      	bne.n	80062ea <_printf_common+0xd2>
 80062b4:	2000      	movs	r0, #0
 80062b6:	e008      	b.n	80062ca <_printf_common+0xb2>
 80062b8:	2301      	movs	r3, #1
 80062ba:	4652      	mov	r2, sl
 80062bc:	4641      	mov	r1, r8
 80062be:	4638      	mov	r0, r7
 80062c0:	47c8      	blx	r9
 80062c2:	3001      	adds	r0, #1
 80062c4:	d103      	bne.n	80062ce <_printf_common+0xb6>
 80062c6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ce:	3501      	adds	r5, #1
 80062d0:	e7c1      	b.n	8006256 <_printf_common+0x3e>
 80062d2:	2030      	movs	r0, #48	@ 0x30
 80062d4:	18e1      	adds	r1, r4, r3
 80062d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062e0:	4422      	add	r2, r4
 80062e2:	3302      	adds	r3, #2
 80062e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062e8:	e7c2      	b.n	8006270 <_printf_common+0x58>
 80062ea:	2301      	movs	r3, #1
 80062ec:	4622      	mov	r2, r4
 80062ee:	4641      	mov	r1, r8
 80062f0:	4638      	mov	r0, r7
 80062f2:	47c8      	blx	r9
 80062f4:	3001      	adds	r0, #1
 80062f6:	d0e6      	beq.n	80062c6 <_printf_common+0xae>
 80062f8:	3601      	adds	r6, #1
 80062fa:	e7d9      	b.n	80062b0 <_printf_common+0x98>

080062fc <_printf_i>:
 80062fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006300:	7e0f      	ldrb	r7, [r1, #24]
 8006302:	4691      	mov	r9, r2
 8006304:	2f78      	cmp	r7, #120	@ 0x78
 8006306:	4680      	mov	r8, r0
 8006308:	460c      	mov	r4, r1
 800630a:	469a      	mov	sl, r3
 800630c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800630e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006312:	d807      	bhi.n	8006324 <_printf_i+0x28>
 8006314:	2f62      	cmp	r7, #98	@ 0x62
 8006316:	d80a      	bhi.n	800632e <_printf_i+0x32>
 8006318:	2f00      	cmp	r7, #0
 800631a:	f000 80d3 	beq.w	80064c4 <_printf_i+0x1c8>
 800631e:	2f58      	cmp	r7, #88	@ 0x58
 8006320:	f000 80ba 	beq.w	8006498 <_printf_i+0x19c>
 8006324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006328:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800632c:	e03a      	b.n	80063a4 <_printf_i+0xa8>
 800632e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006332:	2b15      	cmp	r3, #21
 8006334:	d8f6      	bhi.n	8006324 <_printf_i+0x28>
 8006336:	a101      	add	r1, pc, #4	@ (adr r1, 800633c <_printf_i+0x40>)
 8006338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800633c:	08006395 	.word	0x08006395
 8006340:	080063a9 	.word	0x080063a9
 8006344:	08006325 	.word	0x08006325
 8006348:	08006325 	.word	0x08006325
 800634c:	08006325 	.word	0x08006325
 8006350:	08006325 	.word	0x08006325
 8006354:	080063a9 	.word	0x080063a9
 8006358:	08006325 	.word	0x08006325
 800635c:	08006325 	.word	0x08006325
 8006360:	08006325 	.word	0x08006325
 8006364:	08006325 	.word	0x08006325
 8006368:	080064ab 	.word	0x080064ab
 800636c:	080063d3 	.word	0x080063d3
 8006370:	08006465 	.word	0x08006465
 8006374:	08006325 	.word	0x08006325
 8006378:	08006325 	.word	0x08006325
 800637c:	080064cd 	.word	0x080064cd
 8006380:	08006325 	.word	0x08006325
 8006384:	080063d3 	.word	0x080063d3
 8006388:	08006325 	.word	0x08006325
 800638c:	08006325 	.word	0x08006325
 8006390:	0800646d 	.word	0x0800646d
 8006394:	6833      	ldr	r3, [r6, #0]
 8006396:	1d1a      	adds	r2, r3, #4
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6032      	str	r2, [r6, #0]
 800639c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063a4:	2301      	movs	r3, #1
 80063a6:	e09e      	b.n	80064e6 <_printf_i+0x1ea>
 80063a8:	6833      	ldr	r3, [r6, #0]
 80063aa:	6820      	ldr	r0, [r4, #0]
 80063ac:	1d19      	adds	r1, r3, #4
 80063ae:	6031      	str	r1, [r6, #0]
 80063b0:	0606      	lsls	r6, r0, #24
 80063b2:	d501      	bpl.n	80063b8 <_printf_i+0xbc>
 80063b4:	681d      	ldr	r5, [r3, #0]
 80063b6:	e003      	b.n	80063c0 <_printf_i+0xc4>
 80063b8:	0645      	lsls	r5, r0, #25
 80063ba:	d5fb      	bpl.n	80063b4 <_printf_i+0xb8>
 80063bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063c0:	2d00      	cmp	r5, #0
 80063c2:	da03      	bge.n	80063cc <_printf_i+0xd0>
 80063c4:	232d      	movs	r3, #45	@ 0x2d
 80063c6:	426d      	negs	r5, r5
 80063c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063cc:	230a      	movs	r3, #10
 80063ce:	4859      	ldr	r0, [pc, #356]	@ (8006534 <_printf_i+0x238>)
 80063d0:	e011      	b.n	80063f6 <_printf_i+0xfa>
 80063d2:	6821      	ldr	r1, [r4, #0]
 80063d4:	6833      	ldr	r3, [r6, #0]
 80063d6:	0608      	lsls	r0, r1, #24
 80063d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80063dc:	d402      	bmi.n	80063e4 <_printf_i+0xe8>
 80063de:	0649      	lsls	r1, r1, #25
 80063e0:	bf48      	it	mi
 80063e2:	b2ad      	uxthmi	r5, r5
 80063e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80063e6:	6033      	str	r3, [r6, #0]
 80063e8:	bf14      	ite	ne
 80063ea:	230a      	movne	r3, #10
 80063ec:	2308      	moveq	r3, #8
 80063ee:	4851      	ldr	r0, [pc, #324]	@ (8006534 <_printf_i+0x238>)
 80063f0:	2100      	movs	r1, #0
 80063f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063f6:	6866      	ldr	r6, [r4, #4]
 80063f8:	2e00      	cmp	r6, #0
 80063fa:	bfa8      	it	ge
 80063fc:	6821      	ldrge	r1, [r4, #0]
 80063fe:	60a6      	str	r6, [r4, #8]
 8006400:	bfa4      	itt	ge
 8006402:	f021 0104 	bicge.w	r1, r1, #4
 8006406:	6021      	strge	r1, [r4, #0]
 8006408:	b90d      	cbnz	r5, 800640e <_printf_i+0x112>
 800640a:	2e00      	cmp	r6, #0
 800640c:	d04b      	beq.n	80064a6 <_printf_i+0x1aa>
 800640e:	4616      	mov	r6, r2
 8006410:	fbb5 f1f3 	udiv	r1, r5, r3
 8006414:	fb03 5711 	mls	r7, r3, r1, r5
 8006418:	5dc7      	ldrb	r7, [r0, r7]
 800641a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800641e:	462f      	mov	r7, r5
 8006420:	42bb      	cmp	r3, r7
 8006422:	460d      	mov	r5, r1
 8006424:	d9f4      	bls.n	8006410 <_printf_i+0x114>
 8006426:	2b08      	cmp	r3, #8
 8006428:	d10b      	bne.n	8006442 <_printf_i+0x146>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	07df      	lsls	r7, r3, #31
 800642e:	d508      	bpl.n	8006442 <_printf_i+0x146>
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	6861      	ldr	r1, [r4, #4]
 8006434:	4299      	cmp	r1, r3
 8006436:	bfde      	ittt	le
 8006438:	2330      	movle	r3, #48	@ 0x30
 800643a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800643e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006442:	1b92      	subs	r2, r2, r6
 8006444:	6122      	str	r2, [r4, #16]
 8006446:	464b      	mov	r3, r9
 8006448:	4621      	mov	r1, r4
 800644a:	4640      	mov	r0, r8
 800644c:	f8cd a000 	str.w	sl, [sp]
 8006450:	aa03      	add	r2, sp, #12
 8006452:	f7ff fee1 	bl	8006218 <_printf_common>
 8006456:	3001      	adds	r0, #1
 8006458:	d14a      	bne.n	80064f0 <_printf_i+0x1f4>
 800645a:	f04f 30ff 	mov.w	r0, #4294967295
 800645e:	b004      	add	sp, #16
 8006460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	f043 0320 	orr.w	r3, r3, #32
 800646a:	6023      	str	r3, [r4, #0]
 800646c:	2778      	movs	r7, #120	@ 0x78
 800646e:	4832      	ldr	r0, [pc, #200]	@ (8006538 <_printf_i+0x23c>)
 8006470:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	6831      	ldr	r1, [r6, #0]
 8006478:	061f      	lsls	r7, r3, #24
 800647a:	f851 5b04 	ldr.w	r5, [r1], #4
 800647e:	d402      	bmi.n	8006486 <_printf_i+0x18a>
 8006480:	065f      	lsls	r7, r3, #25
 8006482:	bf48      	it	mi
 8006484:	b2ad      	uxthmi	r5, r5
 8006486:	6031      	str	r1, [r6, #0]
 8006488:	07d9      	lsls	r1, r3, #31
 800648a:	bf44      	itt	mi
 800648c:	f043 0320 	orrmi.w	r3, r3, #32
 8006490:	6023      	strmi	r3, [r4, #0]
 8006492:	b11d      	cbz	r5, 800649c <_printf_i+0x1a0>
 8006494:	2310      	movs	r3, #16
 8006496:	e7ab      	b.n	80063f0 <_printf_i+0xf4>
 8006498:	4826      	ldr	r0, [pc, #152]	@ (8006534 <_printf_i+0x238>)
 800649a:	e7e9      	b.n	8006470 <_printf_i+0x174>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	f023 0320 	bic.w	r3, r3, #32
 80064a2:	6023      	str	r3, [r4, #0]
 80064a4:	e7f6      	b.n	8006494 <_printf_i+0x198>
 80064a6:	4616      	mov	r6, r2
 80064a8:	e7bd      	b.n	8006426 <_printf_i+0x12a>
 80064aa:	6833      	ldr	r3, [r6, #0]
 80064ac:	6825      	ldr	r5, [r4, #0]
 80064ae:	1d18      	adds	r0, r3, #4
 80064b0:	6961      	ldr	r1, [r4, #20]
 80064b2:	6030      	str	r0, [r6, #0]
 80064b4:	062e      	lsls	r6, r5, #24
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	d501      	bpl.n	80064be <_printf_i+0x1c2>
 80064ba:	6019      	str	r1, [r3, #0]
 80064bc:	e002      	b.n	80064c4 <_printf_i+0x1c8>
 80064be:	0668      	lsls	r0, r5, #25
 80064c0:	d5fb      	bpl.n	80064ba <_printf_i+0x1be>
 80064c2:	8019      	strh	r1, [r3, #0]
 80064c4:	2300      	movs	r3, #0
 80064c6:	4616      	mov	r6, r2
 80064c8:	6123      	str	r3, [r4, #16]
 80064ca:	e7bc      	b.n	8006446 <_printf_i+0x14a>
 80064cc:	6833      	ldr	r3, [r6, #0]
 80064ce:	2100      	movs	r1, #0
 80064d0:	1d1a      	adds	r2, r3, #4
 80064d2:	6032      	str	r2, [r6, #0]
 80064d4:	681e      	ldr	r6, [r3, #0]
 80064d6:	6862      	ldr	r2, [r4, #4]
 80064d8:	4630      	mov	r0, r6
 80064da:	f000 f9e4 	bl	80068a6 <memchr>
 80064de:	b108      	cbz	r0, 80064e4 <_printf_i+0x1e8>
 80064e0:	1b80      	subs	r0, r0, r6
 80064e2:	6060      	str	r0, [r4, #4]
 80064e4:	6863      	ldr	r3, [r4, #4]
 80064e6:	6123      	str	r3, [r4, #16]
 80064e8:	2300      	movs	r3, #0
 80064ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064ee:	e7aa      	b.n	8006446 <_printf_i+0x14a>
 80064f0:	4632      	mov	r2, r6
 80064f2:	4649      	mov	r1, r9
 80064f4:	4640      	mov	r0, r8
 80064f6:	6923      	ldr	r3, [r4, #16]
 80064f8:	47d0      	blx	sl
 80064fa:	3001      	adds	r0, #1
 80064fc:	d0ad      	beq.n	800645a <_printf_i+0x15e>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	079b      	lsls	r3, r3, #30
 8006502:	d413      	bmi.n	800652c <_printf_i+0x230>
 8006504:	68e0      	ldr	r0, [r4, #12]
 8006506:	9b03      	ldr	r3, [sp, #12]
 8006508:	4298      	cmp	r0, r3
 800650a:	bfb8      	it	lt
 800650c:	4618      	movlt	r0, r3
 800650e:	e7a6      	b.n	800645e <_printf_i+0x162>
 8006510:	2301      	movs	r3, #1
 8006512:	4632      	mov	r2, r6
 8006514:	4649      	mov	r1, r9
 8006516:	4640      	mov	r0, r8
 8006518:	47d0      	blx	sl
 800651a:	3001      	adds	r0, #1
 800651c:	d09d      	beq.n	800645a <_printf_i+0x15e>
 800651e:	3501      	adds	r5, #1
 8006520:	68e3      	ldr	r3, [r4, #12]
 8006522:	9903      	ldr	r1, [sp, #12]
 8006524:	1a5b      	subs	r3, r3, r1
 8006526:	42ab      	cmp	r3, r5
 8006528:	dcf2      	bgt.n	8006510 <_printf_i+0x214>
 800652a:	e7eb      	b.n	8006504 <_printf_i+0x208>
 800652c:	2500      	movs	r5, #0
 800652e:	f104 0619 	add.w	r6, r4, #25
 8006532:	e7f5      	b.n	8006520 <_printf_i+0x224>
 8006534:	0800905c 	.word	0x0800905c
 8006538:	0800906d 	.word	0x0800906d

0800653c <std>:
 800653c:	2300      	movs	r3, #0
 800653e:	b510      	push	{r4, lr}
 8006540:	4604      	mov	r4, r0
 8006542:	e9c0 3300 	strd	r3, r3, [r0]
 8006546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800654a:	6083      	str	r3, [r0, #8]
 800654c:	8181      	strh	r1, [r0, #12]
 800654e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006550:	81c2      	strh	r2, [r0, #14]
 8006552:	6183      	str	r3, [r0, #24]
 8006554:	4619      	mov	r1, r3
 8006556:	2208      	movs	r2, #8
 8006558:	305c      	adds	r0, #92	@ 0x5c
 800655a:	f000 f924 	bl	80067a6 <memset>
 800655e:	4b0d      	ldr	r3, [pc, #52]	@ (8006594 <std+0x58>)
 8006560:	6224      	str	r4, [r4, #32]
 8006562:	6263      	str	r3, [r4, #36]	@ 0x24
 8006564:	4b0c      	ldr	r3, [pc, #48]	@ (8006598 <std+0x5c>)
 8006566:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006568:	4b0c      	ldr	r3, [pc, #48]	@ (800659c <std+0x60>)
 800656a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800656c:	4b0c      	ldr	r3, [pc, #48]	@ (80065a0 <std+0x64>)
 800656e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006570:	4b0c      	ldr	r3, [pc, #48]	@ (80065a4 <std+0x68>)
 8006572:	429c      	cmp	r4, r3
 8006574:	d006      	beq.n	8006584 <std+0x48>
 8006576:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800657a:	4294      	cmp	r4, r2
 800657c:	d002      	beq.n	8006584 <std+0x48>
 800657e:	33d0      	adds	r3, #208	@ 0xd0
 8006580:	429c      	cmp	r4, r3
 8006582:	d105      	bne.n	8006590 <std+0x54>
 8006584:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800658c:	f000 b988 	b.w	80068a0 <__retarget_lock_init_recursive>
 8006590:	bd10      	pop	{r4, pc}
 8006592:	bf00      	nop
 8006594:	08006701 	.word	0x08006701
 8006598:	08006723 	.word	0x08006723
 800659c:	0800675b 	.word	0x0800675b
 80065a0:	0800677f 	.word	0x0800677f
 80065a4:	200008a0 	.word	0x200008a0

080065a8 <stdio_exit_handler>:
 80065a8:	4a02      	ldr	r2, [pc, #8]	@ (80065b4 <stdio_exit_handler+0xc>)
 80065aa:	4903      	ldr	r1, [pc, #12]	@ (80065b8 <stdio_exit_handler+0x10>)
 80065ac:	4803      	ldr	r0, [pc, #12]	@ (80065bc <stdio_exit_handler+0x14>)
 80065ae:	f000 b869 	b.w	8006684 <_fwalk_sglue>
 80065b2:	bf00      	nop
 80065b4:	20000010 	.word	0x20000010
 80065b8:	0800822d 	.word	0x0800822d
 80065bc:	20000020 	.word	0x20000020

080065c0 <cleanup_stdio>:
 80065c0:	6841      	ldr	r1, [r0, #4]
 80065c2:	4b0c      	ldr	r3, [pc, #48]	@ (80065f4 <cleanup_stdio+0x34>)
 80065c4:	b510      	push	{r4, lr}
 80065c6:	4299      	cmp	r1, r3
 80065c8:	4604      	mov	r4, r0
 80065ca:	d001      	beq.n	80065d0 <cleanup_stdio+0x10>
 80065cc:	f001 fe2e 	bl	800822c <_fflush_r>
 80065d0:	68a1      	ldr	r1, [r4, #8]
 80065d2:	4b09      	ldr	r3, [pc, #36]	@ (80065f8 <cleanup_stdio+0x38>)
 80065d4:	4299      	cmp	r1, r3
 80065d6:	d002      	beq.n	80065de <cleanup_stdio+0x1e>
 80065d8:	4620      	mov	r0, r4
 80065da:	f001 fe27 	bl	800822c <_fflush_r>
 80065de:	68e1      	ldr	r1, [r4, #12]
 80065e0:	4b06      	ldr	r3, [pc, #24]	@ (80065fc <cleanup_stdio+0x3c>)
 80065e2:	4299      	cmp	r1, r3
 80065e4:	d004      	beq.n	80065f0 <cleanup_stdio+0x30>
 80065e6:	4620      	mov	r0, r4
 80065e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ec:	f001 be1e 	b.w	800822c <_fflush_r>
 80065f0:	bd10      	pop	{r4, pc}
 80065f2:	bf00      	nop
 80065f4:	200008a0 	.word	0x200008a0
 80065f8:	20000908 	.word	0x20000908
 80065fc:	20000970 	.word	0x20000970

08006600 <global_stdio_init.part.0>:
 8006600:	b510      	push	{r4, lr}
 8006602:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <global_stdio_init.part.0+0x30>)
 8006604:	4c0b      	ldr	r4, [pc, #44]	@ (8006634 <global_stdio_init.part.0+0x34>)
 8006606:	4a0c      	ldr	r2, [pc, #48]	@ (8006638 <global_stdio_init.part.0+0x38>)
 8006608:	4620      	mov	r0, r4
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	2104      	movs	r1, #4
 800660e:	2200      	movs	r2, #0
 8006610:	f7ff ff94 	bl	800653c <std>
 8006614:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006618:	2201      	movs	r2, #1
 800661a:	2109      	movs	r1, #9
 800661c:	f7ff ff8e 	bl	800653c <std>
 8006620:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006624:	2202      	movs	r2, #2
 8006626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800662a:	2112      	movs	r1, #18
 800662c:	f7ff bf86 	b.w	800653c <std>
 8006630:	200009d8 	.word	0x200009d8
 8006634:	200008a0 	.word	0x200008a0
 8006638:	080065a9 	.word	0x080065a9

0800663c <__sfp_lock_acquire>:
 800663c:	4801      	ldr	r0, [pc, #4]	@ (8006644 <__sfp_lock_acquire+0x8>)
 800663e:	f000 b930 	b.w	80068a2 <__retarget_lock_acquire_recursive>
 8006642:	bf00      	nop
 8006644:	200009e1 	.word	0x200009e1

08006648 <__sfp_lock_release>:
 8006648:	4801      	ldr	r0, [pc, #4]	@ (8006650 <__sfp_lock_release+0x8>)
 800664a:	f000 b92b 	b.w	80068a4 <__retarget_lock_release_recursive>
 800664e:	bf00      	nop
 8006650:	200009e1 	.word	0x200009e1

08006654 <__sinit>:
 8006654:	b510      	push	{r4, lr}
 8006656:	4604      	mov	r4, r0
 8006658:	f7ff fff0 	bl	800663c <__sfp_lock_acquire>
 800665c:	6a23      	ldr	r3, [r4, #32]
 800665e:	b11b      	cbz	r3, 8006668 <__sinit+0x14>
 8006660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006664:	f7ff bff0 	b.w	8006648 <__sfp_lock_release>
 8006668:	4b04      	ldr	r3, [pc, #16]	@ (800667c <__sinit+0x28>)
 800666a:	6223      	str	r3, [r4, #32]
 800666c:	4b04      	ldr	r3, [pc, #16]	@ (8006680 <__sinit+0x2c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f5      	bne.n	8006660 <__sinit+0xc>
 8006674:	f7ff ffc4 	bl	8006600 <global_stdio_init.part.0>
 8006678:	e7f2      	b.n	8006660 <__sinit+0xc>
 800667a:	bf00      	nop
 800667c:	080065c1 	.word	0x080065c1
 8006680:	200009d8 	.word	0x200009d8

08006684 <_fwalk_sglue>:
 8006684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006688:	4607      	mov	r7, r0
 800668a:	4688      	mov	r8, r1
 800668c:	4614      	mov	r4, r2
 800668e:	2600      	movs	r6, #0
 8006690:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006694:	f1b9 0901 	subs.w	r9, r9, #1
 8006698:	d505      	bpl.n	80066a6 <_fwalk_sglue+0x22>
 800669a:	6824      	ldr	r4, [r4, #0]
 800669c:	2c00      	cmp	r4, #0
 800669e:	d1f7      	bne.n	8006690 <_fwalk_sglue+0xc>
 80066a0:	4630      	mov	r0, r6
 80066a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066a6:	89ab      	ldrh	r3, [r5, #12]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d907      	bls.n	80066bc <_fwalk_sglue+0x38>
 80066ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066b0:	3301      	adds	r3, #1
 80066b2:	d003      	beq.n	80066bc <_fwalk_sglue+0x38>
 80066b4:	4629      	mov	r1, r5
 80066b6:	4638      	mov	r0, r7
 80066b8:	47c0      	blx	r8
 80066ba:	4306      	orrs	r6, r0
 80066bc:	3568      	adds	r5, #104	@ 0x68
 80066be:	e7e9      	b.n	8006694 <_fwalk_sglue+0x10>

080066c0 <siprintf>:
 80066c0:	b40e      	push	{r1, r2, r3}
 80066c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80066c6:	b500      	push	{lr}
 80066c8:	b09c      	sub	sp, #112	@ 0x70
 80066ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80066cc:	9002      	str	r0, [sp, #8]
 80066ce:	9006      	str	r0, [sp, #24]
 80066d0:	9107      	str	r1, [sp, #28]
 80066d2:	9104      	str	r1, [sp, #16]
 80066d4:	4808      	ldr	r0, [pc, #32]	@ (80066f8 <siprintf+0x38>)
 80066d6:	4909      	ldr	r1, [pc, #36]	@ (80066fc <siprintf+0x3c>)
 80066d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066dc:	9105      	str	r1, [sp, #20]
 80066de:	6800      	ldr	r0, [r0, #0]
 80066e0:	a902      	add	r1, sp, #8
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	f001 fc26 	bl	8007f34 <_svfiprintf_r>
 80066e8:	2200      	movs	r2, #0
 80066ea:	9b02      	ldr	r3, [sp, #8]
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	b01c      	add	sp, #112	@ 0x70
 80066f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066f4:	b003      	add	sp, #12
 80066f6:	4770      	bx	lr
 80066f8:	2000001c 	.word	0x2000001c
 80066fc:	ffff0208 	.word	0xffff0208

08006700 <__sread>:
 8006700:	b510      	push	{r4, lr}
 8006702:	460c      	mov	r4, r1
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	f000 f87c 	bl	8006804 <_read_r>
 800670c:	2800      	cmp	r0, #0
 800670e:	bfab      	itete	ge
 8006710:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006712:	89a3      	ldrhlt	r3, [r4, #12]
 8006714:	181b      	addge	r3, r3, r0
 8006716:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800671a:	bfac      	ite	ge
 800671c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800671e:	81a3      	strhlt	r3, [r4, #12]
 8006720:	bd10      	pop	{r4, pc}

08006722 <__swrite>:
 8006722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	461f      	mov	r7, r3
 8006728:	898b      	ldrh	r3, [r1, #12]
 800672a:	4605      	mov	r5, r0
 800672c:	05db      	lsls	r3, r3, #23
 800672e:	460c      	mov	r4, r1
 8006730:	4616      	mov	r6, r2
 8006732:	d505      	bpl.n	8006740 <__swrite+0x1e>
 8006734:	2302      	movs	r3, #2
 8006736:	2200      	movs	r2, #0
 8006738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800673c:	f000 f850 	bl	80067e0 <_lseek_r>
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	4632      	mov	r2, r6
 8006744:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006748:	81a3      	strh	r3, [r4, #12]
 800674a:	4628      	mov	r0, r5
 800674c:	463b      	mov	r3, r7
 800674e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	f000 b867 	b.w	8006828 <_write_r>

0800675a <__sseek>:
 800675a:	b510      	push	{r4, lr}
 800675c:	460c      	mov	r4, r1
 800675e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006762:	f000 f83d 	bl	80067e0 <_lseek_r>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	bf15      	itete	ne
 800676c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800676e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006772:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006776:	81a3      	strheq	r3, [r4, #12]
 8006778:	bf18      	it	ne
 800677a:	81a3      	strhne	r3, [r4, #12]
 800677c:	bd10      	pop	{r4, pc}

0800677e <__sclose>:
 800677e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006782:	f000 b81d 	b.w	80067c0 <_close_r>

08006786 <memcmp>:
 8006786:	b510      	push	{r4, lr}
 8006788:	3901      	subs	r1, #1
 800678a:	4402      	add	r2, r0
 800678c:	4290      	cmp	r0, r2
 800678e:	d101      	bne.n	8006794 <memcmp+0xe>
 8006790:	2000      	movs	r0, #0
 8006792:	e005      	b.n	80067a0 <memcmp+0x1a>
 8006794:	7803      	ldrb	r3, [r0, #0]
 8006796:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800679a:	42a3      	cmp	r3, r4
 800679c:	d001      	beq.n	80067a2 <memcmp+0x1c>
 800679e:	1b18      	subs	r0, r3, r4
 80067a0:	bd10      	pop	{r4, pc}
 80067a2:	3001      	adds	r0, #1
 80067a4:	e7f2      	b.n	800678c <memcmp+0x6>

080067a6 <memset>:
 80067a6:	4603      	mov	r3, r0
 80067a8:	4402      	add	r2, r0
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d100      	bne.n	80067b0 <memset+0xa>
 80067ae:	4770      	bx	lr
 80067b0:	f803 1b01 	strb.w	r1, [r3], #1
 80067b4:	e7f9      	b.n	80067aa <memset+0x4>
	...

080067b8 <_localeconv_r>:
 80067b8:	4800      	ldr	r0, [pc, #0]	@ (80067bc <_localeconv_r+0x4>)
 80067ba:	4770      	bx	lr
 80067bc:	2000015c 	.word	0x2000015c

080067c0 <_close_r>:
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	2300      	movs	r3, #0
 80067c4:	4d05      	ldr	r5, [pc, #20]	@ (80067dc <_close_r+0x1c>)
 80067c6:	4604      	mov	r4, r0
 80067c8:	4608      	mov	r0, r1
 80067ca:	602b      	str	r3, [r5, #0]
 80067cc:	f7fb fd7f 	bl	80022ce <_close>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d102      	bne.n	80067da <_close_r+0x1a>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	b103      	cbz	r3, 80067da <_close_r+0x1a>
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	200009dc 	.word	0x200009dc

080067e0 <_lseek_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4604      	mov	r4, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	2200      	movs	r2, #0
 80067ea:	4d05      	ldr	r5, [pc, #20]	@ (8006800 <_lseek_r+0x20>)
 80067ec:	602a      	str	r2, [r5, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f7fb fd91 	bl	8002316 <_lseek>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_lseek_r+0x1e>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_lseek_r+0x1e>
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	200009dc 	.word	0x200009dc

08006804 <_read_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	4611      	mov	r1, r2
 800680c:	2200      	movs	r2, #0
 800680e:	4d05      	ldr	r5, [pc, #20]	@ (8006824 <_read_r+0x20>)
 8006810:	602a      	str	r2, [r5, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	f7fb fd22 	bl	800225c <_read>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_read_r+0x1e>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_read_r+0x1e>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	200009dc 	.word	0x200009dc

08006828 <_write_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4604      	mov	r4, r0
 800682c:	4608      	mov	r0, r1
 800682e:	4611      	mov	r1, r2
 8006830:	2200      	movs	r2, #0
 8006832:	4d05      	ldr	r5, [pc, #20]	@ (8006848 <_write_r+0x20>)
 8006834:	602a      	str	r2, [r5, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	f7fb fd2d 	bl	8002296 <_write>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d102      	bne.n	8006846 <_write_r+0x1e>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	b103      	cbz	r3, 8006846 <_write_r+0x1e>
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	200009dc 	.word	0x200009dc

0800684c <__errno>:
 800684c:	4b01      	ldr	r3, [pc, #4]	@ (8006854 <__errno+0x8>)
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	2000001c 	.word	0x2000001c

08006858 <__libc_init_array>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	2600      	movs	r6, #0
 800685c:	4d0c      	ldr	r5, [pc, #48]	@ (8006890 <__libc_init_array+0x38>)
 800685e:	4c0d      	ldr	r4, [pc, #52]	@ (8006894 <__libc_init_array+0x3c>)
 8006860:	1b64      	subs	r4, r4, r5
 8006862:	10a4      	asrs	r4, r4, #2
 8006864:	42a6      	cmp	r6, r4
 8006866:	d109      	bne.n	800687c <__libc_init_array+0x24>
 8006868:	f002 f86e 	bl	8008948 <_init>
 800686c:	2600      	movs	r6, #0
 800686e:	4d0a      	ldr	r5, [pc, #40]	@ (8006898 <__libc_init_array+0x40>)
 8006870:	4c0a      	ldr	r4, [pc, #40]	@ (800689c <__libc_init_array+0x44>)
 8006872:	1b64      	subs	r4, r4, r5
 8006874:	10a4      	asrs	r4, r4, #2
 8006876:	42a6      	cmp	r6, r4
 8006878:	d105      	bne.n	8006886 <__libc_init_array+0x2e>
 800687a:	bd70      	pop	{r4, r5, r6, pc}
 800687c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006880:	4798      	blx	r3
 8006882:	3601      	adds	r6, #1
 8006884:	e7ee      	b.n	8006864 <__libc_init_array+0xc>
 8006886:	f855 3b04 	ldr.w	r3, [r5], #4
 800688a:	4798      	blx	r3
 800688c:	3601      	adds	r6, #1
 800688e:	e7f2      	b.n	8006876 <__libc_init_array+0x1e>
 8006890:	080093c0 	.word	0x080093c0
 8006894:	080093c0 	.word	0x080093c0
 8006898:	080093c0 	.word	0x080093c0
 800689c:	080093c4 	.word	0x080093c4

080068a0 <__retarget_lock_init_recursive>:
 80068a0:	4770      	bx	lr

080068a2 <__retarget_lock_acquire_recursive>:
 80068a2:	4770      	bx	lr

080068a4 <__retarget_lock_release_recursive>:
 80068a4:	4770      	bx	lr

080068a6 <memchr>:
 80068a6:	4603      	mov	r3, r0
 80068a8:	b510      	push	{r4, lr}
 80068aa:	b2c9      	uxtb	r1, r1
 80068ac:	4402      	add	r2, r0
 80068ae:	4293      	cmp	r3, r2
 80068b0:	4618      	mov	r0, r3
 80068b2:	d101      	bne.n	80068b8 <memchr+0x12>
 80068b4:	2000      	movs	r0, #0
 80068b6:	e003      	b.n	80068c0 <memchr+0x1a>
 80068b8:	7804      	ldrb	r4, [r0, #0]
 80068ba:	3301      	adds	r3, #1
 80068bc:	428c      	cmp	r4, r1
 80068be:	d1f6      	bne.n	80068ae <memchr+0x8>
 80068c0:	bd10      	pop	{r4, pc}

080068c2 <memcpy>:
 80068c2:	440a      	add	r2, r1
 80068c4:	4291      	cmp	r1, r2
 80068c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80068ca:	d100      	bne.n	80068ce <memcpy+0xc>
 80068cc:	4770      	bx	lr
 80068ce:	b510      	push	{r4, lr}
 80068d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068d4:	4291      	cmp	r1, r2
 80068d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068da:	d1f9      	bne.n	80068d0 <memcpy+0xe>
 80068dc:	bd10      	pop	{r4, pc}

080068de <quorem>:
 80068de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e2:	6903      	ldr	r3, [r0, #16]
 80068e4:	690c      	ldr	r4, [r1, #16]
 80068e6:	4607      	mov	r7, r0
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	db7e      	blt.n	80069ea <quorem+0x10c>
 80068ec:	3c01      	subs	r4, #1
 80068ee:	00a3      	lsls	r3, r4, #2
 80068f0:	f100 0514 	add.w	r5, r0, #20
 80068f4:	f101 0814 	add.w	r8, r1, #20
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006908:	3301      	adds	r3, #1
 800690a:	429a      	cmp	r2, r3
 800690c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006910:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006914:	d32e      	bcc.n	8006974 <quorem+0x96>
 8006916:	f04f 0a00 	mov.w	sl, #0
 800691a:	46c4      	mov	ip, r8
 800691c:	46ae      	mov	lr, r5
 800691e:	46d3      	mov	fp, sl
 8006920:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006924:	b298      	uxth	r0, r3
 8006926:	fb06 a000 	mla	r0, r6, r0, sl
 800692a:	0c1b      	lsrs	r3, r3, #16
 800692c:	0c02      	lsrs	r2, r0, #16
 800692e:	fb06 2303 	mla	r3, r6, r3, r2
 8006932:	f8de 2000 	ldr.w	r2, [lr]
 8006936:	b280      	uxth	r0, r0
 8006938:	b292      	uxth	r2, r2
 800693a:	1a12      	subs	r2, r2, r0
 800693c:	445a      	add	r2, fp
 800693e:	f8de 0000 	ldr.w	r0, [lr]
 8006942:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006946:	b29b      	uxth	r3, r3
 8006948:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800694c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006950:	b292      	uxth	r2, r2
 8006952:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006956:	45e1      	cmp	r9, ip
 8006958:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800695c:	f84e 2b04 	str.w	r2, [lr], #4
 8006960:	d2de      	bcs.n	8006920 <quorem+0x42>
 8006962:	9b00      	ldr	r3, [sp, #0]
 8006964:	58eb      	ldr	r3, [r5, r3]
 8006966:	b92b      	cbnz	r3, 8006974 <quorem+0x96>
 8006968:	9b01      	ldr	r3, [sp, #4]
 800696a:	3b04      	subs	r3, #4
 800696c:	429d      	cmp	r5, r3
 800696e:	461a      	mov	r2, r3
 8006970:	d32f      	bcc.n	80069d2 <quorem+0xf4>
 8006972:	613c      	str	r4, [r7, #16]
 8006974:	4638      	mov	r0, r7
 8006976:	f001 f979 	bl	8007c6c <__mcmp>
 800697a:	2800      	cmp	r0, #0
 800697c:	db25      	blt.n	80069ca <quorem+0xec>
 800697e:	4629      	mov	r1, r5
 8006980:	2000      	movs	r0, #0
 8006982:	f858 2b04 	ldr.w	r2, [r8], #4
 8006986:	f8d1 c000 	ldr.w	ip, [r1]
 800698a:	fa1f fe82 	uxth.w	lr, r2
 800698e:	fa1f f38c 	uxth.w	r3, ip
 8006992:	eba3 030e 	sub.w	r3, r3, lr
 8006996:	4403      	add	r3, r0
 8006998:	0c12      	lsrs	r2, r2, #16
 800699a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800699e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069a8:	45c1      	cmp	r9, r8
 80069aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069ae:	f841 3b04 	str.w	r3, [r1], #4
 80069b2:	d2e6      	bcs.n	8006982 <quorem+0xa4>
 80069b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069bc:	b922      	cbnz	r2, 80069c8 <quorem+0xea>
 80069be:	3b04      	subs	r3, #4
 80069c0:	429d      	cmp	r5, r3
 80069c2:	461a      	mov	r2, r3
 80069c4:	d30b      	bcc.n	80069de <quorem+0x100>
 80069c6:	613c      	str	r4, [r7, #16]
 80069c8:	3601      	adds	r6, #1
 80069ca:	4630      	mov	r0, r6
 80069cc:	b003      	add	sp, #12
 80069ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	3b04      	subs	r3, #4
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	d1cb      	bne.n	8006972 <quorem+0x94>
 80069da:	3c01      	subs	r4, #1
 80069dc:	e7c6      	b.n	800696c <quorem+0x8e>
 80069de:	6812      	ldr	r2, [r2, #0]
 80069e0:	3b04      	subs	r3, #4
 80069e2:	2a00      	cmp	r2, #0
 80069e4:	d1ef      	bne.n	80069c6 <quorem+0xe8>
 80069e6:	3c01      	subs	r4, #1
 80069e8:	e7ea      	b.n	80069c0 <quorem+0xe2>
 80069ea:	2000      	movs	r0, #0
 80069ec:	e7ee      	b.n	80069cc <quorem+0xee>
	...

080069f0 <_dtoa_r>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	4614      	mov	r4, r2
 80069f6:	461d      	mov	r5, r3
 80069f8:	69c7      	ldr	r7, [r0, #28]
 80069fa:	b097      	sub	sp, #92	@ 0x5c
 80069fc:	4683      	mov	fp, r0
 80069fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006a02:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006a04:	b97f      	cbnz	r7, 8006a26 <_dtoa_r+0x36>
 8006a06:	2010      	movs	r0, #16
 8006a08:	f000 fe02 	bl	8007610 <malloc>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a12:	b920      	cbnz	r0, 8006a1e <_dtoa_r+0x2e>
 8006a14:	21ef      	movs	r1, #239	@ 0xef
 8006a16:	4ba8      	ldr	r3, [pc, #672]	@ (8006cb8 <_dtoa_r+0x2c8>)
 8006a18:	48a8      	ldr	r0, [pc, #672]	@ (8006cbc <_dtoa_r+0x2cc>)
 8006a1a:	f001 fc59 	bl	80082d0 <__assert_func>
 8006a1e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a22:	6007      	str	r7, [r0, #0]
 8006a24:	60c7      	str	r7, [r0, #12]
 8006a26:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a2a:	6819      	ldr	r1, [r3, #0]
 8006a2c:	b159      	cbz	r1, 8006a46 <_dtoa_r+0x56>
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	2301      	movs	r3, #1
 8006a32:	4093      	lsls	r3, r2
 8006a34:	604a      	str	r2, [r1, #4]
 8006a36:	608b      	str	r3, [r1, #8]
 8006a38:	4658      	mov	r0, fp
 8006a3a:	f000 fedf 	bl	80077fc <_Bfree>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	1e2b      	subs	r3, r5, #0
 8006a48:	bfaf      	iteee	ge
 8006a4a:	2300      	movge	r3, #0
 8006a4c:	2201      	movlt	r2, #1
 8006a4e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a52:	9303      	strlt	r3, [sp, #12]
 8006a54:	bfa8      	it	ge
 8006a56:	6033      	strge	r3, [r6, #0]
 8006a58:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a5c:	4b98      	ldr	r3, [pc, #608]	@ (8006cc0 <_dtoa_r+0x2d0>)
 8006a5e:	bfb8      	it	lt
 8006a60:	6032      	strlt	r2, [r6, #0]
 8006a62:	ea33 0308 	bics.w	r3, r3, r8
 8006a66:	d112      	bne.n	8006a8e <_dtoa_r+0x9e>
 8006a68:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a6c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a74:	4323      	orrs	r3, r4
 8006a76:	f000 8550 	beq.w	800751a <_dtoa_r+0xb2a>
 8006a7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006a7c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006cc4 <_dtoa_r+0x2d4>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8552 	beq.w	800752a <_dtoa_r+0xb3a>
 8006a86:	f10a 0303 	add.w	r3, sl, #3
 8006a8a:	f000 bd4c 	b.w	8007526 <_dtoa_r+0xb36>
 8006a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a92:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006a96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f7f9 ff83 	bl	80009a8 <__aeabi_dcmpeq>
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	b158      	cbz	r0, 8006abe <_dtoa_r+0xce>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006aae:	b113      	cbz	r3, 8006ab6 <_dtoa_r+0xc6>
 8006ab0:	4b85      	ldr	r3, [pc, #532]	@ (8006cc8 <_dtoa_r+0x2d8>)
 8006ab2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006ccc <_dtoa_r+0x2dc>
 8006aba:	f000 bd36 	b.w	800752a <_dtoa_r+0xb3a>
 8006abe:	ab14      	add	r3, sp, #80	@ 0x50
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	ab15      	add	r3, sp, #84	@ 0x54
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	4658      	mov	r0, fp
 8006ac8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006acc:	f001 f97e 	bl	8007dcc <__d2b>
 8006ad0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006ad4:	4681      	mov	r9, r0
 8006ad6:	2e00      	cmp	r6, #0
 8006ad8:	d077      	beq.n	8006bca <_dtoa_r+0x1da>
 8006ada:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ae0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ae8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006aec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006af0:	9712      	str	r7, [sp, #72]	@ 0x48
 8006af2:	4619      	mov	r1, r3
 8006af4:	2200      	movs	r2, #0
 8006af6:	4b76      	ldr	r3, [pc, #472]	@ (8006cd0 <_dtoa_r+0x2e0>)
 8006af8:	f7f9 fb36 	bl	8000168 <__aeabi_dsub>
 8006afc:	a368      	add	r3, pc, #416	@ (adr r3, 8006ca0 <_dtoa_r+0x2b0>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	a368      	add	r3, pc, #416	@ (adr r3, 8006ca8 <_dtoa_r+0x2b8>)
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f7f9 fb2e 	bl	800016c <__adddf3>
 8006b10:	4604      	mov	r4, r0
 8006b12:	4630      	mov	r0, r6
 8006b14:	460d      	mov	r5, r1
 8006b16:	f7f9 fc75 	bl	8000404 <__aeabi_i2d>
 8006b1a:	a365      	add	r3, pc, #404	@ (adr r3, 8006cb0 <_dtoa_r+0x2c0>)
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f7f9 fcda 	bl	80004d8 <__aeabi_dmul>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4620      	mov	r0, r4
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f7f9 fb1e 	bl	800016c <__adddf3>
 8006b30:	4604      	mov	r4, r0
 8006b32:	460d      	mov	r5, r1
 8006b34:	f7f9 ff80 	bl	8000a38 <__aeabi_d2iz>
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4607      	mov	r7, r0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4620      	mov	r0, r4
 8006b40:	4629      	mov	r1, r5
 8006b42:	f7f9 ff3b 	bl	80009bc <__aeabi_dcmplt>
 8006b46:	b140      	cbz	r0, 8006b5a <_dtoa_r+0x16a>
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f7f9 fc5b 	bl	8000404 <__aeabi_i2d>
 8006b4e:	4622      	mov	r2, r4
 8006b50:	462b      	mov	r3, r5
 8006b52:	f7f9 ff29 	bl	80009a8 <__aeabi_dcmpeq>
 8006b56:	b900      	cbnz	r0, 8006b5a <_dtoa_r+0x16a>
 8006b58:	3f01      	subs	r7, #1
 8006b5a:	2f16      	cmp	r7, #22
 8006b5c:	d853      	bhi.n	8006c06 <_dtoa_r+0x216>
 8006b5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b62:	4b5c      	ldr	r3, [pc, #368]	@ (8006cd4 <_dtoa_r+0x2e4>)
 8006b64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 ff26 	bl	80009bc <__aeabi_dcmplt>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d04a      	beq.n	8006c0a <_dtoa_r+0x21a>
 8006b74:	2300      	movs	r3, #0
 8006b76:	3f01      	subs	r7, #1
 8006b78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b7c:	1b9b      	subs	r3, r3, r6
 8006b7e:	1e5a      	subs	r2, r3, #1
 8006b80:	bf46      	itte	mi
 8006b82:	f1c3 0801 	rsbmi	r8, r3, #1
 8006b86:	2300      	movmi	r3, #0
 8006b88:	f04f 0800 	movpl.w	r8, #0
 8006b8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b8e:	bf48      	it	mi
 8006b90:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006b92:	2f00      	cmp	r7, #0
 8006b94:	db3b      	blt.n	8006c0e <_dtoa_r+0x21e>
 8006b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b98:	970e      	str	r7, [sp, #56]	@ 0x38
 8006b9a:	443b      	add	r3, r7
 8006b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ba2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ba4:	2b09      	cmp	r3, #9
 8006ba6:	d866      	bhi.n	8006c76 <_dtoa_r+0x286>
 8006ba8:	2b05      	cmp	r3, #5
 8006baa:	bfc4      	itt	gt
 8006bac:	3b04      	subgt	r3, #4
 8006bae:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006bb0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bb2:	bfc8      	it	gt
 8006bb4:	2400      	movgt	r4, #0
 8006bb6:	f1a3 0302 	sub.w	r3, r3, #2
 8006bba:	bfd8      	it	le
 8006bbc:	2401      	movle	r4, #1
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d864      	bhi.n	8006c8c <_dtoa_r+0x29c>
 8006bc2:	e8df f003 	tbb	[pc, r3]
 8006bc6:	382b      	.short	0x382b
 8006bc8:	5636      	.short	0x5636
 8006bca:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006bce:	441e      	add	r6, r3
 8006bd0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	bfc1      	itttt	gt
 8006bd8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006bdc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006be0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006be4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006be8:	bfd6      	itet	le
 8006bea:	f1c3 0320 	rsble	r3, r3, #32
 8006bee:	ea48 0003 	orrgt.w	r0, r8, r3
 8006bf2:	fa04 f003 	lslle.w	r0, r4, r3
 8006bf6:	f7f9 fbf5 	bl	80003e4 <__aeabi_ui2d>
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c00:	3e01      	subs	r6, #1
 8006c02:	9212      	str	r2, [sp, #72]	@ 0x48
 8006c04:	e775      	b.n	8006af2 <_dtoa_r+0x102>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e7b6      	b.n	8006b78 <_dtoa_r+0x188>
 8006c0a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006c0c:	e7b5      	b.n	8006b7a <_dtoa_r+0x18a>
 8006c0e:	427b      	negs	r3, r7
 8006c10:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c12:	2300      	movs	r3, #0
 8006c14:	eba8 0807 	sub.w	r8, r8, r7
 8006c18:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c1a:	e7c2      	b.n	8006ba2 <_dtoa_r+0x1b2>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	dc35      	bgt.n	8006c92 <_dtoa_r+0x2a2>
 8006c26:	2301      	movs	r3, #1
 8006c28:	461a      	mov	r2, r3
 8006c2a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006c2e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006c30:	e00b      	b.n	8006c4a <_dtoa_r+0x25a>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e7f3      	b.n	8006c1e <_dtoa_r+0x22e>
 8006c36:	2300      	movs	r3, #0
 8006c38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c3c:	18fb      	adds	r3, r7, r3
 8006c3e:	9308      	str	r3, [sp, #32]
 8006c40:	3301      	adds	r3, #1
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	9307      	str	r3, [sp, #28]
 8006c46:	bfb8      	it	lt
 8006c48:	2301      	movlt	r3, #1
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006c52:	f102 0514 	add.w	r5, r2, #20
 8006c56:	429d      	cmp	r5, r3
 8006c58:	d91f      	bls.n	8006c9a <_dtoa_r+0x2aa>
 8006c5a:	6041      	str	r1, [r0, #4]
 8006c5c:	4658      	mov	r0, fp
 8006c5e:	f000 fd8d 	bl	800777c <_Balloc>
 8006c62:	4682      	mov	sl, r0
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d139      	bne.n	8006cdc <_dtoa_r+0x2ec>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd8 <_dtoa_r+0x2e8>)
 8006c70:	e6d2      	b.n	8006a18 <_dtoa_r+0x28>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e7e0      	b.n	8006c38 <_dtoa_r+0x248>
 8006c76:	2401      	movs	r4, #1
 8006c78:	2300      	movs	r3, #0
 8006c7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c7c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c82:	2200      	movs	r2, #0
 8006c84:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006c88:	2312      	movs	r3, #18
 8006c8a:	e7d0      	b.n	8006c2e <_dtoa_r+0x23e>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c90:	e7f5      	b.n	8006c7e <_dtoa_r+0x28e>
 8006c92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006c98:	e7d7      	b.n	8006c4a <_dtoa_r+0x25a>
 8006c9a:	3101      	adds	r1, #1
 8006c9c:	0052      	lsls	r2, r2, #1
 8006c9e:	e7d8      	b.n	8006c52 <_dtoa_r+0x262>
 8006ca0:	636f4361 	.word	0x636f4361
 8006ca4:	3fd287a7 	.word	0x3fd287a7
 8006ca8:	8b60c8b3 	.word	0x8b60c8b3
 8006cac:	3fc68a28 	.word	0x3fc68a28
 8006cb0:	509f79fb 	.word	0x509f79fb
 8006cb4:	3fd34413 	.word	0x3fd34413
 8006cb8:	0800908b 	.word	0x0800908b
 8006cbc:	080090a2 	.word	0x080090a2
 8006cc0:	7ff00000 	.word	0x7ff00000
 8006cc4:	08009087 	.word	0x08009087
 8006cc8:	0800905b 	.word	0x0800905b
 8006ccc:	0800905a 	.word	0x0800905a
 8006cd0:	3ff80000 	.word	0x3ff80000
 8006cd4:	08009198 	.word	0x08009198
 8006cd8:	080090fa 	.word	0x080090fa
 8006cdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ce0:	6018      	str	r0, [r3, #0]
 8006ce2:	9b07      	ldr	r3, [sp, #28]
 8006ce4:	2b0e      	cmp	r3, #14
 8006ce6:	f200 80a4 	bhi.w	8006e32 <_dtoa_r+0x442>
 8006cea:	2c00      	cmp	r4, #0
 8006cec:	f000 80a1 	beq.w	8006e32 <_dtoa_r+0x442>
 8006cf0:	2f00      	cmp	r7, #0
 8006cf2:	dd33      	ble.n	8006d5c <_dtoa_r+0x36c>
 8006cf4:	4b86      	ldr	r3, [pc, #536]	@ (8006f10 <_dtoa_r+0x520>)
 8006cf6:	f007 020f 	and.w	r2, r7, #15
 8006cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cfe:	05f8      	lsls	r0, r7, #23
 8006d00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d0c:	d516      	bpl.n	8006d3c <_dtoa_r+0x34c>
 8006d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d12:	4b80      	ldr	r3, [pc, #512]	@ (8006f14 <_dtoa_r+0x524>)
 8006d14:	2603      	movs	r6, #3
 8006d16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d1a:	f7f9 fd07 	bl	800072c <__aeabi_ddiv>
 8006d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d22:	f004 040f 	and.w	r4, r4, #15
 8006d26:	4d7b      	ldr	r5, [pc, #492]	@ (8006f14 <_dtoa_r+0x524>)
 8006d28:	b954      	cbnz	r4, 8006d40 <_dtoa_r+0x350>
 8006d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d32:	f7f9 fcfb 	bl	800072c <__aeabi_ddiv>
 8006d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d3a:	e028      	b.n	8006d8e <_dtoa_r+0x39e>
 8006d3c:	2602      	movs	r6, #2
 8006d3e:	e7f2      	b.n	8006d26 <_dtoa_r+0x336>
 8006d40:	07e1      	lsls	r1, r4, #31
 8006d42:	d508      	bpl.n	8006d56 <_dtoa_r+0x366>
 8006d44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d4c:	f7f9 fbc4 	bl	80004d8 <__aeabi_dmul>
 8006d50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d54:	3601      	adds	r6, #1
 8006d56:	1064      	asrs	r4, r4, #1
 8006d58:	3508      	adds	r5, #8
 8006d5a:	e7e5      	b.n	8006d28 <_dtoa_r+0x338>
 8006d5c:	f000 80d2 	beq.w	8006f04 <_dtoa_r+0x514>
 8006d60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d64:	427c      	negs	r4, r7
 8006d66:	4b6a      	ldr	r3, [pc, #424]	@ (8006f10 <_dtoa_r+0x520>)
 8006d68:	f004 020f 	and.w	r2, r4, #15
 8006d6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f7f9 fbb0 	bl	80004d8 <__aeabi_dmul>
 8006d78:	2602      	movs	r6, #2
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d80:	4d64      	ldr	r5, [pc, #400]	@ (8006f14 <_dtoa_r+0x524>)
 8006d82:	1124      	asrs	r4, r4, #4
 8006d84:	2c00      	cmp	r4, #0
 8006d86:	f040 80b2 	bne.w	8006eee <_dtoa_r+0x4fe>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1d3      	bne.n	8006d36 <_dtoa_r+0x346>
 8006d8e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 80b7 	beq.w	8006f08 <_dtoa_r+0x518>
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4b5d      	ldr	r3, [pc, #372]	@ (8006f18 <_dtoa_r+0x528>)
 8006da2:	f7f9 fe0b 	bl	80009bc <__aeabi_dcmplt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f000 80ae 	beq.w	8006f08 <_dtoa_r+0x518>
 8006dac:	9b07      	ldr	r3, [sp, #28]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 80aa 	beq.w	8006f08 <_dtoa_r+0x518>
 8006db4:	9b08      	ldr	r3, [sp, #32]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dd37      	ble.n	8006e2a <_dtoa_r+0x43a>
 8006dba:	1e7b      	subs	r3, r7, #1
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	9304      	str	r3, [sp, #16]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4b55      	ldr	r3, [pc, #340]	@ (8006f1c <_dtoa_r+0x52c>)
 8006dc6:	f7f9 fb87 	bl	80004d8 <__aeabi_dmul>
 8006dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dce:	9c08      	ldr	r4, [sp, #32]
 8006dd0:	3601      	adds	r6, #1
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7f9 fb16 	bl	8000404 <__aeabi_i2d>
 8006dd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ddc:	f7f9 fb7c 	bl	80004d8 <__aeabi_dmul>
 8006de0:	2200      	movs	r2, #0
 8006de2:	4b4f      	ldr	r3, [pc, #316]	@ (8006f20 <_dtoa_r+0x530>)
 8006de4:	f7f9 f9c2 	bl	800016c <__adddf3>
 8006de8:	4605      	mov	r5, r0
 8006dea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006dee:	2c00      	cmp	r4, #0
 8006df0:	f040 809a 	bne.w	8006f28 <_dtoa_r+0x538>
 8006df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8006f24 <_dtoa_r+0x534>)
 8006dfc:	f7f9 f9b4 	bl	8000168 <__aeabi_dsub>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e08:	462a      	mov	r2, r5
 8006e0a:	4633      	mov	r3, r6
 8006e0c:	f7f9 fdf4 	bl	80009f8 <__aeabi_dcmpgt>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	f040 828e 	bne.w	8007332 <_dtoa_r+0x942>
 8006e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e1a:	462a      	mov	r2, r5
 8006e1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e20:	f7f9 fdcc 	bl	80009bc <__aeabi_dcmplt>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	f040 8127 	bne.w	8007078 <_dtoa_r+0x688>
 8006e2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f2c0 8163 	blt.w	8007100 <_dtoa_r+0x710>
 8006e3a:	2f0e      	cmp	r7, #14
 8006e3c:	f300 8160 	bgt.w	8007100 <_dtoa_r+0x710>
 8006e40:	4b33      	ldr	r3, [pc, #204]	@ (8006f10 <_dtoa_r+0x520>)
 8006e42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	da03      	bge.n	8006e5c <_dtoa_r+0x46c>
 8006e54:	9b07      	ldr	r3, [sp, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f340 8100 	ble.w	800705c <_dtoa_r+0x66c>
 8006e5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e60:	4656      	mov	r6, sl
 8006e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f7f9 fc5f 	bl	800072c <__aeabi_ddiv>
 8006e6e:	f7f9 fde3 	bl	8000a38 <__aeabi_d2iz>
 8006e72:	4680      	mov	r8, r0
 8006e74:	f7f9 fac6 	bl	8000404 <__aeabi_i2d>
 8006e78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e7c:	f7f9 fb2c 	bl	80004d8 <__aeabi_dmul>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4620      	mov	r0, r4
 8006e86:	4629      	mov	r1, r5
 8006e88:	f7f9 f96e 	bl	8000168 <__aeabi_dsub>
 8006e8c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e90:	9d07      	ldr	r5, [sp, #28]
 8006e92:	f806 4b01 	strb.w	r4, [r6], #1
 8006e96:	eba6 040a 	sub.w	r4, r6, sl
 8006e9a:	42a5      	cmp	r5, r4
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	f040 8116 	bne.w	80070d0 <_dtoa_r+0x6e0>
 8006ea4:	f7f9 f962 	bl	800016c <__adddf3>
 8006ea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eac:	4604      	mov	r4, r0
 8006eae:	460d      	mov	r5, r1
 8006eb0:	f7f9 fda2 	bl	80009f8 <__aeabi_dcmpgt>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f040 80f8 	bne.w	80070aa <_dtoa_r+0x6ba>
 8006eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 fd71 	bl	80009a8 <__aeabi_dcmpeq>
 8006ec6:	b118      	cbz	r0, 8006ed0 <_dtoa_r+0x4e0>
 8006ec8:	f018 0f01 	tst.w	r8, #1
 8006ecc:	f040 80ed 	bne.w	80070aa <_dtoa_r+0x6ba>
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	4658      	mov	r0, fp
 8006ed4:	f000 fc92 	bl	80077fc <_Bfree>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	7033      	strb	r3, [r6, #0]
 8006edc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006ede:	3701      	adds	r7, #1
 8006ee0:	601f      	str	r7, [r3, #0]
 8006ee2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 8320 	beq.w	800752a <_dtoa_r+0xb3a>
 8006eea:	601e      	str	r6, [r3, #0]
 8006eec:	e31d      	b.n	800752a <_dtoa_r+0xb3a>
 8006eee:	07e2      	lsls	r2, r4, #31
 8006ef0:	d505      	bpl.n	8006efe <_dtoa_r+0x50e>
 8006ef2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ef6:	f7f9 faef 	bl	80004d8 <__aeabi_dmul>
 8006efa:	2301      	movs	r3, #1
 8006efc:	3601      	adds	r6, #1
 8006efe:	1064      	asrs	r4, r4, #1
 8006f00:	3508      	adds	r5, #8
 8006f02:	e73f      	b.n	8006d84 <_dtoa_r+0x394>
 8006f04:	2602      	movs	r6, #2
 8006f06:	e742      	b.n	8006d8e <_dtoa_r+0x39e>
 8006f08:	9c07      	ldr	r4, [sp, #28]
 8006f0a:	9704      	str	r7, [sp, #16]
 8006f0c:	e761      	b.n	8006dd2 <_dtoa_r+0x3e2>
 8006f0e:	bf00      	nop
 8006f10:	08009198 	.word	0x08009198
 8006f14:	08009170 	.word	0x08009170
 8006f18:	3ff00000 	.word	0x3ff00000
 8006f1c:	40240000 	.word	0x40240000
 8006f20:	401c0000 	.word	0x401c0000
 8006f24:	40140000 	.word	0x40140000
 8006f28:	4b70      	ldr	r3, [pc, #448]	@ (80070ec <_dtoa_r+0x6fc>)
 8006f2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f34:	4454      	add	r4, sl
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d045      	beq.n	8006fc6 <_dtoa_r+0x5d6>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	496c      	ldr	r1, [pc, #432]	@ (80070f0 <_dtoa_r+0x700>)
 8006f3e:	f7f9 fbf5 	bl	800072c <__aeabi_ddiv>
 8006f42:	4633      	mov	r3, r6
 8006f44:	462a      	mov	r2, r5
 8006f46:	f7f9 f90f 	bl	8000168 <__aeabi_dsub>
 8006f4a:	4656      	mov	r6, sl
 8006f4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f54:	f7f9 fd70 	bl	8000a38 <__aeabi_d2iz>
 8006f58:	4605      	mov	r5, r0
 8006f5a:	f7f9 fa53 	bl	8000404 <__aeabi_i2d>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f66:	f7f9 f8ff 	bl	8000168 <__aeabi_dsub>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	3530      	adds	r5, #48	@ 0x30
 8006f70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f78:	f806 5b01 	strb.w	r5, [r6], #1
 8006f7c:	f7f9 fd1e 	bl	80009bc <__aeabi_dcmplt>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d163      	bne.n	800704c <_dtoa_r+0x65c>
 8006f84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f88:	2000      	movs	r0, #0
 8006f8a:	495a      	ldr	r1, [pc, #360]	@ (80070f4 <_dtoa_r+0x704>)
 8006f8c:	f7f9 f8ec 	bl	8000168 <__aeabi_dsub>
 8006f90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f94:	f7f9 fd12 	bl	80009bc <__aeabi_dcmplt>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	f040 8087 	bne.w	80070ac <_dtoa_r+0x6bc>
 8006f9e:	42a6      	cmp	r6, r4
 8006fa0:	f43f af43 	beq.w	8006e2a <_dtoa_r+0x43a>
 8006fa4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fa8:	2200      	movs	r2, #0
 8006faa:	4b53      	ldr	r3, [pc, #332]	@ (80070f8 <_dtoa_r+0x708>)
 8006fac:	f7f9 fa94 	bl	80004d8 <__aeabi_dmul>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fba:	4b4f      	ldr	r3, [pc, #316]	@ (80070f8 <_dtoa_r+0x708>)
 8006fbc:	f7f9 fa8c 	bl	80004d8 <__aeabi_dmul>
 8006fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc4:	e7c4      	b.n	8006f50 <_dtoa_r+0x560>
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f7f9 fa85 	bl	80004d8 <__aeabi_dmul>
 8006fce:	4656      	mov	r6, sl
 8006fd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fd4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fda:	f7f9 fd2d 	bl	8000a38 <__aeabi_d2iz>
 8006fde:	4605      	mov	r5, r0
 8006fe0:	f7f9 fa10 	bl	8000404 <__aeabi_i2d>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fec:	f7f9 f8bc 	bl	8000168 <__aeabi_dsub>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	3530      	adds	r5, #48	@ 0x30
 8006ff6:	f806 5b01 	strb.w	r5, [r6], #1
 8006ffa:	42a6      	cmp	r6, r4
 8006ffc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	d124      	bne.n	8007050 <_dtoa_r+0x660>
 8007006:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800700a:	4b39      	ldr	r3, [pc, #228]	@ (80070f0 <_dtoa_r+0x700>)
 800700c:	f7f9 f8ae 	bl	800016c <__adddf3>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007018:	f7f9 fcee 	bl	80009f8 <__aeabi_dcmpgt>
 800701c:	2800      	cmp	r0, #0
 800701e:	d145      	bne.n	80070ac <_dtoa_r+0x6bc>
 8007020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007024:	2000      	movs	r0, #0
 8007026:	4932      	ldr	r1, [pc, #200]	@ (80070f0 <_dtoa_r+0x700>)
 8007028:	f7f9 f89e 	bl	8000168 <__aeabi_dsub>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007034:	f7f9 fcc2 	bl	80009bc <__aeabi_dcmplt>
 8007038:	2800      	cmp	r0, #0
 800703a:	f43f aef6 	beq.w	8006e2a <_dtoa_r+0x43a>
 800703e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007040:	1e73      	subs	r3, r6, #1
 8007042:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007044:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007048:	2b30      	cmp	r3, #48	@ 0x30
 800704a:	d0f8      	beq.n	800703e <_dtoa_r+0x64e>
 800704c:	9f04      	ldr	r7, [sp, #16]
 800704e:	e73f      	b.n	8006ed0 <_dtoa_r+0x4e0>
 8007050:	4b29      	ldr	r3, [pc, #164]	@ (80070f8 <_dtoa_r+0x708>)
 8007052:	f7f9 fa41 	bl	80004d8 <__aeabi_dmul>
 8007056:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800705a:	e7bc      	b.n	8006fd6 <_dtoa_r+0x5e6>
 800705c:	d10c      	bne.n	8007078 <_dtoa_r+0x688>
 800705e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007062:	2200      	movs	r2, #0
 8007064:	4b25      	ldr	r3, [pc, #148]	@ (80070fc <_dtoa_r+0x70c>)
 8007066:	f7f9 fa37 	bl	80004d8 <__aeabi_dmul>
 800706a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800706e:	f7f9 fcb9 	bl	80009e4 <__aeabi_dcmpge>
 8007072:	2800      	cmp	r0, #0
 8007074:	f000 815b 	beq.w	800732e <_dtoa_r+0x93e>
 8007078:	2400      	movs	r4, #0
 800707a:	4625      	mov	r5, r4
 800707c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800707e:	4656      	mov	r6, sl
 8007080:	43db      	mvns	r3, r3
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	2700      	movs	r7, #0
 8007086:	4621      	mov	r1, r4
 8007088:	4658      	mov	r0, fp
 800708a:	f000 fbb7 	bl	80077fc <_Bfree>
 800708e:	2d00      	cmp	r5, #0
 8007090:	d0dc      	beq.n	800704c <_dtoa_r+0x65c>
 8007092:	b12f      	cbz	r7, 80070a0 <_dtoa_r+0x6b0>
 8007094:	42af      	cmp	r7, r5
 8007096:	d003      	beq.n	80070a0 <_dtoa_r+0x6b0>
 8007098:	4639      	mov	r1, r7
 800709a:	4658      	mov	r0, fp
 800709c:	f000 fbae 	bl	80077fc <_Bfree>
 80070a0:	4629      	mov	r1, r5
 80070a2:	4658      	mov	r0, fp
 80070a4:	f000 fbaa 	bl	80077fc <_Bfree>
 80070a8:	e7d0      	b.n	800704c <_dtoa_r+0x65c>
 80070aa:	9704      	str	r7, [sp, #16]
 80070ac:	4633      	mov	r3, r6
 80070ae:	461e      	mov	r6, r3
 80070b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070b4:	2a39      	cmp	r2, #57	@ 0x39
 80070b6:	d107      	bne.n	80070c8 <_dtoa_r+0x6d8>
 80070b8:	459a      	cmp	sl, r3
 80070ba:	d1f8      	bne.n	80070ae <_dtoa_r+0x6be>
 80070bc:	9a04      	ldr	r2, [sp, #16]
 80070be:	3201      	adds	r2, #1
 80070c0:	9204      	str	r2, [sp, #16]
 80070c2:	2230      	movs	r2, #48	@ 0x30
 80070c4:	f88a 2000 	strb.w	r2, [sl]
 80070c8:	781a      	ldrb	r2, [r3, #0]
 80070ca:	3201      	adds	r2, #1
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	e7bd      	b.n	800704c <_dtoa_r+0x65c>
 80070d0:	2200      	movs	r2, #0
 80070d2:	4b09      	ldr	r3, [pc, #36]	@ (80070f8 <_dtoa_r+0x708>)
 80070d4:	f7f9 fa00 	bl	80004d8 <__aeabi_dmul>
 80070d8:	2200      	movs	r2, #0
 80070da:	2300      	movs	r3, #0
 80070dc:	4604      	mov	r4, r0
 80070de:	460d      	mov	r5, r1
 80070e0:	f7f9 fc62 	bl	80009a8 <__aeabi_dcmpeq>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f43f aebc 	beq.w	8006e62 <_dtoa_r+0x472>
 80070ea:	e6f1      	b.n	8006ed0 <_dtoa_r+0x4e0>
 80070ec:	08009198 	.word	0x08009198
 80070f0:	3fe00000 	.word	0x3fe00000
 80070f4:	3ff00000 	.word	0x3ff00000
 80070f8:	40240000 	.word	0x40240000
 80070fc:	40140000 	.word	0x40140000
 8007100:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007102:	2a00      	cmp	r2, #0
 8007104:	f000 80db 	beq.w	80072be <_dtoa_r+0x8ce>
 8007108:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800710a:	2a01      	cmp	r2, #1
 800710c:	f300 80bf 	bgt.w	800728e <_dtoa_r+0x89e>
 8007110:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007112:	2a00      	cmp	r2, #0
 8007114:	f000 80b7 	beq.w	8007286 <_dtoa_r+0x896>
 8007118:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800711c:	4646      	mov	r6, r8
 800711e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007120:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007122:	2101      	movs	r1, #1
 8007124:	441a      	add	r2, r3
 8007126:	4658      	mov	r0, fp
 8007128:	4498      	add	r8, r3
 800712a:	9209      	str	r2, [sp, #36]	@ 0x24
 800712c:	f000 fc1a 	bl	8007964 <__i2b>
 8007130:	4605      	mov	r5, r0
 8007132:	b15e      	cbz	r6, 800714c <_dtoa_r+0x75c>
 8007134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	dd08      	ble.n	800714c <_dtoa_r+0x75c>
 800713a:	42b3      	cmp	r3, r6
 800713c:	bfa8      	it	ge
 800713e:	4633      	movge	r3, r6
 8007140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007142:	eba8 0803 	sub.w	r8, r8, r3
 8007146:	1af6      	subs	r6, r6, r3
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	9309      	str	r3, [sp, #36]	@ 0x24
 800714c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800714e:	b1f3      	cbz	r3, 800718e <_dtoa_r+0x79e>
 8007150:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80b7 	beq.w	80072c6 <_dtoa_r+0x8d6>
 8007158:	b18c      	cbz	r4, 800717e <_dtoa_r+0x78e>
 800715a:	4629      	mov	r1, r5
 800715c:	4622      	mov	r2, r4
 800715e:	4658      	mov	r0, fp
 8007160:	f000 fcbe 	bl	8007ae0 <__pow5mult>
 8007164:	464a      	mov	r2, r9
 8007166:	4601      	mov	r1, r0
 8007168:	4605      	mov	r5, r0
 800716a:	4658      	mov	r0, fp
 800716c:	f000 fc10 	bl	8007990 <__multiply>
 8007170:	4649      	mov	r1, r9
 8007172:	9004      	str	r0, [sp, #16]
 8007174:	4658      	mov	r0, fp
 8007176:	f000 fb41 	bl	80077fc <_Bfree>
 800717a:	9b04      	ldr	r3, [sp, #16]
 800717c:	4699      	mov	r9, r3
 800717e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007180:	1b1a      	subs	r2, r3, r4
 8007182:	d004      	beq.n	800718e <_dtoa_r+0x79e>
 8007184:	4649      	mov	r1, r9
 8007186:	4658      	mov	r0, fp
 8007188:	f000 fcaa 	bl	8007ae0 <__pow5mult>
 800718c:	4681      	mov	r9, r0
 800718e:	2101      	movs	r1, #1
 8007190:	4658      	mov	r0, fp
 8007192:	f000 fbe7 	bl	8007964 <__i2b>
 8007196:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007198:	4604      	mov	r4, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 81c9 	beq.w	8007532 <_dtoa_r+0xb42>
 80071a0:	461a      	mov	r2, r3
 80071a2:	4601      	mov	r1, r0
 80071a4:	4658      	mov	r0, fp
 80071a6:	f000 fc9b 	bl	8007ae0 <__pow5mult>
 80071aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071ac:	4604      	mov	r4, r0
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	f300 808f 	bgt.w	80072d2 <_dtoa_r+0x8e2>
 80071b4:	9b02      	ldr	r3, [sp, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f040 8087 	bne.w	80072ca <_dtoa_r+0x8da>
 80071bc:	9b03      	ldr	r3, [sp, #12]
 80071be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f040 8083 	bne.w	80072ce <_dtoa_r+0x8de>
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071ce:	0d1b      	lsrs	r3, r3, #20
 80071d0:	051b      	lsls	r3, r3, #20
 80071d2:	b12b      	cbz	r3, 80071e0 <_dtoa_r+0x7f0>
 80071d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d6:	f108 0801 	add.w	r8, r8, #1
 80071da:	3301      	adds	r3, #1
 80071dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071de:	2301      	movs	r3, #1
 80071e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80071e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 81aa 	beq.w	800753e <_dtoa_r+0xb4e>
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071f0:	6918      	ldr	r0, [r3, #16]
 80071f2:	f000 fb6b 	bl	80078cc <__hi0bits>
 80071f6:	f1c0 0020 	rsb	r0, r0, #32
 80071fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fc:	4418      	add	r0, r3
 80071fe:	f010 001f 	ands.w	r0, r0, #31
 8007202:	d071      	beq.n	80072e8 <_dtoa_r+0x8f8>
 8007204:	f1c0 0320 	rsb	r3, r0, #32
 8007208:	2b04      	cmp	r3, #4
 800720a:	dd65      	ble.n	80072d8 <_dtoa_r+0x8e8>
 800720c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800720e:	f1c0 001c 	rsb	r0, r0, #28
 8007212:	4403      	add	r3, r0
 8007214:	4480      	add	r8, r0
 8007216:	4406      	add	r6, r0
 8007218:	9309      	str	r3, [sp, #36]	@ 0x24
 800721a:	f1b8 0f00 	cmp.w	r8, #0
 800721e:	dd05      	ble.n	800722c <_dtoa_r+0x83c>
 8007220:	4649      	mov	r1, r9
 8007222:	4642      	mov	r2, r8
 8007224:	4658      	mov	r0, fp
 8007226:	f000 fcb5 	bl	8007b94 <__lshift>
 800722a:	4681      	mov	r9, r0
 800722c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	dd05      	ble.n	800723e <_dtoa_r+0x84e>
 8007232:	4621      	mov	r1, r4
 8007234:	461a      	mov	r2, r3
 8007236:	4658      	mov	r0, fp
 8007238:	f000 fcac 	bl	8007b94 <__lshift>
 800723c:	4604      	mov	r4, r0
 800723e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d053      	beq.n	80072ec <_dtoa_r+0x8fc>
 8007244:	4621      	mov	r1, r4
 8007246:	4648      	mov	r0, r9
 8007248:	f000 fd10 	bl	8007c6c <__mcmp>
 800724c:	2800      	cmp	r0, #0
 800724e:	da4d      	bge.n	80072ec <_dtoa_r+0x8fc>
 8007250:	1e7b      	subs	r3, r7, #1
 8007252:	4649      	mov	r1, r9
 8007254:	9304      	str	r3, [sp, #16]
 8007256:	220a      	movs	r2, #10
 8007258:	2300      	movs	r3, #0
 800725a:	4658      	mov	r0, fp
 800725c:	f000 faf0 	bl	8007840 <__multadd>
 8007260:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007262:	4681      	mov	r9, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 816c 	beq.w	8007542 <_dtoa_r+0xb52>
 800726a:	2300      	movs	r3, #0
 800726c:	4629      	mov	r1, r5
 800726e:	220a      	movs	r2, #10
 8007270:	4658      	mov	r0, fp
 8007272:	f000 fae5 	bl	8007840 <__multadd>
 8007276:	9b08      	ldr	r3, [sp, #32]
 8007278:	4605      	mov	r5, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	dc61      	bgt.n	8007342 <_dtoa_r+0x952>
 800727e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007280:	2b02      	cmp	r3, #2
 8007282:	dc3b      	bgt.n	80072fc <_dtoa_r+0x90c>
 8007284:	e05d      	b.n	8007342 <_dtoa_r+0x952>
 8007286:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007288:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800728c:	e746      	b.n	800711c <_dtoa_r+0x72c>
 800728e:	9b07      	ldr	r3, [sp, #28]
 8007290:	1e5c      	subs	r4, r3, #1
 8007292:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007294:	42a3      	cmp	r3, r4
 8007296:	bfbf      	itttt	lt
 8007298:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800729a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800729c:	1ae3      	sublt	r3, r4, r3
 800729e:	18d2      	addlt	r2, r2, r3
 80072a0:	bfa8      	it	ge
 80072a2:	1b1c      	subge	r4, r3, r4
 80072a4:	9b07      	ldr	r3, [sp, #28]
 80072a6:	bfbe      	ittt	lt
 80072a8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80072aa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80072ac:	2400      	movlt	r4, #0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bfb5      	itete	lt
 80072b2:	eba8 0603 	sublt.w	r6, r8, r3
 80072b6:	4646      	movge	r6, r8
 80072b8:	2300      	movlt	r3, #0
 80072ba:	9b07      	ldrge	r3, [sp, #28]
 80072bc:	e730      	b.n	8007120 <_dtoa_r+0x730>
 80072be:	4646      	mov	r6, r8
 80072c0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072c2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80072c4:	e735      	b.n	8007132 <_dtoa_r+0x742>
 80072c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072c8:	e75c      	b.n	8007184 <_dtoa_r+0x794>
 80072ca:	2300      	movs	r3, #0
 80072cc:	e788      	b.n	80071e0 <_dtoa_r+0x7f0>
 80072ce:	9b02      	ldr	r3, [sp, #8]
 80072d0:	e786      	b.n	80071e0 <_dtoa_r+0x7f0>
 80072d2:	2300      	movs	r3, #0
 80072d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80072d6:	e788      	b.n	80071ea <_dtoa_r+0x7fa>
 80072d8:	d09f      	beq.n	800721a <_dtoa_r+0x82a>
 80072da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072dc:	331c      	adds	r3, #28
 80072de:	441a      	add	r2, r3
 80072e0:	4498      	add	r8, r3
 80072e2:	441e      	add	r6, r3
 80072e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80072e6:	e798      	b.n	800721a <_dtoa_r+0x82a>
 80072e8:	4603      	mov	r3, r0
 80072ea:	e7f6      	b.n	80072da <_dtoa_r+0x8ea>
 80072ec:	9b07      	ldr	r3, [sp, #28]
 80072ee:	9704      	str	r7, [sp, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	dc20      	bgt.n	8007336 <_dtoa_r+0x946>
 80072f4:	9308      	str	r3, [sp, #32]
 80072f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	dd1e      	ble.n	800733a <_dtoa_r+0x94a>
 80072fc:	9b08      	ldr	r3, [sp, #32]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f47f aebc 	bne.w	800707c <_dtoa_r+0x68c>
 8007304:	4621      	mov	r1, r4
 8007306:	2205      	movs	r2, #5
 8007308:	4658      	mov	r0, fp
 800730a:	f000 fa99 	bl	8007840 <__multadd>
 800730e:	4601      	mov	r1, r0
 8007310:	4604      	mov	r4, r0
 8007312:	4648      	mov	r0, r9
 8007314:	f000 fcaa 	bl	8007c6c <__mcmp>
 8007318:	2800      	cmp	r0, #0
 800731a:	f77f aeaf 	ble.w	800707c <_dtoa_r+0x68c>
 800731e:	2331      	movs	r3, #49	@ 0x31
 8007320:	4656      	mov	r6, sl
 8007322:	f806 3b01 	strb.w	r3, [r6], #1
 8007326:	9b04      	ldr	r3, [sp, #16]
 8007328:	3301      	adds	r3, #1
 800732a:	9304      	str	r3, [sp, #16]
 800732c:	e6aa      	b.n	8007084 <_dtoa_r+0x694>
 800732e:	9c07      	ldr	r4, [sp, #28]
 8007330:	9704      	str	r7, [sp, #16]
 8007332:	4625      	mov	r5, r4
 8007334:	e7f3      	b.n	800731e <_dtoa_r+0x92e>
 8007336:	9b07      	ldr	r3, [sp, #28]
 8007338:	9308      	str	r3, [sp, #32]
 800733a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8104 	beq.w	800754a <_dtoa_r+0xb5a>
 8007342:	2e00      	cmp	r6, #0
 8007344:	dd05      	ble.n	8007352 <_dtoa_r+0x962>
 8007346:	4629      	mov	r1, r5
 8007348:	4632      	mov	r2, r6
 800734a:	4658      	mov	r0, fp
 800734c:	f000 fc22 	bl	8007b94 <__lshift>
 8007350:	4605      	mov	r5, r0
 8007352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007354:	2b00      	cmp	r3, #0
 8007356:	d05a      	beq.n	800740e <_dtoa_r+0xa1e>
 8007358:	4658      	mov	r0, fp
 800735a:	6869      	ldr	r1, [r5, #4]
 800735c:	f000 fa0e 	bl	800777c <_Balloc>
 8007360:	4606      	mov	r6, r0
 8007362:	b928      	cbnz	r0, 8007370 <_dtoa_r+0x980>
 8007364:	4602      	mov	r2, r0
 8007366:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800736a:	4b83      	ldr	r3, [pc, #524]	@ (8007578 <_dtoa_r+0xb88>)
 800736c:	f7ff bb54 	b.w	8006a18 <_dtoa_r+0x28>
 8007370:	692a      	ldr	r2, [r5, #16]
 8007372:	f105 010c 	add.w	r1, r5, #12
 8007376:	3202      	adds	r2, #2
 8007378:	0092      	lsls	r2, r2, #2
 800737a:	300c      	adds	r0, #12
 800737c:	f7ff faa1 	bl	80068c2 <memcpy>
 8007380:	2201      	movs	r2, #1
 8007382:	4631      	mov	r1, r6
 8007384:	4658      	mov	r0, fp
 8007386:	f000 fc05 	bl	8007b94 <__lshift>
 800738a:	462f      	mov	r7, r5
 800738c:	4605      	mov	r5, r0
 800738e:	f10a 0301 	add.w	r3, sl, #1
 8007392:	9307      	str	r3, [sp, #28]
 8007394:	9b08      	ldr	r3, [sp, #32]
 8007396:	4453      	add	r3, sl
 8007398:	930b      	str	r3, [sp, #44]	@ 0x2c
 800739a:	9b02      	ldr	r3, [sp, #8]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073a2:	9b07      	ldr	r3, [sp, #28]
 80073a4:	4621      	mov	r1, r4
 80073a6:	3b01      	subs	r3, #1
 80073a8:	4648      	mov	r0, r9
 80073aa:	9302      	str	r3, [sp, #8]
 80073ac:	f7ff fa97 	bl	80068de <quorem>
 80073b0:	4639      	mov	r1, r7
 80073b2:	9008      	str	r0, [sp, #32]
 80073b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80073b8:	4648      	mov	r0, r9
 80073ba:	f000 fc57 	bl	8007c6c <__mcmp>
 80073be:	462a      	mov	r2, r5
 80073c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80073c2:	4621      	mov	r1, r4
 80073c4:	4658      	mov	r0, fp
 80073c6:	f000 fc6d 	bl	8007ca4 <__mdiff>
 80073ca:	68c2      	ldr	r2, [r0, #12]
 80073cc:	4606      	mov	r6, r0
 80073ce:	bb02      	cbnz	r2, 8007412 <_dtoa_r+0xa22>
 80073d0:	4601      	mov	r1, r0
 80073d2:	4648      	mov	r0, r9
 80073d4:	f000 fc4a 	bl	8007c6c <__mcmp>
 80073d8:	4602      	mov	r2, r0
 80073da:	4631      	mov	r1, r6
 80073dc:	4658      	mov	r0, fp
 80073de:	920c      	str	r2, [sp, #48]	@ 0x30
 80073e0:	f000 fa0c 	bl	80077fc <_Bfree>
 80073e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80073e8:	9e07      	ldr	r6, [sp, #28]
 80073ea:	ea43 0102 	orr.w	r1, r3, r2
 80073ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073f0:	4319      	orrs	r1, r3
 80073f2:	d110      	bne.n	8007416 <_dtoa_r+0xa26>
 80073f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073f8:	d029      	beq.n	800744e <_dtoa_r+0xa5e>
 80073fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dd02      	ble.n	8007406 <_dtoa_r+0xa16>
 8007400:	9b08      	ldr	r3, [sp, #32]
 8007402:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007406:	9b02      	ldr	r3, [sp, #8]
 8007408:	f883 8000 	strb.w	r8, [r3]
 800740c:	e63b      	b.n	8007086 <_dtoa_r+0x696>
 800740e:	4628      	mov	r0, r5
 8007410:	e7bb      	b.n	800738a <_dtoa_r+0x99a>
 8007412:	2201      	movs	r2, #1
 8007414:	e7e1      	b.n	80073da <_dtoa_r+0x9ea>
 8007416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007418:	2b00      	cmp	r3, #0
 800741a:	db04      	blt.n	8007426 <_dtoa_r+0xa36>
 800741c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800741e:	430b      	orrs	r3, r1
 8007420:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007422:	430b      	orrs	r3, r1
 8007424:	d120      	bne.n	8007468 <_dtoa_r+0xa78>
 8007426:	2a00      	cmp	r2, #0
 8007428:	dded      	ble.n	8007406 <_dtoa_r+0xa16>
 800742a:	4649      	mov	r1, r9
 800742c:	2201      	movs	r2, #1
 800742e:	4658      	mov	r0, fp
 8007430:	f000 fbb0 	bl	8007b94 <__lshift>
 8007434:	4621      	mov	r1, r4
 8007436:	4681      	mov	r9, r0
 8007438:	f000 fc18 	bl	8007c6c <__mcmp>
 800743c:	2800      	cmp	r0, #0
 800743e:	dc03      	bgt.n	8007448 <_dtoa_r+0xa58>
 8007440:	d1e1      	bne.n	8007406 <_dtoa_r+0xa16>
 8007442:	f018 0f01 	tst.w	r8, #1
 8007446:	d0de      	beq.n	8007406 <_dtoa_r+0xa16>
 8007448:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800744c:	d1d8      	bne.n	8007400 <_dtoa_r+0xa10>
 800744e:	2339      	movs	r3, #57	@ 0x39
 8007450:	9a02      	ldr	r2, [sp, #8]
 8007452:	7013      	strb	r3, [r2, #0]
 8007454:	4633      	mov	r3, r6
 8007456:	461e      	mov	r6, r3
 8007458:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800745c:	3b01      	subs	r3, #1
 800745e:	2a39      	cmp	r2, #57	@ 0x39
 8007460:	d052      	beq.n	8007508 <_dtoa_r+0xb18>
 8007462:	3201      	adds	r2, #1
 8007464:	701a      	strb	r2, [r3, #0]
 8007466:	e60e      	b.n	8007086 <_dtoa_r+0x696>
 8007468:	2a00      	cmp	r2, #0
 800746a:	dd07      	ble.n	800747c <_dtoa_r+0xa8c>
 800746c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007470:	d0ed      	beq.n	800744e <_dtoa_r+0xa5e>
 8007472:	9a02      	ldr	r2, [sp, #8]
 8007474:	f108 0301 	add.w	r3, r8, #1
 8007478:	7013      	strb	r3, [r2, #0]
 800747a:	e604      	b.n	8007086 <_dtoa_r+0x696>
 800747c:	9b07      	ldr	r3, [sp, #28]
 800747e:	9a07      	ldr	r2, [sp, #28]
 8007480:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007484:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007486:	4293      	cmp	r3, r2
 8007488:	d028      	beq.n	80074dc <_dtoa_r+0xaec>
 800748a:	4649      	mov	r1, r9
 800748c:	2300      	movs	r3, #0
 800748e:	220a      	movs	r2, #10
 8007490:	4658      	mov	r0, fp
 8007492:	f000 f9d5 	bl	8007840 <__multadd>
 8007496:	42af      	cmp	r7, r5
 8007498:	4681      	mov	r9, r0
 800749a:	f04f 0300 	mov.w	r3, #0
 800749e:	f04f 020a 	mov.w	r2, #10
 80074a2:	4639      	mov	r1, r7
 80074a4:	4658      	mov	r0, fp
 80074a6:	d107      	bne.n	80074b8 <_dtoa_r+0xac8>
 80074a8:	f000 f9ca 	bl	8007840 <__multadd>
 80074ac:	4607      	mov	r7, r0
 80074ae:	4605      	mov	r5, r0
 80074b0:	9b07      	ldr	r3, [sp, #28]
 80074b2:	3301      	adds	r3, #1
 80074b4:	9307      	str	r3, [sp, #28]
 80074b6:	e774      	b.n	80073a2 <_dtoa_r+0x9b2>
 80074b8:	f000 f9c2 	bl	8007840 <__multadd>
 80074bc:	4629      	mov	r1, r5
 80074be:	4607      	mov	r7, r0
 80074c0:	2300      	movs	r3, #0
 80074c2:	220a      	movs	r2, #10
 80074c4:	4658      	mov	r0, fp
 80074c6:	f000 f9bb 	bl	8007840 <__multadd>
 80074ca:	4605      	mov	r5, r0
 80074cc:	e7f0      	b.n	80074b0 <_dtoa_r+0xac0>
 80074ce:	9b08      	ldr	r3, [sp, #32]
 80074d0:	2700      	movs	r7, #0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bfcc      	ite	gt
 80074d6:	461e      	movgt	r6, r3
 80074d8:	2601      	movle	r6, #1
 80074da:	4456      	add	r6, sl
 80074dc:	4649      	mov	r1, r9
 80074de:	2201      	movs	r2, #1
 80074e0:	4658      	mov	r0, fp
 80074e2:	f000 fb57 	bl	8007b94 <__lshift>
 80074e6:	4621      	mov	r1, r4
 80074e8:	4681      	mov	r9, r0
 80074ea:	f000 fbbf 	bl	8007c6c <__mcmp>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	dcb0      	bgt.n	8007454 <_dtoa_r+0xa64>
 80074f2:	d102      	bne.n	80074fa <_dtoa_r+0xb0a>
 80074f4:	f018 0f01 	tst.w	r8, #1
 80074f8:	d1ac      	bne.n	8007454 <_dtoa_r+0xa64>
 80074fa:	4633      	mov	r3, r6
 80074fc:	461e      	mov	r6, r3
 80074fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007502:	2a30      	cmp	r2, #48	@ 0x30
 8007504:	d0fa      	beq.n	80074fc <_dtoa_r+0xb0c>
 8007506:	e5be      	b.n	8007086 <_dtoa_r+0x696>
 8007508:	459a      	cmp	sl, r3
 800750a:	d1a4      	bne.n	8007456 <_dtoa_r+0xa66>
 800750c:	9b04      	ldr	r3, [sp, #16]
 800750e:	3301      	adds	r3, #1
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	2331      	movs	r3, #49	@ 0x31
 8007514:	f88a 3000 	strb.w	r3, [sl]
 8007518:	e5b5      	b.n	8007086 <_dtoa_r+0x696>
 800751a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800751c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800757c <_dtoa_r+0xb8c>
 8007520:	b11b      	cbz	r3, 800752a <_dtoa_r+0xb3a>
 8007522:	f10a 0308 	add.w	r3, sl, #8
 8007526:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	4650      	mov	r0, sl
 800752c:	b017      	add	sp, #92	@ 0x5c
 800752e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007532:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007534:	2b01      	cmp	r3, #1
 8007536:	f77f ae3d 	ble.w	80071b4 <_dtoa_r+0x7c4>
 800753a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800753c:	930a      	str	r3, [sp, #40]	@ 0x28
 800753e:	2001      	movs	r0, #1
 8007540:	e65b      	b.n	80071fa <_dtoa_r+0x80a>
 8007542:	9b08      	ldr	r3, [sp, #32]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f77f aed6 	ble.w	80072f6 <_dtoa_r+0x906>
 800754a:	4656      	mov	r6, sl
 800754c:	4621      	mov	r1, r4
 800754e:	4648      	mov	r0, r9
 8007550:	f7ff f9c5 	bl	80068de <quorem>
 8007554:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007558:	9b08      	ldr	r3, [sp, #32]
 800755a:	f806 8b01 	strb.w	r8, [r6], #1
 800755e:	eba6 020a 	sub.w	r2, r6, sl
 8007562:	4293      	cmp	r3, r2
 8007564:	ddb3      	ble.n	80074ce <_dtoa_r+0xade>
 8007566:	4649      	mov	r1, r9
 8007568:	2300      	movs	r3, #0
 800756a:	220a      	movs	r2, #10
 800756c:	4658      	mov	r0, fp
 800756e:	f000 f967 	bl	8007840 <__multadd>
 8007572:	4681      	mov	r9, r0
 8007574:	e7ea      	b.n	800754c <_dtoa_r+0xb5c>
 8007576:	bf00      	nop
 8007578:	080090fa 	.word	0x080090fa
 800757c:	0800907e 	.word	0x0800907e

08007580 <_free_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4605      	mov	r5, r0
 8007584:	2900      	cmp	r1, #0
 8007586:	d040      	beq.n	800760a <_free_r+0x8a>
 8007588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800758c:	1f0c      	subs	r4, r1, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	bfb8      	it	lt
 8007592:	18e4      	addlt	r4, r4, r3
 8007594:	f000 f8e6 	bl	8007764 <__malloc_lock>
 8007598:	4a1c      	ldr	r2, [pc, #112]	@ (800760c <_free_r+0x8c>)
 800759a:	6813      	ldr	r3, [r2, #0]
 800759c:	b933      	cbnz	r3, 80075ac <_free_r+0x2c>
 800759e:	6063      	str	r3, [r4, #4]
 80075a0:	6014      	str	r4, [r2, #0]
 80075a2:	4628      	mov	r0, r5
 80075a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075a8:	f000 b8e2 	b.w	8007770 <__malloc_unlock>
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	d908      	bls.n	80075c2 <_free_r+0x42>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	1821      	adds	r1, r4, r0
 80075b4:	428b      	cmp	r3, r1
 80075b6:	bf01      	itttt	eq
 80075b8:	6819      	ldreq	r1, [r3, #0]
 80075ba:	685b      	ldreq	r3, [r3, #4]
 80075bc:	1809      	addeq	r1, r1, r0
 80075be:	6021      	streq	r1, [r4, #0]
 80075c0:	e7ed      	b.n	800759e <_free_r+0x1e>
 80075c2:	461a      	mov	r2, r3
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	b10b      	cbz	r3, 80075cc <_free_r+0x4c>
 80075c8:	42a3      	cmp	r3, r4
 80075ca:	d9fa      	bls.n	80075c2 <_free_r+0x42>
 80075cc:	6811      	ldr	r1, [r2, #0]
 80075ce:	1850      	adds	r0, r2, r1
 80075d0:	42a0      	cmp	r0, r4
 80075d2:	d10b      	bne.n	80075ec <_free_r+0x6c>
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	4401      	add	r1, r0
 80075d8:	1850      	adds	r0, r2, r1
 80075da:	4283      	cmp	r3, r0
 80075dc:	6011      	str	r1, [r2, #0]
 80075de:	d1e0      	bne.n	80075a2 <_free_r+0x22>
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	4408      	add	r0, r1
 80075e6:	6010      	str	r0, [r2, #0]
 80075e8:	6053      	str	r3, [r2, #4]
 80075ea:	e7da      	b.n	80075a2 <_free_r+0x22>
 80075ec:	d902      	bls.n	80075f4 <_free_r+0x74>
 80075ee:	230c      	movs	r3, #12
 80075f0:	602b      	str	r3, [r5, #0]
 80075f2:	e7d6      	b.n	80075a2 <_free_r+0x22>
 80075f4:	6820      	ldr	r0, [r4, #0]
 80075f6:	1821      	adds	r1, r4, r0
 80075f8:	428b      	cmp	r3, r1
 80075fa:	bf01      	itttt	eq
 80075fc:	6819      	ldreq	r1, [r3, #0]
 80075fe:	685b      	ldreq	r3, [r3, #4]
 8007600:	1809      	addeq	r1, r1, r0
 8007602:	6021      	streq	r1, [r4, #0]
 8007604:	6063      	str	r3, [r4, #4]
 8007606:	6054      	str	r4, [r2, #4]
 8007608:	e7cb      	b.n	80075a2 <_free_r+0x22>
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	200009e8 	.word	0x200009e8

08007610 <malloc>:
 8007610:	4b02      	ldr	r3, [pc, #8]	@ (800761c <malloc+0xc>)
 8007612:	4601      	mov	r1, r0
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	f000 b825 	b.w	8007664 <_malloc_r>
 800761a:	bf00      	nop
 800761c:	2000001c 	.word	0x2000001c

08007620 <sbrk_aligned>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	4e0f      	ldr	r6, [pc, #60]	@ (8007660 <sbrk_aligned+0x40>)
 8007624:	460c      	mov	r4, r1
 8007626:	6831      	ldr	r1, [r6, #0]
 8007628:	4605      	mov	r5, r0
 800762a:	b911      	cbnz	r1, 8007632 <sbrk_aligned+0x12>
 800762c:	f000 fe40 	bl	80082b0 <_sbrk_r>
 8007630:	6030      	str	r0, [r6, #0]
 8007632:	4621      	mov	r1, r4
 8007634:	4628      	mov	r0, r5
 8007636:	f000 fe3b 	bl	80082b0 <_sbrk_r>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	d103      	bne.n	8007646 <sbrk_aligned+0x26>
 800763e:	f04f 34ff 	mov.w	r4, #4294967295
 8007642:	4620      	mov	r0, r4
 8007644:	bd70      	pop	{r4, r5, r6, pc}
 8007646:	1cc4      	adds	r4, r0, #3
 8007648:	f024 0403 	bic.w	r4, r4, #3
 800764c:	42a0      	cmp	r0, r4
 800764e:	d0f8      	beq.n	8007642 <sbrk_aligned+0x22>
 8007650:	1a21      	subs	r1, r4, r0
 8007652:	4628      	mov	r0, r5
 8007654:	f000 fe2c 	bl	80082b0 <_sbrk_r>
 8007658:	3001      	adds	r0, #1
 800765a:	d1f2      	bne.n	8007642 <sbrk_aligned+0x22>
 800765c:	e7ef      	b.n	800763e <sbrk_aligned+0x1e>
 800765e:	bf00      	nop
 8007660:	200009e4 	.word	0x200009e4

08007664 <_malloc_r>:
 8007664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007668:	1ccd      	adds	r5, r1, #3
 800766a:	f025 0503 	bic.w	r5, r5, #3
 800766e:	3508      	adds	r5, #8
 8007670:	2d0c      	cmp	r5, #12
 8007672:	bf38      	it	cc
 8007674:	250c      	movcc	r5, #12
 8007676:	2d00      	cmp	r5, #0
 8007678:	4606      	mov	r6, r0
 800767a:	db01      	blt.n	8007680 <_malloc_r+0x1c>
 800767c:	42a9      	cmp	r1, r5
 800767e:	d904      	bls.n	800768a <_malloc_r+0x26>
 8007680:	230c      	movs	r3, #12
 8007682:	6033      	str	r3, [r6, #0]
 8007684:	2000      	movs	r0, #0
 8007686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800768a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007760 <_malloc_r+0xfc>
 800768e:	f000 f869 	bl	8007764 <__malloc_lock>
 8007692:	f8d8 3000 	ldr.w	r3, [r8]
 8007696:	461c      	mov	r4, r3
 8007698:	bb44      	cbnz	r4, 80076ec <_malloc_r+0x88>
 800769a:	4629      	mov	r1, r5
 800769c:	4630      	mov	r0, r6
 800769e:	f7ff ffbf 	bl	8007620 <sbrk_aligned>
 80076a2:	1c43      	adds	r3, r0, #1
 80076a4:	4604      	mov	r4, r0
 80076a6:	d158      	bne.n	800775a <_malloc_r+0xf6>
 80076a8:	f8d8 4000 	ldr.w	r4, [r8]
 80076ac:	4627      	mov	r7, r4
 80076ae:	2f00      	cmp	r7, #0
 80076b0:	d143      	bne.n	800773a <_malloc_r+0xd6>
 80076b2:	2c00      	cmp	r4, #0
 80076b4:	d04b      	beq.n	800774e <_malloc_r+0xea>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	4639      	mov	r1, r7
 80076ba:	4630      	mov	r0, r6
 80076bc:	eb04 0903 	add.w	r9, r4, r3
 80076c0:	f000 fdf6 	bl	80082b0 <_sbrk_r>
 80076c4:	4581      	cmp	r9, r0
 80076c6:	d142      	bne.n	800774e <_malloc_r+0xea>
 80076c8:	6821      	ldr	r1, [r4, #0]
 80076ca:	4630      	mov	r0, r6
 80076cc:	1a6d      	subs	r5, r5, r1
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7ff ffa6 	bl	8007620 <sbrk_aligned>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d03a      	beq.n	800774e <_malloc_r+0xea>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	442b      	add	r3, r5
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	f8d8 3000 	ldr.w	r3, [r8]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	bb62      	cbnz	r2, 8007740 <_malloc_r+0xdc>
 80076e6:	f8c8 7000 	str.w	r7, [r8]
 80076ea:	e00f      	b.n	800770c <_malloc_r+0xa8>
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	1b52      	subs	r2, r2, r5
 80076f0:	d420      	bmi.n	8007734 <_malloc_r+0xd0>
 80076f2:	2a0b      	cmp	r2, #11
 80076f4:	d917      	bls.n	8007726 <_malloc_r+0xc2>
 80076f6:	1961      	adds	r1, r4, r5
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	6025      	str	r5, [r4, #0]
 80076fc:	bf18      	it	ne
 80076fe:	6059      	strne	r1, [r3, #4]
 8007700:	6863      	ldr	r3, [r4, #4]
 8007702:	bf08      	it	eq
 8007704:	f8c8 1000 	streq.w	r1, [r8]
 8007708:	5162      	str	r2, [r4, r5]
 800770a:	604b      	str	r3, [r1, #4]
 800770c:	4630      	mov	r0, r6
 800770e:	f000 f82f 	bl	8007770 <__malloc_unlock>
 8007712:	f104 000b 	add.w	r0, r4, #11
 8007716:	1d23      	adds	r3, r4, #4
 8007718:	f020 0007 	bic.w	r0, r0, #7
 800771c:	1ac2      	subs	r2, r0, r3
 800771e:	bf1c      	itt	ne
 8007720:	1a1b      	subne	r3, r3, r0
 8007722:	50a3      	strne	r3, [r4, r2]
 8007724:	e7af      	b.n	8007686 <_malloc_r+0x22>
 8007726:	6862      	ldr	r2, [r4, #4]
 8007728:	42a3      	cmp	r3, r4
 800772a:	bf0c      	ite	eq
 800772c:	f8c8 2000 	streq.w	r2, [r8]
 8007730:	605a      	strne	r2, [r3, #4]
 8007732:	e7eb      	b.n	800770c <_malloc_r+0xa8>
 8007734:	4623      	mov	r3, r4
 8007736:	6864      	ldr	r4, [r4, #4]
 8007738:	e7ae      	b.n	8007698 <_malloc_r+0x34>
 800773a:	463c      	mov	r4, r7
 800773c:	687f      	ldr	r7, [r7, #4]
 800773e:	e7b6      	b.n	80076ae <_malloc_r+0x4a>
 8007740:	461a      	mov	r2, r3
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	42a3      	cmp	r3, r4
 8007746:	d1fb      	bne.n	8007740 <_malloc_r+0xdc>
 8007748:	2300      	movs	r3, #0
 800774a:	6053      	str	r3, [r2, #4]
 800774c:	e7de      	b.n	800770c <_malloc_r+0xa8>
 800774e:	230c      	movs	r3, #12
 8007750:	4630      	mov	r0, r6
 8007752:	6033      	str	r3, [r6, #0]
 8007754:	f000 f80c 	bl	8007770 <__malloc_unlock>
 8007758:	e794      	b.n	8007684 <_malloc_r+0x20>
 800775a:	6005      	str	r5, [r0, #0]
 800775c:	e7d6      	b.n	800770c <_malloc_r+0xa8>
 800775e:	bf00      	nop
 8007760:	200009e8 	.word	0x200009e8

08007764 <__malloc_lock>:
 8007764:	4801      	ldr	r0, [pc, #4]	@ (800776c <__malloc_lock+0x8>)
 8007766:	f7ff b89c 	b.w	80068a2 <__retarget_lock_acquire_recursive>
 800776a:	bf00      	nop
 800776c:	200009e0 	.word	0x200009e0

08007770 <__malloc_unlock>:
 8007770:	4801      	ldr	r0, [pc, #4]	@ (8007778 <__malloc_unlock+0x8>)
 8007772:	f7ff b897 	b.w	80068a4 <__retarget_lock_release_recursive>
 8007776:	bf00      	nop
 8007778:	200009e0 	.word	0x200009e0

0800777c <_Balloc>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	69c6      	ldr	r6, [r0, #28]
 8007780:	4604      	mov	r4, r0
 8007782:	460d      	mov	r5, r1
 8007784:	b976      	cbnz	r6, 80077a4 <_Balloc+0x28>
 8007786:	2010      	movs	r0, #16
 8007788:	f7ff ff42 	bl	8007610 <malloc>
 800778c:	4602      	mov	r2, r0
 800778e:	61e0      	str	r0, [r4, #28]
 8007790:	b920      	cbnz	r0, 800779c <_Balloc+0x20>
 8007792:	216b      	movs	r1, #107	@ 0x6b
 8007794:	4b17      	ldr	r3, [pc, #92]	@ (80077f4 <_Balloc+0x78>)
 8007796:	4818      	ldr	r0, [pc, #96]	@ (80077f8 <_Balloc+0x7c>)
 8007798:	f000 fd9a 	bl	80082d0 <__assert_func>
 800779c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077a0:	6006      	str	r6, [r0, #0]
 80077a2:	60c6      	str	r6, [r0, #12]
 80077a4:	69e6      	ldr	r6, [r4, #28]
 80077a6:	68f3      	ldr	r3, [r6, #12]
 80077a8:	b183      	cbz	r3, 80077cc <_Balloc+0x50>
 80077aa:	69e3      	ldr	r3, [r4, #28]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077b2:	b9b8      	cbnz	r0, 80077e4 <_Balloc+0x68>
 80077b4:	2101      	movs	r1, #1
 80077b6:	fa01 f605 	lsl.w	r6, r1, r5
 80077ba:	1d72      	adds	r2, r6, #5
 80077bc:	4620      	mov	r0, r4
 80077be:	0092      	lsls	r2, r2, #2
 80077c0:	f000 fda4 	bl	800830c <_calloc_r>
 80077c4:	b160      	cbz	r0, 80077e0 <_Balloc+0x64>
 80077c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ca:	e00e      	b.n	80077ea <_Balloc+0x6e>
 80077cc:	2221      	movs	r2, #33	@ 0x21
 80077ce:	2104      	movs	r1, #4
 80077d0:	4620      	mov	r0, r4
 80077d2:	f000 fd9b 	bl	800830c <_calloc_r>
 80077d6:	69e3      	ldr	r3, [r4, #28]
 80077d8:	60f0      	str	r0, [r6, #12]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e4      	bne.n	80077aa <_Balloc+0x2e>
 80077e0:	2000      	movs	r0, #0
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	6802      	ldr	r2, [r0, #0]
 80077e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ea:	2300      	movs	r3, #0
 80077ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077f0:	e7f7      	b.n	80077e2 <_Balloc+0x66>
 80077f2:	bf00      	nop
 80077f4:	0800908b 	.word	0x0800908b
 80077f8:	0800910b 	.word	0x0800910b

080077fc <_Bfree>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	69c6      	ldr	r6, [r0, #28]
 8007800:	4605      	mov	r5, r0
 8007802:	460c      	mov	r4, r1
 8007804:	b976      	cbnz	r6, 8007824 <_Bfree+0x28>
 8007806:	2010      	movs	r0, #16
 8007808:	f7ff ff02 	bl	8007610 <malloc>
 800780c:	4602      	mov	r2, r0
 800780e:	61e8      	str	r0, [r5, #28]
 8007810:	b920      	cbnz	r0, 800781c <_Bfree+0x20>
 8007812:	218f      	movs	r1, #143	@ 0x8f
 8007814:	4b08      	ldr	r3, [pc, #32]	@ (8007838 <_Bfree+0x3c>)
 8007816:	4809      	ldr	r0, [pc, #36]	@ (800783c <_Bfree+0x40>)
 8007818:	f000 fd5a 	bl	80082d0 <__assert_func>
 800781c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007820:	6006      	str	r6, [r0, #0]
 8007822:	60c6      	str	r6, [r0, #12]
 8007824:	b13c      	cbz	r4, 8007836 <_Bfree+0x3a>
 8007826:	69eb      	ldr	r3, [r5, #28]
 8007828:	6862      	ldr	r2, [r4, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007830:	6021      	str	r1, [r4, #0]
 8007832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	0800908b 	.word	0x0800908b
 800783c:	0800910b 	.word	0x0800910b

08007840 <__multadd>:
 8007840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007844:	4607      	mov	r7, r0
 8007846:	460c      	mov	r4, r1
 8007848:	461e      	mov	r6, r3
 800784a:	2000      	movs	r0, #0
 800784c:	690d      	ldr	r5, [r1, #16]
 800784e:	f101 0c14 	add.w	ip, r1, #20
 8007852:	f8dc 3000 	ldr.w	r3, [ip]
 8007856:	3001      	adds	r0, #1
 8007858:	b299      	uxth	r1, r3
 800785a:	fb02 6101 	mla	r1, r2, r1, r6
 800785e:	0c1e      	lsrs	r6, r3, #16
 8007860:	0c0b      	lsrs	r3, r1, #16
 8007862:	fb02 3306 	mla	r3, r2, r6, r3
 8007866:	b289      	uxth	r1, r1
 8007868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800786c:	4285      	cmp	r5, r0
 800786e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007872:	f84c 1b04 	str.w	r1, [ip], #4
 8007876:	dcec      	bgt.n	8007852 <__multadd+0x12>
 8007878:	b30e      	cbz	r6, 80078be <__multadd+0x7e>
 800787a:	68a3      	ldr	r3, [r4, #8]
 800787c:	42ab      	cmp	r3, r5
 800787e:	dc19      	bgt.n	80078b4 <__multadd+0x74>
 8007880:	6861      	ldr	r1, [r4, #4]
 8007882:	4638      	mov	r0, r7
 8007884:	3101      	adds	r1, #1
 8007886:	f7ff ff79 	bl	800777c <_Balloc>
 800788a:	4680      	mov	r8, r0
 800788c:	b928      	cbnz	r0, 800789a <__multadd+0x5a>
 800788e:	4602      	mov	r2, r0
 8007890:	21ba      	movs	r1, #186	@ 0xba
 8007892:	4b0c      	ldr	r3, [pc, #48]	@ (80078c4 <__multadd+0x84>)
 8007894:	480c      	ldr	r0, [pc, #48]	@ (80078c8 <__multadd+0x88>)
 8007896:	f000 fd1b 	bl	80082d0 <__assert_func>
 800789a:	6922      	ldr	r2, [r4, #16]
 800789c:	f104 010c 	add.w	r1, r4, #12
 80078a0:	3202      	adds	r2, #2
 80078a2:	0092      	lsls	r2, r2, #2
 80078a4:	300c      	adds	r0, #12
 80078a6:	f7ff f80c 	bl	80068c2 <memcpy>
 80078aa:	4621      	mov	r1, r4
 80078ac:	4638      	mov	r0, r7
 80078ae:	f7ff ffa5 	bl	80077fc <_Bfree>
 80078b2:	4644      	mov	r4, r8
 80078b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078b8:	3501      	adds	r5, #1
 80078ba:	615e      	str	r6, [r3, #20]
 80078bc:	6125      	str	r5, [r4, #16]
 80078be:	4620      	mov	r0, r4
 80078c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c4:	080090fa 	.word	0x080090fa
 80078c8:	0800910b 	.word	0x0800910b

080078cc <__hi0bits>:
 80078cc:	4603      	mov	r3, r0
 80078ce:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80078d2:	bf3a      	itte	cc
 80078d4:	0403      	lslcc	r3, r0, #16
 80078d6:	2010      	movcc	r0, #16
 80078d8:	2000      	movcs	r0, #0
 80078da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078de:	bf3c      	itt	cc
 80078e0:	021b      	lslcc	r3, r3, #8
 80078e2:	3008      	addcc	r0, #8
 80078e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078e8:	bf3c      	itt	cc
 80078ea:	011b      	lslcc	r3, r3, #4
 80078ec:	3004      	addcc	r0, #4
 80078ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078f2:	bf3c      	itt	cc
 80078f4:	009b      	lslcc	r3, r3, #2
 80078f6:	3002      	addcc	r0, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	db05      	blt.n	8007908 <__hi0bits+0x3c>
 80078fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007900:	f100 0001 	add.w	r0, r0, #1
 8007904:	bf08      	it	eq
 8007906:	2020      	moveq	r0, #32
 8007908:	4770      	bx	lr

0800790a <__lo0bits>:
 800790a:	6803      	ldr	r3, [r0, #0]
 800790c:	4602      	mov	r2, r0
 800790e:	f013 0007 	ands.w	r0, r3, #7
 8007912:	d00b      	beq.n	800792c <__lo0bits+0x22>
 8007914:	07d9      	lsls	r1, r3, #31
 8007916:	d421      	bmi.n	800795c <__lo0bits+0x52>
 8007918:	0798      	lsls	r0, r3, #30
 800791a:	bf49      	itett	mi
 800791c:	085b      	lsrmi	r3, r3, #1
 800791e:	089b      	lsrpl	r3, r3, #2
 8007920:	2001      	movmi	r0, #1
 8007922:	6013      	strmi	r3, [r2, #0]
 8007924:	bf5c      	itt	pl
 8007926:	2002      	movpl	r0, #2
 8007928:	6013      	strpl	r3, [r2, #0]
 800792a:	4770      	bx	lr
 800792c:	b299      	uxth	r1, r3
 800792e:	b909      	cbnz	r1, 8007934 <__lo0bits+0x2a>
 8007930:	2010      	movs	r0, #16
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	b2d9      	uxtb	r1, r3
 8007936:	b909      	cbnz	r1, 800793c <__lo0bits+0x32>
 8007938:	3008      	adds	r0, #8
 800793a:	0a1b      	lsrs	r3, r3, #8
 800793c:	0719      	lsls	r1, r3, #28
 800793e:	bf04      	itt	eq
 8007940:	091b      	lsreq	r3, r3, #4
 8007942:	3004      	addeq	r0, #4
 8007944:	0799      	lsls	r1, r3, #30
 8007946:	bf04      	itt	eq
 8007948:	089b      	lsreq	r3, r3, #2
 800794a:	3002      	addeq	r0, #2
 800794c:	07d9      	lsls	r1, r3, #31
 800794e:	d403      	bmi.n	8007958 <__lo0bits+0x4e>
 8007950:	085b      	lsrs	r3, r3, #1
 8007952:	f100 0001 	add.w	r0, r0, #1
 8007956:	d003      	beq.n	8007960 <__lo0bits+0x56>
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	4770      	bx	lr
 800795c:	2000      	movs	r0, #0
 800795e:	4770      	bx	lr
 8007960:	2020      	movs	r0, #32
 8007962:	4770      	bx	lr

08007964 <__i2b>:
 8007964:	b510      	push	{r4, lr}
 8007966:	460c      	mov	r4, r1
 8007968:	2101      	movs	r1, #1
 800796a:	f7ff ff07 	bl	800777c <_Balloc>
 800796e:	4602      	mov	r2, r0
 8007970:	b928      	cbnz	r0, 800797e <__i2b+0x1a>
 8007972:	f240 1145 	movw	r1, #325	@ 0x145
 8007976:	4b04      	ldr	r3, [pc, #16]	@ (8007988 <__i2b+0x24>)
 8007978:	4804      	ldr	r0, [pc, #16]	@ (800798c <__i2b+0x28>)
 800797a:	f000 fca9 	bl	80082d0 <__assert_func>
 800797e:	2301      	movs	r3, #1
 8007980:	6144      	str	r4, [r0, #20]
 8007982:	6103      	str	r3, [r0, #16]
 8007984:	bd10      	pop	{r4, pc}
 8007986:	bf00      	nop
 8007988:	080090fa 	.word	0x080090fa
 800798c:	0800910b 	.word	0x0800910b

08007990 <__multiply>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	4614      	mov	r4, r2
 8007996:	690a      	ldr	r2, [r1, #16]
 8007998:	6923      	ldr	r3, [r4, #16]
 800799a:	460f      	mov	r7, r1
 800799c:	429a      	cmp	r2, r3
 800799e:	bfa2      	ittt	ge
 80079a0:	4623      	movge	r3, r4
 80079a2:	460c      	movge	r4, r1
 80079a4:	461f      	movge	r7, r3
 80079a6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80079aa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	6861      	ldr	r1, [r4, #4]
 80079b2:	eb0a 0609 	add.w	r6, sl, r9
 80079b6:	42b3      	cmp	r3, r6
 80079b8:	b085      	sub	sp, #20
 80079ba:	bfb8      	it	lt
 80079bc:	3101      	addlt	r1, #1
 80079be:	f7ff fedd 	bl	800777c <_Balloc>
 80079c2:	b930      	cbnz	r0, 80079d2 <__multiply+0x42>
 80079c4:	4602      	mov	r2, r0
 80079c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80079ca:	4b43      	ldr	r3, [pc, #268]	@ (8007ad8 <__multiply+0x148>)
 80079cc:	4843      	ldr	r0, [pc, #268]	@ (8007adc <__multiply+0x14c>)
 80079ce:	f000 fc7f 	bl	80082d0 <__assert_func>
 80079d2:	f100 0514 	add.w	r5, r0, #20
 80079d6:	462b      	mov	r3, r5
 80079d8:	2200      	movs	r2, #0
 80079da:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079de:	4543      	cmp	r3, r8
 80079e0:	d321      	bcc.n	8007a26 <__multiply+0x96>
 80079e2:	f107 0114 	add.w	r1, r7, #20
 80079e6:	f104 0214 	add.w	r2, r4, #20
 80079ea:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80079ee:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80079f2:	9302      	str	r3, [sp, #8]
 80079f4:	1b13      	subs	r3, r2, r4
 80079f6:	3b15      	subs	r3, #21
 80079f8:	f023 0303 	bic.w	r3, r3, #3
 80079fc:	3304      	adds	r3, #4
 80079fe:	f104 0715 	add.w	r7, r4, #21
 8007a02:	42ba      	cmp	r2, r7
 8007a04:	bf38      	it	cc
 8007a06:	2304      	movcc	r3, #4
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	9b02      	ldr	r3, [sp, #8]
 8007a0c:	9103      	str	r1, [sp, #12]
 8007a0e:	428b      	cmp	r3, r1
 8007a10:	d80c      	bhi.n	8007a2c <__multiply+0x9c>
 8007a12:	2e00      	cmp	r6, #0
 8007a14:	dd03      	ble.n	8007a1e <__multiply+0x8e>
 8007a16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d05a      	beq.n	8007ad4 <__multiply+0x144>
 8007a1e:	6106      	str	r6, [r0, #16]
 8007a20:	b005      	add	sp, #20
 8007a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a26:	f843 2b04 	str.w	r2, [r3], #4
 8007a2a:	e7d8      	b.n	80079de <__multiply+0x4e>
 8007a2c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a30:	f1ba 0f00 	cmp.w	sl, #0
 8007a34:	d023      	beq.n	8007a7e <__multiply+0xee>
 8007a36:	46a9      	mov	r9, r5
 8007a38:	f04f 0c00 	mov.w	ip, #0
 8007a3c:	f104 0e14 	add.w	lr, r4, #20
 8007a40:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a44:	f8d9 3000 	ldr.w	r3, [r9]
 8007a48:	fa1f fb87 	uxth.w	fp, r7
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007a52:	4463      	add	r3, ip
 8007a54:	f8d9 c000 	ldr.w	ip, [r9]
 8007a58:	0c3f      	lsrs	r7, r7, #16
 8007a5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a5e:	fb0a c707 	mla	r7, sl, r7, ip
 8007a62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a6c:	4572      	cmp	r2, lr
 8007a6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a72:	f849 3b04 	str.w	r3, [r9], #4
 8007a76:	d8e3      	bhi.n	8007a40 <__multiply+0xb0>
 8007a78:	9b01      	ldr	r3, [sp, #4]
 8007a7a:	f845 c003 	str.w	ip, [r5, r3]
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	3104      	adds	r1, #4
 8007a82:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007a86:	f1b9 0f00 	cmp.w	r9, #0
 8007a8a:	d021      	beq.n	8007ad0 <__multiply+0x140>
 8007a8c:	46ae      	mov	lr, r5
 8007a8e:	f04f 0a00 	mov.w	sl, #0
 8007a92:	682b      	ldr	r3, [r5, #0]
 8007a94:	f104 0c14 	add.w	ip, r4, #20
 8007a98:	f8bc b000 	ldrh.w	fp, [ip]
 8007a9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	fb09 770b 	mla	r7, r9, fp, r7
 8007aa6:	4457      	add	r7, sl
 8007aa8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007aac:	f84e 3b04 	str.w	r3, [lr], #4
 8007ab0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ab4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ab8:	f8be 3000 	ldrh.w	r3, [lr]
 8007abc:	4562      	cmp	r2, ip
 8007abe:	fb09 330a 	mla	r3, r9, sl, r3
 8007ac2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007ac6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007aca:	d8e5      	bhi.n	8007a98 <__multiply+0x108>
 8007acc:	9f01      	ldr	r7, [sp, #4]
 8007ace:	51eb      	str	r3, [r5, r7]
 8007ad0:	3504      	adds	r5, #4
 8007ad2:	e79a      	b.n	8007a0a <__multiply+0x7a>
 8007ad4:	3e01      	subs	r6, #1
 8007ad6:	e79c      	b.n	8007a12 <__multiply+0x82>
 8007ad8:	080090fa 	.word	0x080090fa
 8007adc:	0800910b 	.word	0x0800910b

08007ae0 <__pow5mult>:
 8007ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae4:	4615      	mov	r5, r2
 8007ae6:	f012 0203 	ands.w	r2, r2, #3
 8007aea:	4607      	mov	r7, r0
 8007aec:	460e      	mov	r6, r1
 8007aee:	d007      	beq.n	8007b00 <__pow5mult+0x20>
 8007af0:	4c25      	ldr	r4, [pc, #148]	@ (8007b88 <__pow5mult+0xa8>)
 8007af2:	3a01      	subs	r2, #1
 8007af4:	2300      	movs	r3, #0
 8007af6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007afa:	f7ff fea1 	bl	8007840 <__multadd>
 8007afe:	4606      	mov	r6, r0
 8007b00:	10ad      	asrs	r5, r5, #2
 8007b02:	d03d      	beq.n	8007b80 <__pow5mult+0xa0>
 8007b04:	69fc      	ldr	r4, [r7, #28]
 8007b06:	b97c      	cbnz	r4, 8007b28 <__pow5mult+0x48>
 8007b08:	2010      	movs	r0, #16
 8007b0a:	f7ff fd81 	bl	8007610 <malloc>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	61f8      	str	r0, [r7, #28]
 8007b12:	b928      	cbnz	r0, 8007b20 <__pow5mult+0x40>
 8007b14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b18:	4b1c      	ldr	r3, [pc, #112]	@ (8007b8c <__pow5mult+0xac>)
 8007b1a:	481d      	ldr	r0, [pc, #116]	@ (8007b90 <__pow5mult+0xb0>)
 8007b1c:	f000 fbd8 	bl	80082d0 <__assert_func>
 8007b20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b24:	6004      	str	r4, [r0, #0]
 8007b26:	60c4      	str	r4, [r0, #12]
 8007b28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b30:	b94c      	cbnz	r4, 8007b46 <__pow5mult+0x66>
 8007b32:	f240 2171 	movw	r1, #625	@ 0x271
 8007b36:	4638      	mov	r0, r7
 8007b38:	f7ff ff14 	bl	8007964 <__i2b>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	4604      	mov	r4, r0
 8007b40:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b44:	6003      	str	r3, [r0, #0]
 8007b46:	f04f 0900 	mov.w	r9, #0
 8007b4a:	07eb      	lsls	r3, r5, #31
 8007b4c:	d50a      	bpl.n	8007b64 <__pow5mult+0x84>
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4622      	mov	r2, r4
 8007b52:	4638      	mov	r0, r7
 8007b54:	f7ff ff1c 	bl	8007990 <__multiply>
 8007b58:	4680      	mov	r8, r0
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	f7ff fe4d 	bl	80077fc <_Bfree>
 8007b62:	4646      	mov	r6, r8
 8007b64:	106d      	asrs	r5, r5, #1
 8007b66:	d00b      	beq.n	8007b80 <__pow5mult+0xa0>
 8007b68:	6820      	ldr	r0, [r4, #0]
 8007b6a:	b938      	cbnz	r0, 8007b7c <__pow5mult+0x9c>
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4638      	mov	r0, r7
 8007b72:	f7ff ff0d 	bl	8007990 <__multiply>
 8007b76:	6020      	str	r0, [r4, #0]
 8007b78:	f8c0 9000 	str.w	r9, [r0]
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	e7e4      	b.n	8007b4a <__pow5mult+0x6a>
 8007b80:	4630      	mov	r0, r6
 8007b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b86:	bf00      	nop
 8007b88:	08009164 	.word	0x08009164
 8007b8c:	0800908b 	.word	0x0800908b
 8007b90:	0800910b 	.word	0x0800910b

08007b94 <__lshift>:
 8007b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b98:	460c      	mov	r4, r1
 8007b9a:	4607      	mov	r7, r0
 8007b9c:	4691      	mov	r9, r2
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	6849      	ldr	r1, [r1, #4]
 8007ba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ba6:	68a3      	ldr	r3, [r4, #8]
 8007ba8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bac:	f108 0601 	add.w	r6, r8, #1
 8007bb0:	42b3      	cmp	r3, r6
 8007bb2:	db0b      	blt.n	8007bcc <__lshift+0x38>
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f7ff fde1 	bl	800777c <_Balloc>
 8007bba:	4605      	mov	r5, r0
 8007bbc:	b948      	cbnz	r0, 8007bd2 <__lshift+0x3e>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007bc4:	4b27      	ldr	r3, [pc, #156]	@ (8007c64 <__lshift+0xd0>)
 8007bc6:	4828      	ldr	r0, [pc, #160]	@ (8007c68 <__lshift+0xd4>)
 8007bc8:	f000 fb82 	bl	80082d0 <__assert_func>
 8007bcc:	3101      	adds	r1, #1
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	e7ee      	b.n	8007bb0 <__lshift+0x1c>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f100 0114 	add.w	r1, r0, #20
 8007bd8:	f100 0210 	add.w	r2, r0, #16
 8007bdc:	4618      	mov	r0, r3
 8007bde:	4553      	cmp	r3, sl
 8007be0:	db33      	blt.n	8007c4a <__lshift+0xb6>
 8007be2:	6920      	ldr	r0, [r4, #16]
 8007be4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007be8:	f104 0314 	add.w	r3, r4, #20
 8007bec:	f019 091f 	ands.w	r9, r9, #31
 8007bf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bf8:	d02b      	beq.n	8007c52 <__lshift+0xbe>
 8007bfa:	468a      	mov	sl, r1
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f1c9 0e20 	rsb	lr, r9, #32
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	fa00 f009 	lsl.w	r0, r0, r9
 8007c08:	4310      	orrs	r0, r2
 8007c0a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c12:	459c      	cmp	ip, r3
 8007c14:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c18:	d8f3      	bhi.n	8007c02 <__lshift+0x6e>
 8007c1a:	ebac 0304 	sub.w	r3, ip, r4
 8007c1e:	3b15      	subs	r3, #21
 8007c20:	f023 0303 	bic.w	r3, r3, #3
 8007c24:	3304      	adds	r3, #4
 8007c26:	f104 0015 	add.w	r0, r4, #21
 8007c2a:	4584      	cmp	ip, r0
 8007c2c:	bf38      	it	cc
 8007c2e:	2304      	movcc	r3, #4
 8007c30:	50ca      	str	r2, [r1, r3]
 8007c32:	b10a      	cbz	r2, 8007c38 <__lshift+0xa4>
 8007c34:	f108 0602 	add.w	r6, r8, #2
 8007c38:	3e01      	subs	r6, #1
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	612e      	str	r6, [r5, #16]
 8007c40:	f7ff fddc 	bl	80077fc <_Bfree>
 8007c44:	4628      	mov	r0, r5
 8007c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c4e:	3301      	adds	r3, #1
 8007c50:	e7c5      	b.n	8007bde <__lshift+0x4a>
 8007c52:	3904      	subs	r1, #4
 8007c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c58:	459c      	cmp	ip, r3
 8007c5a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c5e:	d8f9      	bhi.n	8007c54 <__lshift+0xc0>
 8007c60:	e7ea      	b.n	8007c38 <__lshift+0xa4>
 8007c62:	bf00      	nop
 8007c64:	080090fa 	.word	0x080090fa
 8007c68:	0800910b 	.word	0x0800910b

08007c6c <__mcmp>:
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	690a      	ldr	r2, [r1, #16]
 8007c70:	6900      	ldr	r0, [r0, #16]
 8007c72:	b530      	push	{r4, r5, lr}
 8007c74:	1a80      	subs	r0, r0, r2
 8007c76:	d10e      	bne.n	8007c96 <__mcmp+0x2a>
 8007c78:	3314      	adds	r3, #20
 8007c7a:	3114      	adds	r1, #20
 8007c7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c8c:	4295      	cmp	r5, r2
 8007c8e:	d003      	beq.n	8007c98 <__mcmp+0x2c>
 8007c90:	d205      	bcs.n	8007c9e <__mcmp+0x32>
 8007c92:	f04f 30ff 	mov.w	r0, #4294967295
 8007c96:	bd30      	pop	{r4, r5, pc}
 8007c98:	42a3      	cmp	r3, r4
 8007c9a:	d3f3      	bcc.n	8007c84 <__mcmp+0x18>
 8007c9c:	e7fb      	b.n	8007c96 <__mcmp+0x2a>
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	e7f9      	b.n	8007c96 <__mcmp+0x2a>
	...

08007ca4 <__mdiff>:
 8007ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	4689      	mov	r9, r1
 8007caa:	4606      	mov	r6, r0
 8007cac:	4611      	mov	r1, r2
 8007cae:	4648      	mov	r0, r9
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	f7ff ffdb 	bl	8007c6c <__mcmp>
 8007cb6:	1e05      	subs	r5, r0, #0
 8007cb8:	d112      	bne.n	8007ce0 <__mdiff+0x3c>
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff fd5d 	bl	800777c <_Balloc>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	b928      	cbnz	r0, 8007cd2 <__mdiff+0x2e>
 8007cc6:	f240 2137 	movw	r1, #567	@ 0x237
 8007cca:	4b3e      	ldr	r3, [pc, #248]	@ (8007dc4 <__mdiff+0x120>)
 8007ccc:	483e      	ldr	r0, [pc, #248]	@ (8007dc8 <__mdiff+0x124>)
 8007cce:	f000 faff 	bl	80082d0 <__assert_func>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cd8:	4610      	mov	r0, r2
 8007cda:	b003      	add	sp, #12
 8007cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce0:	bfbc      	itt	lt
 8007ce2:	464b      	movlt	r3, r9
 8007ce4:	46a1      	movlt	r9, r4
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007cec:	bfba      	itte	lt
 8007cee:	461c      	movlt	r4, r3
 8007cf0:	2501      	movlt	r5, #1
 8007cf2:	2500      	movge	r5, #0
 8007cf4:	f7ff fd42 	bl	800777c <_Balloc>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	b918      	cbnz	r0, 8007d04 <__mdiff+0x60>
 8007cfc:	f240 2145 	movw	r1, #581	@ 0x245
 8007d00:	4b30      	ldr	r3, [pc, #192]	@ (8007dc4 <__mdiff+0x120>)
 8007d02:	e7e3      	b.n	8007ccc <__mdiff+0x28>
 8007d04:	f100 0b14 	add.w	fp, r0, #20
 8007d08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d0c:	f109 0310 	add.w	r3, r9, #16
 8007d10:	60c5      	str	r5, [r0, #12]
 8007d12:	f04f 0c00 	mov.w	ip, #0
 8007d16:	f109 0514 	add.w	r5, r9, #20
 8007d1a:	46d9      	mov	r9, fp
 8007d1c:	6926      	ldr	r6, [r4, #16]
 8007d1e:	f104 0e14 	add.w	lr, r4, #20
 8007d22:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d26:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d2a:	9301      	str	r3, [sp, #4]
 8007d2c:	9b01      	ldr	r3, [sp, #4]
 8007d2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d36:	b281      	uxth	r1, r0
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	fa1f f38a 	uxth.w	r3, sl
 8007d3e:	1a5b      	subs	r3, r3, r1
 8007d40:	0c00      	lsrs	r0, r0, #16
 8007d42:	4463      	add	r3, ip
 8007d44:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007d48:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007d52:	4576      	cmp	r6, lr
 8007d54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d58:	f849 3b04 	str.w	r3, [r9], #4
 8007d5c:	d8e6      	bhi.n	8007d2c <__mdiff+0x88>
 8007d5e:	1b33      	subs	r3, r6, r4
 8007d60:	3b15      	subs	r3, #21
 8007d62:	f023 0303 	bic.w	r3, r3, #3
 8007d66:	3415      	adds	r4, #21
 8007d68:	3304      	adds	r3, #4
 8007d6a:	42a6      	cmp	r6, r4
 8007d6c:	bf38      	it	cc
 8007d6e:	2304      	movcc	r3, #4
 8007d70:	441d      	add	r5, r3
 8007d72:	445b      	add	r3, fp
 8007d74:	461e      	mov	r6, r3
 8007d76:	462c      	mov	r4, r5
 8007d78:	4544      	cmp	r4, r8
 8007d7a:	d30e      	bcc.n	8007d9a <__mdiff+0xf6>
 8007d7c:	f108 0103 	add.w	r1, r8, #3
 8007d80:	1b49      	subs	r1, r1, r5
 8007d82:	f021 0103 	bic.w	r1, r1, #3
 8007d86:	3d03      	subs	r5, #3
 8007d88:	45a8      	cmp	r8, r5
 8007d8a:	bf38      	it	cc
 8007d8c:	2100      	movcc	r1, #0
 8007d8e:	440b      	add	r3, r1
 8007d90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d94:	b199      	cbz	r1, 8007dbe <__mdiff+0x11a>
 8007d96:	6117      	str	r7, [r2, #16]
 8007d98:	e79e      	b.n	8007cd8 <__mdiff+0x34>
 8007d9a:	46e6      	mov	lr, ip
 8007d9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007da0:	fa1f fc81 	uxth.w	ip, r1
 8007da4:	44f4      	add	ip, lr
 8007da6:	0c08      	lsrs	r0, r1, #16
 8007da8:	4471      	add	r1, lr
 8007daa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007dae:	b289      	uxth	r1, r1
 8007db0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007db4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007db8:	f846 1b04 	str.w	r1, [r6], #4
 8007dbc:	e7dc      	b.n	8007d78 <__mdiff+0xd4>
 8007dbe:	3f01      	subs	r7, #1
 8007dc0:	e7e6      	b.n	8007d90 <__mdiff+0xec>
 8007dc2:	bf00      	nop
 8007dc4:	080090fa 	.word	0x080090fa
 8007dc8:	0800910b 	.word	0x0800910b

08007dcc <__d2b>:
 8007dcc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	4690      	mov	r8, r2
 8007dd4:	4699      	mov	r9, r3
 8007dd6:	9e08      	ldr	r6, [sp, #32]
 8007dd8:	f7ff fcd0 	bl	800777c <_Balloc>
 8007ddc:	4604      	mov	r4, r0
 8007dde:	b930      	cbnz	r0, 8007dee <__d2b+0x22>
 8007de0:	4602      	mov	r2, r0
 8007de2:	f240 310f 	movw	r1, #783	@ 0x30f
 8007de6:	4b23      	ldr	r3, [pc, #140]	@ (8007e74 <__d2b+0xa8>)
 8007de8:	4823      	ldr	r0, [pc, #140]	@ (8007e78 <__d2b+0xac>)
 8007dea:	f000 fa71 	bl	80082d0 <__assert_func>
 8007dee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007df2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007df6:	b10d      	cbz	r5, 8007dfc <__d2b+0x30>
 8007df8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	f1b8 0300 	subs.w	r3, r8, #0
 8007e02:	d024      	beq.n	8007e4e <__d2b+0x82>
 8007e04:	4668      	mov	r0, sp
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	f7ff fd7f 	bl	800790a <__lo0bits>
 8007e0c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e10:	b1d8      	cbz	r0, 8007e4a <__d2b+0x7e>
 8007e12:	f1c0 0320 	rsb	r3, r0, #32
 8007e16:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1a:	430b      	orrs	r3, r1
 8007e1c:	40c2      	lsrs	r2, r0
 8007e1e:	6163      	str	r3, [r4, #20]
 8007e20:	9201      	str	r2, [sp, #4]
 8007e22:	9b01      	ldr	r3, [sp, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	bf0c      	ite	eq
 8007e28:	2201      	moveq	r2, #1
 8007e2a:	2202      	movne	r2, #2
 8007e2c:	61a3      	str	r3, [r4, #24]
 8007e2e:	6122      	str	r2, [r4, #16]
 8007e30:	b1ad      	cbz	r5, 8007e5e <__d2b+0x92>
 8007e32:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e36:	4405      	add	r5, r0
 8007e38:	6035      	str	r5, [r6, #0]
 8007e3a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e40:	6018      	str	r0, [r3, #0]
 8007e42:	4620      	mov	r0, r4
 8007e44:	b002      	add	sp, #8
 8007e46:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007e4a:	6161      	str	r1, [r4, #20]
 8007e4c:	e7e9      	b.n	8007e22 <__d2b+0x56>
 8007e4e:	a801      	add	r0, sp, #4
 8007e50:	f7ff fd5b 	bl	800790a <__lo0bits>
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	6163      	str	r3, [r4, #20]
 8007e5a:	3020      	adds	r0, #32
 8007e5c:	e7e7      	b.n	8007e2e <__d2b+0x62>
 8007e5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e66:	6030      	str	r0, [r6, #0]
 8007e68:	6918      	ldr	r0, [r3, #16]
 8007e6a:	f7ff fd2f 	bl	80078cc <__hi0bits>
 8007e6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e72:	e7e4      	b.n	8007e3e <__d2b+0x72>
 8007e74:	080090fa 	.word	0x080090fa
 8007e78:	0800910b 	.word	0x0800910b

08007e7c <__ssputs_r>:
 8007e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e80:	461f      	mov	r7, r3
 8007e82:	688e      	ldr	r6, [r1, #8]
 8007e84:	4682      	mov	sl, r0
 8007e86:	42be      	cmp	r6, r7
 8007e88:	460c      	mov	r4, r1
 8007e8a:	4690      	mov	r8, r2
 8007e8c:	680b      	ldr	r3, [r1, #0]
 8007e8e:	d82d      	bhi.n	8007eec <__ssputs_r+0x70>
 8007e90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e98:	d026      	beq.n	8007ee8 <__ssputs_r+0x6c>
 8007e9a:	6965      	ldr	r5, [r4, #20]
 8007e9c:	6909      	ldr	r1, [r1, #16]
 8007e9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ea2:	eba3 0901 	sub.w	r9, r3, r1
 8007ea6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007eaa:	1c7b      	adds	r3, r7, #1
 8007eac:	444b      	add	r3, r9
 8007eae:	106d      	asrs	r5, r5, #1
 8007eb0:	429d      	cmp	r5, r3
 8007eb2:	bf38      	it	cc
 8007eb4:	461d      	movcc	r5, r3
 8007eb6:	0553      	lsls	r3, r2, #21
 8007eb8:	d527      	bpl.n	8007f0a <__ssputs_r+0x8e>
 8007eba:	4629      	mov	r1, r5
 8007ebc:	f7ff fbd2 	bl	8007664 <_malloc_r>
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	b360      	cbz	r0, 8007f1e <__ssputs_r+0xa2>
 8007ec4:	464a      	mov	r2, r9
 8007ec6:	6921      	ldr	r1, [r4, #16]
 8007ec8:	f7fe fcfb 	bl	80068c2 <memcpy>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	6126      	str	r6, [r4, #16]
 8007eda:	444e      	add	r6, r9
 8007edc:	6026      	str	r6, [r4, #0]
 8007ede:	463e      	mov	r6, r7
 8007ee0:	6165      	str	r5, [r4, #20]
 8007ee2:	eba5 0509 	sub.w	r5, r5, r9
 8007ee6:	60a5      	str	r5, [r4, #8]
 8007ee8:	42be      	cmp	r6, r7
 8007eea:	d900      	bls.n	8007eee <__ssputs_r+0x72>
 8007eec:	463e      	mov	r6, r7
 8007eee:	4632      	mov	r2, r6
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	6820      	ldr	r0, [r4, #0]
 8007ef4:	f000 f9c2 	bl	800827c <memmove>
 8007ef8:	2000      	movs	r0, #0
 8007efa:	68a3      	ldr	r3, [r4, #8]
 8007efc:	1b9b      	subs	r3, r3, r6
 8007efe:	60a3      	str	r3, [r4, #8]
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	4433      	add	r3, r6
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	f000 fa24 	bl	8008358 <_realloc_r>
 8007f10:	4606      	mov	r6, r0
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d1e0      	bne.n	8007ed8 <__ssputs_r+0x5c>
 8007f16:	4650      	mov	r0, sl
 8007f18:	6921      	ldr	r1, [r4, #16]
 8007f1a:	f7ff fb31 	bl	8007580 <_free_r>
 8007f1e:	230c      	movs	r3, #12
 8007f20:	f8ca 3000 	str.w	r3, [sl]
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f2e:	81a3      	strh	r3, [r4, #12]
 8007f30:	e7e9      	b.n	8007f06 <__ssputs_r+0x8a>
	...

08007f34 <_svfiprintf_r>:
 8007f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f38:	4698      	mov	r8, r3
 8007f3a:	898b      	ldrh	r3, [r1, #12]
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	061b      	lsls	r3, r3, #24
 8007f40:	460d      	mov	r5, r1
 8007f42:	4614      	mov	r4, r2
 8007f44:	b09d      	sub	sp, #116	@ 0x74
 8007f46:	d510      	bpl.n	8007f6a <_svfiprintf_r+0x36>
 8007f48:	690b      	ldr	r3, [r1, #16]
 8007f4a:	b973      	cbnz	r3, 8007f6a <_svfiprintf_r+0x36>
 8007f4c:	2140      	movs	r1, #64	@ 0x40
 8007f4e:	f7ff fb89 	bl	8007664 <_malloc_r>
 8007f52:	6028      	str	r0, [r5, #0]
 8007f54:	6128      	str	r0, [r5, #16]
 8007f56:	b930      	cbnz	r0, 8007f66 <_svfiprintf_r+0x32>
 8007f58:	230c      	movs	r3, #12
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f60:	b01d      	add	sp, #116	@ 0x74
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	2340      	movs	r3, #64	@ 0x40
 8007f68:	616b      	str	r3, [r5, #20]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f6e:	2320      	movs	r3, #32
 8007f70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f74:	2330      	movs	r3, #48	@ 0x30
 8007f76:	f04f 0901 	mov.w	r9, #1
 8007f7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f7e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008118 <_svfiprintf_r+0x1e4>
 8007f82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f86:	4623      	mov	r3, r4
 8007f88:	469a      	mov	sl, r3
 8007f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f8e:	b10a      	cbz	r2, 8007f94 <_svfiprintf_r+0x60>
 8007f90:	2a25      	cmp	r2, #37	@ 0x25
 8007f92:	d1f9      	bne.n	8007f88 <_svfiprintf_r+0x54>
 8007f94:	ebba 0b04 	subs.w	fp, sl, r4
 8007f98:	d00b      	beq.n	8007fb2 <_svfiprintf_r+0x7e>
 8007f9a:	465b      	mov	r3, fp
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	f7ff ff6b 	bl	8007e7c <__ssputs_r>
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	f000 80a7 	beq.w	80080fa <_svfiprintf_r+0x1c6>
 8007fac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fae:	445a      	add	r2, fp
 8007fb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 809f 	beq.w	80080fa <_svfiprintf_r+0x1c6>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fc6:	f10a 0a01 	add.w	sl, sl, #1
 8007fca:	9304      	str	r3, [sp, #16]
 8007fcc:	9307      	str	r3, [sp, #28]
 8007fce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fd4:	4654      	mov	r4, sl
 8007fd6:	2205      	movs	r2, #5
 8007fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fdc:	484e      	ldr	r0, [pc, #312]	@ (8008118 <_svfiprintf_r+0x1e4>)
 8007fde:	f7fe fc62 	bl	80068a6 <memchr>
 8007fe2:	9a04      	ldr	r2, [sp, #16]
 8007fe4:	b9d8      	cbnz	r0, 800801e <_svfiprintf_r+0xea>
 8007fe6:	06d0      	lsls	r0, r2, #27
 8007fe8:	bf44      	itt	mi
 8007fea:	2320      	movmi	r3, #32
 8007fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ff0:	0711      	lsls	r1, r2, #28
 8007ff2:	bf44      	itt	mi
 8007ff4:	232b      	movmi	r3, #43	@ 0x2b
 8007ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8007ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008000:	d015      	beq.n	800802e <_svfiprintf_r+0xfa>
 8008002:	4654      	mov	r4, sl
 8008004:	2000      	movs	r0, #0
 8008006:	f04f 0c0a 	mov.w	ip, #10
 800800a:	9a07      	ldr	r2, [sp, #28]
 800800c:	4621      	mov	r1, r4
 800800e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008012:	3b30      	subs	r3, #48	@ 0x30
 8008014:	2b09      	cmp	r3, #9
 8008016:	d94b      	bls.n	80080b0 <_svfiprintf_r+0x17c>
 8008018:	b1b0      	cbz	r0, 8008048 <_svfiprintf_r+0x114>
 800801a:	9207      	str	r2, [sp, #28]
 800801c:	e014      	b.n	8008048 <_svfiprintf_r+0x114>
 800801e:	eba0 0308 	sub.w	r3, r0, r8
 8008022:	fa09 f303 	lsl.w	r3, r9, r3
 8008026:	4313      	orrs	r3, r2
 8008028:	46a2      	mov	sl, r4
 800802a:	9304      	str	r3, [sp, #16]
 800802c:	e7d2      	b.n	8007fd4 <_svfiprintf_r+0xa0>
 800802e:	9b03      	ldr	r3, [sp, #12]
 8008030:	1d19      	adds	r1, r3, #4
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	9103      	str	r1, [sp, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	bfbb      	ittet	lt
 800803a:	425b      	neglt	r3, r3
 800803c:	f042 0202 	orrlt.w	r2, r2, #2
 8008040:	9307      	strge	r3, [sp, #28]
 8008042:	9307      	strlt	r3, [sp, #28]
 8008044:	bfb8      	it	lt
 8008046:	9204      	strlt	r2, [sp, #16]
 8008048:	7823      	ldrb	r3, [r4, #0]
 800804a:	2b2e      	cmp	r3, #46	@ 0x2e
 800804c:	d10a      	bne.n	8008064 <_svfiprintf_r+0x130>
 800804e:	7863      	ldrb	r3, [r4, #1]
 8008050:	2b2a      	cmp	r3, #42	@ 0x2a
 8008052:	d132      	bne.n	80080ba <_svfiprintf_r+0x186>
 8008054:	9b03      	ldr	r3, [sp, #12]
 8008056:	3402      	adds	r4, #2
 8008058:	1d1a      	adds	r2, r3, #4
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	9203      	str	r2, [sp, #12]
 800805e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008062:	9305      	str	r3, [sp, #20]
 8008064:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800811c <_svfiprintf_r+0x1e8>
 8008068:	2203      	movs	r2, #3
 800806a:	4650      	mov	r0, sl
 800806c:	7821      	ldrb	r1, [r4, #0]
 800806e:	f7fe fc1a 	bl	80068a6 <memchr>
 8008072:	b138      	cbz	r0, 8008084 <_svfiprintf_r+0x150>
 8008074:	2240      	movs	r2, #64	@ 0x40
 8008076:	9b04      	ldr	r3, [sp, #16]
 8008078:	eba0 000a 	sub.w	r0, r0, sl
 800807c:	4082      	lsls	r2, r0
 800807e:	4313      	orrs	r3, r2
 8008080:	3401      	adds	r4, #1
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008088:	2206      	movs	r2, #6
 800808a:	4825      	ldr	r0, [pc, #148]	@ (8008120 <_svfiprintf_r+0x1ec>)
 800808c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008090:	f7fe fc09 	bl	80068a6 <memchr>
 8008094:	2800      	cmp	r0, #0
 8008096:	d036      	beq.n	8008106 <_svfiprintf_r+0x1d2>
 8008098:	4b22      	ldr	r3, [pc, #136]	@ (8008124 <_svfiprintf_r+0x1f0>)
 800809a:	bb1b      	cbnz	r3, 80080e4 <_svfiprintf_r+0x1b0>
 800809c:	9b03      	ldr	r3, [sp, #12]
 800809e:	3307      	adds	r3, #7
 80080a0:	f023 0307 	bic.w	r3, r3, #7
 80080a4:	3308      	adds	r3, #8
 80080a6:	9303      	str	r3, [sp, #12]
 80080a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080aa:	4433      	add	r3, r6
 80080ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ae:	e76a      	b.n	8007f86 <_svfiprintf_r+0x52>
 80080b0:	460c      	mov	r4, r1
 80080b2:	2001      	movs	r0, #1
 80080b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080b8:	e7a8      	b.n	800800c <_svfiprintf_r+0xd8>
 80080ba:	2300      	movs	r3, #0
 80080bc:	f04f 0c0a 	mov.w	ip, #10
 80080c0:	4619      	mov	r1, r3
 80080c2:	3401      	adds	r4, #1
 80080c4:	9305      	str	r3, [sp, #20]
 80080c6:	4620      	mov	r0, r4
 80080c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080cc:	3a30      	subs	r2, #48	@ 0x30
 80080ce:	2a09      	cmp	r2, #9
 80080d0:	d903      	bls.n	80080da <_svfiprintf_r+0x1a6>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0c6      	beq.n	8008064 <_svfiprintf_r+0x130>
 80080d6:	9105      	str	r1, [sp, #20]
 80080d8:	e7c4      	b.n	8008064 <_svfiprintf_r+0x130>
 80080da:	4604      	mov	r4, r0
 80080dc:	2301      	movs	r3, #1
 80080de:	fb0c 2101 	mla	r1, ip, r1, r2
 80080e2:	e7f0      	b.n	80080c6 <_svfiprintf_r+0x192>
 80080e4:	ab03      	add	r3, sp, #12
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	462a      	mov	r2, r5
 80080ea:	4638      	mov	r0, r7
 80080ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008128 <_svfiprintf_r+0x1f4>)
 80080ee:	a904      	add	r1, sp, #16
 80080f0:	f7fd fe66 	bl	8005dc0 <_printf_float>
 80080f4:	1c42      	adds	r2, r0, #1
 80080f6:	4606      	mov	r6, r0
 80080f8:	d1d6      	bne.n	80080a8 <_svfiprintf_r+0x174>
 80080fa:	89ab      	ldrh	r3, [r5, #12]
 80080fc:	065b      	lsls	r3, r3, #25
 80080fe:	f53f af2d 	bmi.w	8007f5c <_svfiprintf_r+0x28>
 8008102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008104:	e72c      	b.n	8007f60 <_svfiprintf_r+0x2c>
 8008106:	ab03      	add	r3, sp, #12
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	462a      	mov	r2, r5
 800810c:	4638      	mov	r0, r7
 800810e:	4b06      	ldr	r3, [pc, #24]	@ (8008128 <_svfiprintf_r+0x1f4>)
 8008110:	a904      	add	r1, sp, #16
 8008112:	f7fe f8f3 	bl	80062fc <_printf_i>
 8008116:	e7ed      	b.n	80080f4 <_svfiprintf_r+0x1c0>
 8008118:	08009260 	.word	0x08009260
 800811c:	08009266 	.word	0x08009266
 8008120:	0800926a 	.word	0x0800926a
 8008124:	08005dc1 	.word	0x08005dc1
 8008128:	08007e7d 	.word	0x08007e7d

0800812c <__sflush_r>:
 800812c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	0716      	lsls	r6, r2, #28
 8008134:	4605      	mov	r5, r0
 8008136:	460c      	mov	r4, r1
 8008138:	d454      	bmi.n	80081e4 <__sflush_r+0xb8>
 800813a:	684b      	ldr	r3, [r1, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	dc02      	bgt.n	8008146 <__sflush_r+0x1a>
 8008140:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	dd48      	ble.n	80081d8 <__sflush_r+0xac>
 8008146:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008148:	2e00      	cmp	r6, #0
 800814a:	d045      	beq.n	80081d8 <__sflush_r+0xac>
 800814c:	2300      	movs	r3, #0
 800814e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008152:	682f      	ldr	r7, [r5, #0]
 8008154:	6a21      	ldr	r1, [r4, #32]
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	d030      	beq.n	80081bc <__sflush_r+0x90>
 800815a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	0759      	lsls	r1, r3, #29
 8008160:	d505      	bpl.n	800816e <__sflush_r+0x42>
 8008162:	6863      	ldr	r3, [r4, #4]
 8008164:	1ad2      	subs	r2, r2, r3
 8008166:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008168:	b10b      	cbz	r3, 800816e <__sflush_r+0x42>
 800816a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800816c:	1ad2      	subs	r2, r2, r3
 800816e:	2300      	movs	r3, #0
 8008170:	4628      	mov	r0, r5
 8008172:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008174:	6a21      	ldr	r1, [r4, #32]
 8008176:	47b0      	blx	r6
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	d106      	bne.n	800818c <__sflush_r+0x60>
 800817e:	6829      	ldr	r1, [r5, #0]
 8008180:	291d      	cmp	r1, #29
 8008182:	d82b      	bhi.n	80081dc <__sflush_r+0xb0>
 8008184:	4a28      	ldr	r2, [pc, #160]	@ (8008228 <__sflush_r+0xfc>)
 8008186:	410a      	asrs	r2, r1
 8008188:	07d6      	lsls	r6, r2, #31
 800818a:	d427      	bmi.n	80081dc <__sflush_r+0xb0>
 800818c:	2200      	movs	r2, #0
 800818e:	6062      	str	r2, [r4, #4]
 8008190:	6922      	ldr	r2, [r4, #16]
 8008192:	04d9      	lsls	r1, r3, #19
 8008194:	6022      	str	r2, [r4, #0]
 8008196:	d504      	bpl.n	80081a2 <__sflush_r+0x76>
 8008198:	1c42      	adds	r2, r0, #1
 800819a:	d101      	bne.n	80081a0 <__sflush_r+0x74>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b903      	cbnz	r3, 80081a2 <__sflush_r+0x76>
 80081a0:	6560      	str	r0, [r4, #84]	@ 0x54
 80081a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081a4:	602f      	str	r7, [r5, #0]
 80081a6:	b1b9      	cbz	r1, 80081d8 <__sflush_r+0xac>
 80081a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081ac:	4299      	cmp	r1, r3
 80081ae:	d002      	beq.n	80081b6 <__sflush_r+0x8a>
 80081b0:	4628      	mov	r0, r5
 80081b2:	f7ff f9e5 	bl	8007580 <_free_r>
 80081b6:	2300      	movs	r3, #0
 80081b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80081ba:	e00d      	b.n	80081d8 <__sflush_r+0xac>
 80081bc:	2301      	movs	r3, #1
 80081be:	4628      	mov	r0, r5
 80081c0:	47b0      	blx	r6
 80081c2:	4602      	mov	r2, r0
 80081c4:	1c50      	adds	r0, r2, #1
 80081c6:	d1c9      	bne.n	800815c <__sflush_r+0x30>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d0c6      	beq.n	800815c <__sflush_r+0x30>
 80081ce:	2b1d      	cmp	r3, #29
 80081d0:	d001      	beq.n	80081d6 <__sflush_r+0xaa>
 80081d2:	2b16      	cmp	r3, #22
 80081d4:	d11d      	bne.n	8008212 <__sflush_r+0xe6>
 80081d6:	602f      	str	r7, [r5, #0]
 80081d8:	2000      	movs	r0, #0
 80081da:	e021      	b.n	8008220 <__sflush_r+0xf4>
 80081dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081e0:	b21b      	sxth	r3, r3
 80081e2:	e01a      	b.n	800821a <__sflush_r+0xee>
 80081e4:	690f      	ldr	r7, [r1, #16]
 80081e6:	2f00      	cmp	r7, #0
 80081e8:	d0f6      	beq.n	80081d8 <__sflush_r+0xac>
 80081ea:	0793      	lsls	r3, r2, #30
 80081ec:	bf18      	it	ne
 80081ee:	2300      	movne	r3, #0
 80081f0:	680e      	ldr	r6, [r1, #0]
 80081f2:	bf08      	it	eq
 80081f4:	694b      	ldreq	r3, [r1, #20]
 80081f6:	1bf6      	subs	r6, r6, r7
 80081f8:	600f      	str	r7, [r1, #0]
 80081fa:	608b      	str	r3, [r1, #8]
 80081fc:	2e00      	cmp	r6, #0
 80081fe:	ddeb      	ble.n	80081d8 <__sflush_r+0xac>
 8008200:	4633      	mov	r3, r6
 8008202:	463a      	mov	r2, r7
 8008204:	4628      	mov	r0, r5
 8008206:	6a21      	ldr	r1, [r4, #32]
 8008208:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800820c:	47e0      	blx	ip
 800820e:	2800      	cmp	r0, #0
 8008210:	dc07      	bgt.n	8008222 <__sflush_r+0xf6>
 8008212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800821a:	f04f 30ff 	mov.w	r0, #4294967295
 800821e:	81a3      	strh	r3, [r4, #12]
 8008220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008222:	4407      	add	r7, r0
 8008224:	1a36      	subs	r6, r6, r0
 8008226:	e7e9      	b.n	80081fc <__sflush_r+0xd0>
 8008228:	dfbffffe 	.word	0xdfbffffe

0800822c <_fflush_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	690b      	ldr	r3, [r1, #16]
 8008230:	4605      	mov	r5, r0
 8008232:	460c      	mov	r4, r1
 8008234:	b913      	cbnz	r3, 800823c <_fflush_r+0x10>
 8008236:	2500      	movs	r5, #0
 8008238:	4628      	mov	r0, r5
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	b118      	cbz	r0, 8008246 <_fflush_r+0x1a>
 800823e:	6a03      	ldr	r3, [r0, #32]
 8008240:	b90b      	cbnz	r3, 8008246 <_fflush_r+0x1a>
 8008242:	f7fe fa07 	bl	8006654 <__sinit>
 8008246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0f3      	beq.n	8008236 <_fflush_r+0xa>
 800824e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008250:	07d0      	lsls	r0, r2, #31
 8008252:	d404      	bmi.n	800825e <_fflush_r+0x32>
 8008254:	0599      	lsls	r1, r3, #22
 8008256:	d402      	bmi.n	800825e <_fflush_r+0x32>
 8008258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800825a:	f7fe fb22 	bl	80068a2 <__retarget_lock_acquire_recursive>
 800825e:	4628      	mov	r0, r5
 8008260:	4621      	mov	r1, r4
 8008262:	f7ff ff63 	bl	800812c <__sflush_r>
 8008266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008268:	4605      	mov	r5, r0
 800826a:	07da      	lsls	r2, r3, #31
 800826c:	d4e4      	bmi.n	8008238 <_fflush_r+0xc>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	059b      	lsls	r3, r3, #22
 8008272:	d4e1      	bmi.n	8008238 <_fflush_r+0xc>
 8008274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008276:	f7fe fb15 	bl	80068a4 <__retarget_lock_release_recursive>
 800827a:	e7dd      	b.n	8008238 <_fflush_r+0xc>

0800827c <memmove>:
 800827c:	4288      	cmp	r0, r1
 800827e:	b510      	push	{r4, lr}
 8008280:	eb01 0402 	add.w	r4, r1, r2
 8008284:	d902      	bls.n	800828c <memmove+0x10>
 8008286:	4284      	cmp	r4, r0
 8008288:	4623      	mov	r3, r4
 800828a:	d807      	bhi.n	800829c <memmove+0x20>
 800828c:	1e43      	subs	r3, r0, #1
 800828e:	42a1      	cmp	r1, r4
 8008290:	d008      	beq.n	80082a4 <memmove+0x28>
 8008292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800829a:	e7f8      	b.n	800828e <memmove+0x12>
 800829c:	4601      	mov	r1, r0
 800829e:	4402      	add	r2, r0
 80082a0:	428a      	cmp	r2, r1
 80082a2:	d100      	bne.n	80082a6 <memmove+0x2a>
 80082a4:	bd10      	pop	{r4, pc}
 80082a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082ae:	e7f7      	b.n	80082a0 <memmove+0x24>

080082b0 <_sbrk_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	2300      	movs	r3, #0
 80082b4:	4d05      	ldr	r5, [pc, #20]	@ (80082cc <_sbrk_r+0x1c>)
 80082b6:	4604      	mov	r4, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	602b      	str	r3, [r5, #0]
 80082bc:	f7fa f838 	bl	8002330 <_sbrk>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_sbrk_r+0x1a>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_sbrk_r+0x1a>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	200009dc 	.word	0x200009dc

080082d0 <__assert_func>:
 80082d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082d2:	4614      	mov	r4, r2
 80082d4:	461a      	mov	r2, r3
 80082d6:	4b09      	ldr	r3, [pc, #36]	@ (80082fc <__assert_func+0x2c>)
 80082d8:	4605      	mov	r5, r0
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68d8      	ldr	r0, [r3, #12]
 80082de:	b954      	cbnz	r4, 80082f6 <__assert_func+0x26>
 80082e0:	4b07      	ldr	r3, [pc, #28]	@ (8008300 <__assert_func+0x30>)
 80082e2:	461c      	mov	r4, r3
 80082e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082e8:	9100      	str	r1, [sp, #0]
 80082ea:	462b      	mov	r3, r5
 80082ec:	4905      	ldr	r1, [pc, #20]	@ (8008304 <__assert_func+0x34>)
 80082ee:	f000 f86f 	bl	80083d0 <fiprintf>
 80082f2:	f000 f87f 	bl	80083f4 <abort>
 80082f6:	4b04      	ldr	r3, [pc, #16]	@ (8008308 <__assert_func+0x38>)
 80082f8:	e7f4      	b.n	80082e4 <__assert_func+0x14>
 80082fa:	bf00      	nop
 80082fc:	2000001c 	.word	0x2000001c
 8008300:	080092b6 	.word	0x080092b6
 8008304:	08009288 	.word	0x08009288
 8008308:	0800927b 	.word	0x0800927b

0800830c <_calloc_r>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	fba1 5402 	umull	r5, r4, r1, r2
 8008312:	b93c      	cbnz	r4, 8008324 <_calloc_r+0x18>
 8008314:	4629      	mov	r1, r5
 8008316:	f7ff f9a5 	bl	8007664 <_malloc_r>
 800831a:	4606      	mov	r6, r0
 800831c:	b928      	cbnz	r0, 800832a <_calloc_r+0x1e>
 800831e:	2600      	movs	r6, #0
 8008320:	4630      	mov	r0, r6
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	220c      	movs	r2, #12
 8008326:	6002      	str	r2, [r0, #0]
 8008328:	e7f9      	b.n	800831e <_calloc_r+0x12>
 800832a:	462a      	mov	r2, r5
 800832c:	4621      	mov	r1, r4
 800832e:	f7fe fa3a 	bl	80067a6 <memset>
 8008332:	e7f5      	b.n	8008320 <_calloc_r+0x14>

08008334 <__ascii_mbtowc>:
 8008334:	b082      	sub	sp, #8
 8008336:	b901      	cbnz	r1, 800833a <__ascii_mbtowc+0x6>
 8008338:	a901      	add	r1, sp, #4
 800833a:	b142      	cbz	r2, 800834e <__ascii_mbtowc+0x1a>
 800833c:	b14b      	cbz	r3, 8008352 <__ascii_mbtowc+0x1e>
 800833e:	7813      	ldrb	r3, [r2, #0]
 8008340:	600b      	str	r3, [r1, #0]
 8008342:	7812      	ldrb	r2, [r2, #0]
 8008344:	1e10      	subs	r0, r2, #0
 8008346:	bf18      	it	ne
 8008348:	2001      	movne	r0, #1
 800834a:	b002      	add	sp, #8
 800834c:	4770      	bx	lr
 800834e:	4610      	mov	r0, r2
 8008350:	e7fb      	b.n	800834a <__ascii_mbtowc+0x16>
 8008352:	f06f 0001 	mvn.w	r0, #1
 8008356:	e7f8      	b.n	800834a <__ascii_mbtowc+0x16>

08008358 <_realloc_r>:
 8008358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800835c:	4680      	mov	r8, r0
 800835e:	4615      	mov	r5, r2
 8008360:	460c      	mov	r4, r1
 8008362:	b921      	cbnz	r1, 800836e <_realloc_r+0x16>
 8008364:	4611      	mov	r1, r2
 8008366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800836a:	f7ff b97b 	b.w	8007664 <_malloc_r>
 800836e:	b92a      	cbnz	r2, 800837c <_realloc_r+0x24>
 8008370:	f7ff f906 	bl	8007580 <_free_r>
 8008374:	2400      	movs	r4, #0
 8008376:	4620      	mov	r0, r4
 8008378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800837c:	f000 f841 	bl	8008402 <_malloc_usable_size_r>
 8008380:	4285      	cmp	r5, r0
 8008382:	4606      	mov	r6, r0
 8008384:	d802      	bhi.n	800838c <_realloc_r+0x34>
 8008386:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800838a:	d8f4      	bhi.n	8008376 <_realloc_r+0x1e>
 800838c:	4629      	mov	r1, r5
 800838e:	4640      	mov	r0, r8
 8008390:	f7ff f968 	bl	8007664 <_malloc_r>
 8008394:	4607      	mov	r7, r0
 8008396:	2800      	cmp	r0, #0
 8008398:	d0ec      	beq.n	8008374 <_realloc_r+0x1c>
 800839a:	42b5      	cmp	r5, r6
 800839c:	462a      	mov	r2, r5
 800839e:	4621      	mov	r1, r4
 80083a0:	bf28      	it	cs
 80083a2:	4632      	movcs	r2, r6
 80083a4:	f7fe fa8d 	bl	80068c2 <memcpy>
 80083a8:	4621      	mov	r1, r4
 80083aa:	4640      	mov	r0, r8
 80083ac:	f7ff f8e8 	bl	8007580 <_free_r>
 80083b0:	463c      	mov	r4, r7
 80083b2:	e7e0      	b.n	8008376 <_realloc_r+0x1e>

080083b4 <__ascii_wctomb>:
 80083b4:	4603      	mov	r3, r0
 80083b6:	4608      	mov	r0, r1
 80083b8:	b141      	cbz	r1, 80083cc <__ascii_wctomb+0x18>
 80083ba:	2aff      	cmp	r2, #255	@ 0xff
 80083bc:	d904      	bls.n	80083c8 <__ascii_wctomb+0x14>
 80083be:	228a      	movs	r2, #138	@ 0x8a
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	4770      	bx	lr
 80083c8:	2001      	movs	r0, #1
 80083ca:	700a      	strb	r2, [r1, #0]
 80083cc:	4770      	bx	lr
	...

080083d0 <fiprintf>:
 80083d0:	b40e      	push	{r1, r2, r3}
 80083d2:	b503      	push	{r0, r1, lr}
 80083d4:	4601      	mov	r1, r0
 80083d6:	ab03      	add	r3, sp, #12
 80083d8:	4805      	ldr	r0, [pc, #20]	@ (80083f0 <fiprintf+0x20>)
 80083da:	f853 2b04 	ldr.w	r2, [r3], #4
 80083de:	6800      	ldr	r0, [r0, #0]
 80083e0:	9301      	str	r3, [sp, #4]
 80083e2:	f000 f83d 	bl	8008460 <_vfiprintf_r>
 80083e6:	b002      	add	sp, #8
 80083e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80083ec:	b003      	add	sp, #12
 80083ee:	4770      	bx	lr
 80083f0:	2000001c 	.word	0x2000001c

080083f4 <abort>:
 80083f4:	2006      	movs	r0, #6
 80083f6:	b508      	push	{r3, lr}
 80083f8:	f000 fa06 	bl	8008808 <raise>
 80083fc:	2001      	movs	r0, #1
 80083fe:	f7f9 ff22 	bl	8002246 <_exit>

08008402 <_malloc_usable_size_r>:
 8008402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008406:	1f18      	subs	r0, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	bfbc      	itt	lt
 800840c:	580b      	ldrlt	r3, [r1, r0]
 800840e:	18c0      	addlt	r0, r0, r3
 8008410:	4770      	bx	lr

08008412 <__sfputc_r>:
 8008412:	6893      	ldr	r3, [r2, #8]
 8008414:	b410      	push	{r4}
 8008416:	3b01      	subs	r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	6093      	str	r3, [r2, #8]
 800841c:	da07      	bge.n	800842e <__sfputc_r+0x1c>
 800841e:	6994      	ldr	r4, [r2, #24]
 8008420:	42a3      	cmp	r3, r4
 8008422:	db01      	blt.n	8008428 <__sfputc_r+0x16>
 8008424:	290a      	cmp	r1, #10
 8008426:	d102      	bne.n	800842e <__sfputc_r+0x1c>
 8008428:	bc10      	pop	{r4}
 800842a:	f000 b931 	b.w	8008690 <__swbuf_r>
 800842e:	6813      	ldr	r3, [r2, #0]
 8008430:	1c58      	adds	r0, r3, #1
 8008432:	6010      	str	r0, [r2, #0]
 8008434:	7019      	strb	r1, [r3, #0]
 8008436:	4608      	mov	r0, r1
 8008438:	bc10      	pop	{r4}
 800843a:	4770      	bx	lr

0800843c <__sfputs_r>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	4606      	mov	r6, r0
 8008440:	460f      	mov	r7, r1
 8008442:	4614      	mov	r4, r2
 8008444:	18d5      	adds	r5, r2, r3
 8008446:	42ac      	cmp	r4, r5
 8008448:	d101      	bne.n	800844e <__sfputs_r+0x12>
 800844a:	2000      	movs	r0, #0
 800844c:	e007      	b.n	800845e <__sfputs_r+0x22>
 800844e:	463a      	mov	r2, r7
 8008450:	4630      	mov	r0, r6
 8008452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008456:	f7ff ffdc 	bl	8008412 <__sfputc_r>
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	d1f3      	bne.n	8008446 <__sfputs_r+0xa>
 800845e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008460 <_vfiprintf_r>:
 8008460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008464:	460d      	mov	r5, r1
 8008466:	4614      	mov	r4, r2
 8008468:	4698      	mov	r8, r3
 800846a:	4606      	mov	r6, r0
 800846c:	b09d      	sub	sp, #116	@ 0x74
 800846e:	b118      	cbz	r0, 8008478 <_vfiprintf_r+0x18>
 8008470:	6a03      	ldr	r3, [r0, #32]
 8008472:	b90b      	cbnz	r3, 8008478 <_vfiprintf_r+0x18>
 8008474:	f7fe f8ee 	bl	8006654 <__sinit>
 8008478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800847a:	07d9      	lsls	r1, r3, #31
 800847c:	d405      	bmi.n	800848a <_vfiprintf_r+0x2a>
 800847e:	89ab      	ldrh	r3, [r5, #12]
 8008480:	059a      	lsls	r2, r3, #22
 8008482:	d402      	bmi.n	800848a <_vfiprintf_r+0x2a>
 8008484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008486:	f7fe fa0c 	bl	80068a2 <__retarget_lock_acquire_recursive>
 800848a:	89ab      	ldrh	r3, [r5, #12]
 800848c:	071b      	lsls	r3, r3, #28
 800848e:	d501      	bpl.n	8008494 <_vfiprintf_r+0x34>
 8008490:	692b      	ldr	r3, [r5, #16]
 8008492:	b99b      	cbnz	r3, 80084bc <_vfiprintf_r+0x5c>
 8008494:	4629      	mov	r1, r5
 8008496:	4630      	mov	r0, r6
 8008498:	f000 f938 	bl	800870c <__swsetup_r>
 800849c:	b170      	cbz	r0, 80084bc <_vfiprintf_r+0x5c>
 800849e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084a0:	07dc      	lsls	r4, r3, #31
 80084a2:	d504      	bpl.n	80084ae <_vfiprintf_r+0x4e>
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295
 80084a8:	b01d      	add	sp, #116	@ 0x74
 80084aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ae:	89ab      	ldrh	r3, [r5, #12]
 80084b0:	0598      	lsls	r0, r3, #22
 80084b2:	d4f7      	bmi.n	80084a4 <_vfiprintf_r+0x44>
 80084b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084b6:	f7fe f9f5 	bl	80068a4 <__retarget_lock_release_recursive>
 80084ba:	e7f3      	b.n	80084a4 <_vfiprintf_r+0x44>
 80084bc:	2300      	movs	r3, #0
 80084be:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c0:	2320      	movs	r3, #32
 80084c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084c6:	2330      	movs	r3, #48	@ 0x30
 80084c8:	f04f 0901 	mov.w	r9, #1
 80084cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80084d0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800867c <_vfiprintf_r+0x21c>
 80084d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084d8:	4623      	mov	r3, r4
 80084da:	469a      	mov	sl, r3
 80084dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084e0:	b10a      	cbz	r2, 80084e6 <_vfiprintf_r+0x86>
 80084e2:	2a25      	cmp	r2, #37	@ 0x25
 80084e4:	d1f9      	bne.n	80084da <_vfiprintf_r+0x7a>
 80084e6:	ebba 0b04 	subs.w	fp, sl, r4
 80084ea:	d00b      	beq.n	8008504 <_vfiprintf_r+0xa4>
 80084ec:	465b      	mov	r3, fp
 80084ee:	4622      	mov	r2, r4
 80084f0:	4629      	mov	r1, r5
 80084f2:	4630      	mov	r0, r6
 80084f4:	f7ff ffa2 	bl	800843c <__sfputs_r>
 80084f8:	3001      	adds	r0, #1
 80084fa:	f000 80a7 	beq.w	800864c <_vfiprintf_r+0x1ec>
 80084fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008500:	445a      	add	r2, fp
 8008502:	9209      	str	r2, [sp, #36]	@ 0x24
 8008504:	f89a 3000 	ldrb.w	r3, [sl]
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 809f 	beq.w	800864c <_vfiprintf_r+0x1ec>
 800850e:	2300      	movs	r3, #0
 8008510:	f04f 32ff 	mov.w	r2, #4294967295
 8008514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008518:	f10a 0a01 	add.w	sl, sl, #1
 800851c:	9304      	str	r3, [sp, #16]
 800851e:	9307      	str	r3, [sp, #28]
 8008520:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008524:	931a      	str	r3, [sp, #104]	@ 0x68
 8008526:	4654      	mov	r4, sl
 8008528:	2205      	movs	r2, #5
 800852a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800852e:	4853      	ldr	r0, [pc, #332]	@ (800867c <_vfiprintf_r+0x21c>)
 8008530:	f7fe f9b9 	bl	80068a6 <memchr>
 8008534:	9a04      	ldr	r2, [sp, #16]
 8008536:	b9d8      	cbnz	r0, 8008570 <_vfiprintf_r+0x110>
 8008538:	06d1      	lsls	r1, r2, #27
 800853a:	bf44      	itt	mi
 800853c:	2320      	movmi	r3, #32
 800853e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008542:	0713      	lsls	r3, r2, #28
 8008544:	bf44      	itt	mi
 8008546:	232b      	movmi	r3, #43	@ 0x2b
 8008548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800854c:	f89a 3000 	ldrb.w	r3, [sl]
 8008550:	2b2a      	cmp	r3, #42	@ 0x2a
 8008552:	d015      	beq.n	8008580 <_vfiprintf_r+0x120>
 8008554:	4654      	mov	r4, sl
 8008556:	2000      	movs	r0, #0
 8008558:	f04f 0c0a 	mov.w	ip, #10
 800855c:	9a07      	ldr	r2, [sp, #28]
 800855e:	4621      	mov	r1, r4
 8008560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008564:	3b30      	subs	r3, #48	@ 0x30
 8008566:	2b09      	cmp	r3, #9
 8008568:	d94b      	bls.n	8008602 <_vfiprintf_r+0x1a2>
 800856a:	b1b0      	cbz	r0, 800859a <_vfiprintf_r+0x13a>
 800856c:	9207      	str	r2, [sp, #28]
 800856e:	e014      	b.n	800859a <_vfiprintf_r+0x13a>
 8008570:	eba0 0308 	sub.w	r3, r0, r8
 8008574:	fa09 f303 	lsl.w	r3, r9, r3
 8008578:	4313      	orrs	r3, r2
 800857a:	46a2      	mov	sl, r4
 800857c:	9304      	str	r3, [sp, #16]
 800857e:	e7d2      	b.n	8008526 <_vfiprintf_r+0xc6>
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	1d19      	adds	r1, r3, #4
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	9103      	str	r1, [sp, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	bfbb      	ittet	lt
 800858c:	425b      	neglt	r3, r3
 800858e:	f042 0202 	orrlt.w	r2, r2, #2
 8008592:	9307      	strge	r3, [sp, #28]
 8008594:	9307      	strlt	r3, [sp, #28]
 8008596:	bfb8      	it	lt
 8008598:	9204      	strlt	r2, [sp, #16]
 800859a:	7823      	ldrb	r3, [r4, #0]
 800859c:	2b2e      	cmp	r3, #46	@ 0x2e
 800859e:	d10a      	bne.n	80085b6 <_vfiprintf_r+0x156>
 80085a0:	7863      	ldrb	r3, [r4, #1]
 80085a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80085a4:	d132      	bne.n	800860c <_vfiprintf_r+0x1ac>
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	3402      	adds	r4, #2
 80085aa:	1d1a      	adds	r2, r3, #4
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	9203      	str	r2, [sp, #12]
 80085b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085b4:	9305      	str	r3, [sp, #20]
 80085b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008680 <_vfiprintf_r+0x220>
 80085ba:	2203      	movs	r2, #3
 80085bc:	4650      	mov	r0, sl
 80085be:	7821      	ldrb	r1, [r4, #0]
 80085c0:	f7fe f971 	bl	80068a6 <memchr>
 80085c4:	b138      	cbz	r0, 80085d6 <_vfiprintf_r+0x176>
 80085c6:	2240      	movs	r2, #64	@ 0x40
 80085c8:	9b04      	ldr	r3, [sp, #16]
 80085ca:	eba0 000a 	sub.w	r0, r0, sl
 80085ce:	4082      	lsls	r2, r0
 80085d0:	4313      	orrs	r3, r2
 80085d2:	3401      	adds	r4, #1
 80085d4:	9304      	str	r3, [sp, #16]
 80085d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085da:	2206      	movs	r2, #6
 80085dc:	4829      	ldr	r0, [pc, #164]	@ (8008684 <_vfiprintf_r+0x224>)
 80085de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085e2:	f7fe f960 	bl	80068a6 <memchr>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d03f      	beq.n	800866a <_vfiprintf_r+0x20a>
 80085ea:	4b27      	ldr	r3, [pc, #156]	@ (8008688 <_vfiprintf_r+0x228>)
 80085ec:	bb1b      	cbnz	r3, 8008636 <_vfiprintf_r+0x1d6>
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	3307      	adds	r3, #7
 80085f2:	f023 0307 	bic.w	r3, r3, #7
 80085f6:	3308      	adds	r3, #8
 80085f8:	9303      	str	r3, [sp, #12]
 80085fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085fc:	443b      	add	r3, r7
 80085fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008600:	e76a      	b.n	80084d8 <_vfiprintf_r+0x78>
 8008602:	460c      	mov	r4, r1
 8008604:	2001      	movs	r0, #1
 8008606:	fb0c 3202 	mla	r2, ip, r2, r3
 800860a:	e7a8      	b.n	800855e <_vfiprintf_r+0xfe>
 800860c:	2300      	movs	r3, #0
 800860e:	f04f 0c0a 	mov.w	ip, #10
 8008612:	4619      	mov	r1, r3
 8008614:	3401      	adds	r4, #1
 8008616:	9305      	str	r3, [sp, #20]
 8008618:	4620      	mov	r0, r4
 800861a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800861e:	3a30      	subs	r2, #48	@ 0x30
 8008620:	2a09      	cmp	r2, #9
 8008622:	d903      	bls.n	800862c <_vfiprintf_r+0x1cc>
 8008624:	2b00      	cmp	r3, #0
 8008626:	d0c6      	beq.n	80085b6 <_vfiprintf_r+0x156>
 8008628:	9105      	str	r1, [sp, #20]
 800862a:	e7c4      	b.n	80085b6 <_vfiprintf_r+0x156>
 800862c:	4604      	mov	r4, r0
 800862e:	2301      	movs	r3, #1
 8008630:	fb0c 2101 	mla	r1, ip, r1, r2
 8008634:	e7f0      	b.n	8008618 <_vfiprintf_r+0x1b8>
 8008636:	ab03      	add	r3, sp, #12
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	462a      	mov	r2, r5
 800863c:	4630      	mov	r0, r6
 800863e:	4b13      	ldr	r3, [pc, #76]	@ (800868c <_vfiprintf_r+0x22c>)
 8008640:	a904      	add	r1, sp, #16
 8008642:	f7fd fbbd 	bl	8005dc0 <_printf_float>
 8008646:	4607      	mov	r7, r0
 8008648:	1c78      	adds	r0, r7, #1
 800864a:	d1d6      	bne.n	80085fa <_vfiprintf_r+0x19a>
 800864c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800864e:	07d9      	lsls	r1, r3, #31
 8008650:	d405      	bmi.n	800865e <_vfiprintf_r+0x1fe>
 8008652:	89ab      	ldrh	r3, [r5, #12]
 8008654:	059a      	lsls	r2, r3, #22
 8008656:	d402      	bmi.n	800865e <_vfiprintf_r+0x1fe>
 8008658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800865a:	f7fe f923 	bl	80068a4 <__retarget_lock_release_recursive>
 800865e:	89ab      	ldrh	r3, [r5, #12]
 8008660:	065b      	lsls	r3, r3, #25
 8008662:	f53f af1f 	bmi.w	80084a4 <_vfiprintf_r+0x44>
 8008666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008668:	e71e      	b.n	80084a8 <_vfiprintf_r+0x48>
 800866a:	ab03      	add	r3, sp, #12
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	462a      	mov	r2, r5
 8008670:	4630      	mov	r0, r6
 8008672:	4b06      	ldr	r3, [pc, #24]	@ (800868c <_vfiprintf_r+0x22c>)
 8008674:	a904      	add	r1, sp, #16
 8008676:	f7fd fe41 	bl	80062fc <_printf_i>
 800867a:	e7e4      	b.n	8008646 <_vfiprintf_r+0x1e6>
 800867c:	08009260 	.word	0x08009260
 8008680:	08009266 	.word	0x08009266
 8008684:	0800926a 	.word	0x0800926a
 8008688:	08005dc1 	.word	0x08005dc1
 800868c:	0800843d 	.word	0x0800843d

08008690 <__swbuf_r>:
 8008690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008692:	460e      	mov	r6, r1
 8008694:	4614      	mov	r4, r2
 8008696:	4605      	mov	r5, r0
 8008698:	b118      	cbz	r0, 80086a2 <__swbuf_r+0x12>
 800869a:	6a03      	ldr	r3, [r0, #32]
 800869c:	b90b      	cbnz	r3, 80086a2 <__swbuf_r+0x12>
 800869e:	f7fd ffd9 	bl	8006654 <__sinit>
 80086a2:	69a3      	ldr	r3, [r4, #24]
 80086a4:	60a3      	str	r3, [r4, #8]
 80086a6:	89a3      	ldrh	r3, [r4, #12]
 80086a8:	071a      	lsls	r2, r3, #28
 80086aa:	d501      	bpl.n	80086b0 <__swbuf_r+0x20>
 80086ac:	6923      	ldr	r3, [r4, #16]
 80086ae:	b943      	cbnz	r3, 80086c2 <__swbuf_r+0x32>
 80086b0:	4621      	mov	r1, r4
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 f82a 	bl	800870c <__swsetup_r>
 80086b8:	b118      	cbz	r0, 80086c2 <__swbuf_r+0x32>
 80086ba:	f04f 37ff 	mov.w	r7, #4294967295
 80086be:	4638      	mov	r0, r7
 80086c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	6922      	ldr	r2, [r4, #16]
 80086c6:	b2f6      	uxtb	r6, r6
 80086c8:	1a98      	subs	r0, r3, r2
 80086ca:	6963      	ldr	r3, [r4, #20]
 80086cc:	4637      	mov	r7, r6
 80086ce:	4283      	cmp	r3, r0
 80086d0:	dc05      	bgt.n	80086de <__swbuf_r+0x4e>
 80086d2:	4621      	mov	r1, r4
 80086d4:	4628      	mov	r0, r5
 80086d6:	f7ff fda9 	bl	800822c <_fflush_r>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d1ed      	bne.n	80086ba <__swbuf_r+0x2a>
 80086de:	68a3      	ldr	r3, [r4, #8]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	60a3      	str	r3, [r4, #8]
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	6022      	str	r2, [r4, #0]
 80086ea:	701e      	strb	r6, [r3, #0]
 80086ec:	6962      	ldr	r2, [r4, #20]
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d004      	beq.n	80086fe <__swbuf_r+0x6e>
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	07db      	lsls	r3, r3, #31
 80086f8:	d5e1      	bpl.n	80086be <__swbuf_r+0x2e>
 80086fa:	2e0a      	cmp	r6, #10
 80086fc:	d1df      	bne.n	80086be <__swbuf_r+0x2e>
 80086fe:	4621      	mov	r1, r4
 8008700:	4628      	mov	r0, r5
 8008702:	f7ff fd93 	bl	800822c <_fflush_r>
 8008706:	2800      	cmp	r0, #0
 8008708:	d0d9      	beq.n	80086be <__swbuf_r+0x2e>
 800870a:	e7d6      	b.n	80086ba <__swbuf_r+0x2a>

0800870c <__swsetup_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4b29      	ldr	r3, [pc, #164]	@ (80087b4 <__swsetup_r+0xa8>)
 8008710:	4605      	mov	r5, r0
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	460c      	mov	r4, r1
 8008716:	b118      	cbz	r0, 8008720 <__swsetup_r+0x14>
 8008718:	6a03      	ldr	r3, [r0, #32]
 800871a:	b90b      	cbnz	r3, 8008720 <__swsetup_r+0x14>
 800871c:	f7fd ff9a 	bl	8006654 <__sinit>
 8008720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008724:	0719      	lsls	r1, r3, #28
 8008726:	d422      	bmi.n	800876e <__swsetup_r+0x62>
 8008728:	06da      	lsls	r2, r3, #27
 800872a:	d407      	bmi.n	800873c <__swsetup_r+0x30>
 800872c:	2209      	movs	r2, #9
 800872e:	602a      	str	r2, [r5, #0]
 8008730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	81a3      	strh	r3, [r4, #12]
 800873a:	e033      	b.n	80087a4 <__swsetup_r+0x98>
 800873c:	0758      	lsls	r0, r3, #29
 800873e:	d512      	bpl.n	8008766 <__swsetup_r+0x5a>
 8008740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008742:	b141      	cbz	r1, 8008756 <__swsetup_r+0x4a>
 8008744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008748:	4299      	cmp	r1, r3
 800874a:	d002      	beq.n	8008752 <__swsetup_r+0x46>
 800874c:	4628      	mov	r0, r5
 800874e:	f7fe ff17 	bl	8007580 <_free_r>
 8008752:	2300      	movs	r3, #0
 8008754:	6363      	str	r3, [r4, #52]	@ 0x34
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	2300      	movs	r3, #0
 8008760:	6063      	str	r3, [r4, #4]
 8008762:	6923      	ldr	r3, [r4, #16]
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	f043 0308 	orr.w	r3, r3, #8
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	6923      	ldr	r3, [r4, #16]
 8008770:	b94b      	cbnz	r3, 8008786 <__swsetup_r+0x7a>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800877c:	d003      	beq.n	8008786 <__swsetup_r+0x7a>
 800877e:	4621      	mov	r1, r4
 8008780:	4628      	mov	r0, r5
 8008782:	f000 f882 	bl	800888a <__smakebuf_r>
 8008786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800878a:	f013 0201 	ands.w	r2, r3, #1
 800878e:	d00a      	beq.n	80087a6 <__swsetup_r+0x9a>
 8008790:	2200      	movs	r2, #0
 8008792:	60a2      	str	r2, [r4, #8]
 8008794:	6962      	ldr	r2, [r4, #20]
 8008796:	4252      	negs	r2, r2
 8008798:	61a2      	str	r2, [r4, #24]
 800879a:	6922      	ldr	r2, [r4, #16]
 800879c:	b942      	cbnz	r2, 80087b0 <__swsetup_r+0xa4>
 800879e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087a2:	d1c5      	bne.n	8008730 <__swsetup_r+0x24>
 80087a4:	bd38      	pop	{r3, r4, r5, pc}
 80087a6:	0799      	lsls	r1, r3, #30
 80087a8:	bf58      	it	pl
 80087aa:	6962      	ldrpl	r2, [r4, #20]
 80087ac:	60a2      	str	r2, [r4, #8]
 80087ae:	e7f4      	b.n	800879a <__swsetup_r+0x8e>
 80087b0:	2000      	movs	r0, #0
 80087b2:	e7f7      	b.n	80087a4 <__swsetup_r+0x98>
 80087b4:	2000001c 	.word	0x2000001c

080087b8 <_raise_r>:
 80087b8:	291f      	cmp	r1, #31
 80087ba:	b538      	push	{r3, r4, r5, lr}
 80087bc:	4605      	mov	r5, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	d904      	bls.n	80087cc <_raise_r+0x14>
 80087c2:	2316      	movs	r3, #22
 80087c4:	6003      	str	r3, [r0, #0]
 80087c6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80087ce:	b112      	cbz	r2, 80087d6 <_raise_r+0x1e>
 80087d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087d4:	b94b      	cbnz	r3, 80087ea <_raise_r+0x32>
 80087d6:	4628      	mov	r0, r5
 80087d8:	f000 f830 	bl	800883c <_getpid_r>
 80087dc:	4622      	mov	r2, r4
 80087de:	4601      	mov	r1, r0
 80087e0:	4628      	mov	r0, r5
 80087e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087e6:	f000 b817 	b.w	8008818 <_kill_r>
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d00a      	beq.n	8008804 <_raise_r+0x4c>
 80087ee:	1c59      	adds	r1, r3, #1
 80087f0:	d103      	bne.n	80087fa <_raise_r+0x42>
 80087f2:	2316      	movs	r3, #22
 80087f4:	6003      	str	r3, [r0, #0]
 80087f6:	2001      	movs	r0, #1
 80087f8:	e7e7      	b.n	80087ca <_raise_r+0x12>
 80087fa:	2100      	movs	r1, #0
 80087fc:	4620      	mov	r0, r4
 80087fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008802:	4798      	blx	r3
 8008804:	2000      	movs	r0, #0
 8008806:	e7e0      	b.n	80087ca <_raise_r+0x12>

08008808 <raise>:
 8008808:	4b02      	ldr	r3, [pc, #8]	@ (8008814 <raise+0xc>)
 800880a:	4601      	mov	r1, r0
 800880c:	6818      	ldr	r0, [r3, #0]
 800880e:	f7ff bfd3 	b.w	80087b8 <_raise_r>
 8008812:	bf00      	nop
 8008814:	2000001c 	.word	0x2000001c

08008818 <_kill_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	2300      	movs	r3, #0
 800881c:	4d06      	ldr	r5, [pc, #24]	@ (8008838 <_kill_r+0x20>)
 800881e:	4604      	mov	r4, r0
 8008820:	4608      	mov	r0, r1
 8008822:	4611      	mov	r1, r2
 8008824:	602b      	str	r3, [r5, #0]
 8008826:	f7f9 fcfe 	bl	8002226 <_kill>
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	d102      	bne.n	8008834 <_kill_r+0x1c>
 800882e:	682b      	ldr	r3, [r5, #0]
 8008830:	b103      	cbz	r3, 8008834 <_kill_r+0x1c>
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	bd38      	pop	{r3, r4, r5, pc}
 8008836:	bf00      	nop
 8008838:	200009dc 	.word	0x200009dc

0800883c <_getpid_r>:
 800883c:	f7f9 bcec 	b.w	8002218 <_getpid>

08008840 <__swhatbuf_r>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	460c      	mov	r4, r1
 8008844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008848:	4615      	mov	r5, r2
 800884a:	2900      	cmp	r1, #0
 800884c:	461e      	mov	r6, r3
 800884e:	b096      	sub	sp, #88	@ 0x58
 8008850:	da0c      	bge.n	800886c <__swhatbuf_r+0x2c>
 8008852:	89a3      	ldrh	r3, [r4, #12]
 8008854:	2100      	movs	r1, #0
 8008856:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800885a:	bf14      	ite	ne
 800885c:	2340      	movne	r3, #64	@ 0x40
 800885e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008862:	2000      	movs	r0, #0
 8008864:	6031      	str	r1, [r6, #0]
 8008866:	602b      	str	r3, [r5, #0]
 8008868:	b016      	add	sp, #88	@ 0x58
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	466a      	mov	r2, sp
 800886e:	f000 f849 	bl	8008904 <_fstat_r>
 8008872:	2800      	cmp	r0, #0
 8008874:	dbed      	blt.n	8008852 <__swhatbuf_r+0x12>
 8008876:	9901      	ldr	r1, [sp, #4]
 8008878:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800887c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008880:	4259      	negs	r1, r3
 8008882:	4159      	adcs	r1, r3
 8008884:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008888:	e7eb      	b.n	8008862 <__swhatbuf_r+0x22>

0800888a <__smakebuf_r>:
 800888a:	898b      	ldrh	r3, [r1, #12]
 800888c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800888e:	079d      	lsls	r5, r3, #30
 8008890:	4606      	mov	r6, r0
 8008892:	460c      	mov	r4, r1
 8008894:	d507      	bpl.n	80088a6 <__smakebuf_r+0x1c>
 8008896:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800889a:	6023      	str	r3, [r4, #0]
 800889c:	6123      	str	r3, [r4, #16]
 800889e:	2301      	movs	r3, #1
 80088a0:	6163      	str	r3, [r4, #20]
 80088a2:	b003      	add	sp, #12
 80088a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088a6:	466a      	mov	r2, sp
 80088a8:	ab01      	add	r3, sp, #4
 80088aa:	f7ff ffc9 	bl	8008840 <__swhatbuf_r>
 80088ae:	9f00      	ldr	r7, [sp, #0]
 80088b0:	4605      	mov	r5, r0
 80088b2:	4639      	mov	r1, r7
 80088b4:	4630      	mov	r0, r6
 80088b6:	f7fe fed5 	bl	8007664 <_malloc_r>
 80088ba:	b948      	cbnz	r0, 80088d0 <__smakebuf_r+0x46>
 80088bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088c0:	059a      	lsls	r2, r3, #22
 80088c2:	d4ee      	bmi.n	80088a2 <__smakebuf_r+0x18>
 80088c4:	f023 0303 	bic.w	r3, r3, #3
 80088c8:	f043 0302 	orr.w	r3, r3, #2
 80088cc:	81a3      	strh	r3, [r4, #12]
 80088ce:	e7e2      	b.n	8008896 <__smakebuf_r+0xc>
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80088d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	9b01      	ldr	r3, [sp, #4]
 80088de:	6020      	str	r0, [r4, #0]
 80088e0:	b15b      	cbz	r3, 80088fa <__smakebuf_r+0x70>
 80088e2:	4630      	mov	r0, r6
 80088e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088e8:	f000 f81e 	bl	8008928 <_isatty_r>
 80088ec:	b128      	cbz	r0, 80088fa <__smakebuf_r+0x70>
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	f023 0303 	bic.w	r3, r3, #3
 80088f4:	f043 0301 	orr.w	r3, r3, #1
 80088f8:	81a3      	strh	r3, [r4, #12]
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	431d      	orrs	r5, r3
 80088fe:	81a5      	strh	r5, [r4, #12]
 8008900:	e7cf      	b.n	80088a2 <__smakebuf_r+0x18>
	...

08008904 <_fstat_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	2300      	movs	r3, #0
 8008908:	4d06      	ldr	r5, [pc, #24]	@ (8008924 <_fstat_r+0x20>)
 800890a:	4604      	mov	r4, r0
 800890c:	4608      	mov	r0, r1
 800890e:	4611      	mov	r1, r2
 8008910:	602b      	str	r3, [r5, #0]
 8008912:	f7f9 fce7 	bl	80022e4 <_fstat>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	d102      	bne.n	8008920 <_fstat_r+0x1c>
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	b103      	cbz	r3, 8008920 <_fstat_r+0x1c>
 800891e:	6023      	str	r3, [r4, #0]
 8008920:	bd38      	pop	{r3, r4, r5, pc}
 8008922:	bf00      	nop
 8008924:	200009dc 	.word	0x200009dc

08008928 <_isatty_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	2300      	movs	r3, #0
 800892c:	4d05      	ldr	r5, [pc, #20]	@ (8008944 <_isatty_r+0x1c>)
 800892e:	4604      	mov	r4, r0
 8008930:	4608      	mov	r0, r1
 8008932:	602b      	str	r3, [r5, #0]
 8008934:	f7f9 fce5 	bl	8002302 <_isatty>
 8008938:	1c43      	adds	r3, r0, #1
 800893a:	d102      	bne.n	8008942 <_isatty_r+0x1a>
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	b103      	cbz	r3, 8008942 <_isatty_r+0x1a>
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	bd38      	pop	{r3, r4, r5, pc}
 8008944:	200009dc 	.word	0x200009dc

08008948 <_init>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr

08008954 <_fini>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr
