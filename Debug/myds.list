
myds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  080080f0  080080f0  000090f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b48  08008b48  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b48  08008b48  00009b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b50  08008b50  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b50  08008b50  00009b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b54  08008b54  00009b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008b58  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  200001d4  08008d2c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000984  08008d2c  0000a984  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa7d  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2a  00000000  00000000  00019c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8d  00000000  00000000  0001d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043e0  00000000  00000000  0001e66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001647e  00000000  00000000  00022a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009225d  00000000  00000000  00038ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb128  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d8  00000000  00000000  000cb16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000d0644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080080d8 	.word	0x080080d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080080d8 	.word	0x080080d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__gesf2>:
 8000b28:	f04f 3cff 	mov.w	ip, #4294967295
 8000b2c:	e006      	b.n	8000b3c <__cmpsf2+0x4>
 8000b2e:	bf00      	nop

08000b30 <__lesf2>:
 8000b30:	f04f 0c01 	mov.w	ip, #1
 8000b34:	e002      	b.n	8000b3c <__cmpsf2+0x4>
 8000b36:	bf00      	nop

08000b38 <__cmpsf2>:
 8000b38:	f04f 0c01 	mov.w	ip, #1
 8000b3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d011      	beq.n	8000b78 <__cmpsf2+0x40>
 8000b54:	b001      	add	sp, #4
 8000b56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5a:	bf18      	it	ne
 8000b5c:	ea90 0f01 	teqne	r0, r1
 8000b60:	bf58      	it	pl
 8000b62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b66:	bf88      	it	hi
 8000b68:	17c8      	asrhi	r0, r1, #31
 8000b6a:	bf38      	it	cc
 8000b6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b70:	bf18      	it	ne
 8000b72:	f040 0001 	orrne.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	d102      	bne.n	8000b84 <__cmpsf2+0x4c>
 8000b7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b82:	d105      	bne.n	8000b90 <__cmpsf2+0x58>
 8000b84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b88:	d1e4      	bne.n	8000b54 <__cmpsf2+0x1c>
 8000b8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b8e:	d0e1      	beq.n	8000b54 <__cmpsf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cfrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4661      	mov	r1, ip
 8000b9e:	e7ff      	b.n	8000ba0 <__aeabi_cfcmpeq>

08000ba0 <__aeabi_cfcmpeq>:
 8000ba0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba2:	f7ff ffc9 	bl	8000b38 <__cmpsf2>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	bf48      	it	mi
 8000baa:	f110 0f00 	cmnmi.w	r0, #0
 8000bae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb0 <__aeabi_fcmpeq>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff fff4 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bb8:	bf0c      	ite	eq
 8000bba:	2001      	moveq	r0, #1
 8000bbc:	2000      	movne	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmplt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffea 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmple>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffe0 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000be0:	bf94      	ite	ls
 8000be2:	2001      	movls	r0, #1
 8000be4:	2000      	movhi	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmpge>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffd2 	bl	8000b98 <__aeabi_cfrcmple>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmpgt>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffc8 	bl	8000b98 <__aeabi_cfrcmple>
 8000c08:	bf34      	ite	cc
 8000c0a:	2001      	movcc	r0, #1
 8000c0c:	2000      	movcs	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_ADC1_Init+0x74>)
 8000c26:	4a19      	ldr	r2, [pc, #100]	@ (8000c8c <MX_ADC1_Init+0x78>)
 8000c28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_ADC1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <MX_ADC1_Init+0x74>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_ADC1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_ADC1_Init+0x74>)
 8000c3e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c44:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <MX_ADC1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_ADC1_Init+0x74>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c50:	480d      	ldr	r0, [pc, #52]	@ (8000c88 <MX_ADC1_Init+0x74>)
 8000c52:	f001 f9b9 	bl	8001fc8 <HAL_ADC_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c5c:	f000 fab3 	bl	80011c6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c60:	2305      	movs	r3, #5
 8000c62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_ADC1_Init+0x74>)
 8000c72:	f001 fc41 	bl	80024f8 <HAL_ADC_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c7c:	f000 faa3 	bl	80011c6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200001f0 	.word	0x200001f0
 8000c8c:	40012400 	.word	0x40012400

08000c90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a14      	ldr	r2, [pc, #80]	@ (8000cfc <HAL_ADC_MspInit+0x6c>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d121      	bne.n	8000cf4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <HAL_ADC_MspInit+0x70>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <HAL_ADC_MspInit+0x70>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <HAL_ADC_MspInit+0x70>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <HAL_ADC_MspInit+0x70>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d00 <HAL_ADC_MspInit+0x70>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_ADC_MspInit+0x70>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ce0:	2320      	movs	r3, #32
 8000ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	4619      	mov	r1, r3
 8000cee:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <HAL_ADC_MspInit+0x74>)
 8000cf0:	f001 ff52 	bl	8002b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40012400 	.word	0x40012400
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010800 	.word	0x40010800

08000d08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc8 <MX_GPIO_Init+0xc0>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a29      	ldr	r2, [pc, #164]	@ (8000dc8 <MX_GPIO_Init+0xc0>)
 8000d22:	f043 0320 	orr.w	r3, r3, #32
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b27      	ldr	r3, [pc, #156]	@ (8000dc8 <MX_GPIO_Init+0xc0>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0320 	and.w	r3, r3, #32
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b24      	ldr	r3, [pc, #144]	@ (8000dc8 <MX_GPIO_Init+0xc0>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a23      	ldr	r2, [pc, #140]	@ (8000dc8 <MX_GPIO_Init+0xc0>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b21      	ldr	r3, [pc, #132]	@ (8000dc8 <MX_GPIO_Init+0xc0>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc8 <MX_GPIO_Init+0xc0>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc8 <MX_GPIO_Init+0xc0>)
 8000d52:	f043 0308 	orr.w	r3, r3, #8
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <MX_GPIO_Init+0xc0>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000d6a:	4818      	ldr	r0, [pc, #96]	@ (8000dcc <MX_GPIO_Init+0xc4>)
 8000d6c:	f002 f898 	bl	8002ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|BIN1_Pin|BIN2_Pin;
 8000d70:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4619      	mov	r1, r3
 8000d88:	4810      	ldr	r0, [pc, #64]	@ (8000dcc <MX_GPIO_Init+0xc4>)
 8000d8a:	f001 ff05 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin;
 8000d8e:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8000d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	480b      	ldr	r0, [pc, #44]	@ (8000dd0 <MX_GPIO_Init+0xc8>)
 8000da4:	f001 fef8 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = KEY3_Pin|KEY4_Pin|KEY5_Pin;
 8000da8:	2338      	movs	r3, #56	@ 0x38
 8000daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	4804      	ldr	r0, [pc, #16]	@ (8000dcc <MX_GPIO_Init+0xc4>)
 8000dbc:	f001 feec 	bl	8002b98 <HAL_GPIO_Init>

}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	40010800 	.word	0x40010800

08000dd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <MX_I2C1_Init+0x50>)
 8000dda:	4a13      	ldr	r2, [pc, #76]	@ (8000e28 <MX_I2C1_Init+0x54>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_I2C1_Init+0x50>)
 8000de0:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <MX_I2C1_Init+0x58>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_I2C1_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <MX_I2C1_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <MX_I2C1_Init+0x50>)
 8000df2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000df6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <MX_I2C1_Init+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_I2C1_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e04:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <MX_I2C1_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_I2C1_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	@ (8000e24 <MX_I2C1_Init+0x50>)
 8000e12:	f002 f85d 	bl	8002ed0 <HAL_I2C_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e1c:	f000 f9d3 	bl	80011c6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000220 	.word	0x20000220
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	00061a80 	.word	0x00061a80

08000e30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec0 <HAL_I2C_MspInit+0x90>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d132      	bne.n	8000eb6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <HAL_I2C_MspInit+0x94>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec4 <HAL_I2C_MspInit+0x94>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <HAL_I2C_MspInit+0x94>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6e:	2312      	movs	r3, #18
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4812      	ldr	r0, [pc, #72]	@ (8000ec8 <HAL_I2C_MspInit+0x98>)
 8000e7e:	f001 fe8b 	bl	8002b98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000e82:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <HAL_I2C_MspInit+0x9c>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e98:	4a0c      	ldr	r2, [pc, #48]	@ (8000ecc <HAL_I2C_MspInit+0x9c>)
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_I2C_MspInit+0x94>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <HAL_I2C_MspInit+0x94>)
 8000ea4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_I2C_MspInit+0x94>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	@ 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010c00 	.word	0x40010c00
 8000ecc:	40010000 	.word	0x40010000

08000ed0 <ADC_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_Read(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
  int sum = 0, max = 0, min = 4095,adc_result = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
  uint8_t i=0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	72fb      	strb	r3, [r7, #11]
  HAL_ADC_Start(&hadc1);     //启动ADC转换
 8000eec:	482a      	ldr	r0, [pc, #168]	@ (8000f98 <ADC_Read+0xc8>)
 8000eee:	f001 f943 	bl	8002178 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 12);
 8000ef2:	210c      	movs	r1, #12
 8000ef4:	4828      	ldr	r0, [pc, #160]	@ (8000f98 <ADC_Read+0xc8>)
 8000ef6:	f001 f9ed 	bl	80022d4 <HAL_ADC_PollForConversion>
  for(i=1;i<=5;i++)
 8000efa:	2301      	movs	r3, #1
 8000efc:	72fb      	strb	r3, [r7, #11]
 8000efe:	e02d      	b.n	8000f5c <ADC_Read+0x8c>
  {
    adc[i] = HAL_ADC_GetValue(&hadc1);
 8000f00:	4825      	ldr	r0, [pc, #148]	@ (8000f98 <ADC_Read+0xc8>)
 8000f02:	f001 faed 	bl	80024e0 <HAL_ADC_GetValue>
 8000f06:	4602      	mov	r2, r0
 8000f08:	7afb      	ldrb	r3, [r7, #11]
 8000f0a:	b291      	uxth	r1, r2
 8000f0c:	4a23      	ldr	r2, [pc, #140]	@ (8000f9c <ADC_Read+0xcc>)
 8000f0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    sum += adc[i];
 8000f12:	7afb      	ldrb	r3, [r7, #11]
 8000f14:	4a21      	ldr	r2, [pc, #132]	@ (8000f9c <ADC_Read+0xcc>)
 8000f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	4413      	add	r3, r2
 8000f20:	617b      	str	r3, [r7, #20]
    if(adc[i] > max) max = adc[i];
 8000f22:	7afb      	ldrb	r3, [r7, #11]
 8000f24:	4a1d      	ldr	r2, [pc, #116]	@ (8000f9c <ADC_Read+0xcc>)
 8000f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	da04      	bge.n	8000f3c <ADC_Read+0x6c>
 8000f32:	7afb      	ldrb	r3, [r7, #11]
 8000f34:	4a19      	ldr	r2, [pc, #100]	@ (8000f9c <ADC_Read+0xcc>)
 8000f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f3a:	613b      	str	r3, [r7, #16]
    if(adc[i] < min) min = adc[i];
 8000f3c:	7afb      	ldrb	r3, [r7, #11]
 8000f3e:	4a17      	ldr	r2, [pc, #92]	@ (8000f9c <ADC_Read+0xcc>)
 8000f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f44:	461a      	mov	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	dd04      	ble.n	8000f56 <ADC_Read+0x86>
 8000f4c:	7afb      	ldrb	r3, [r7, #11]
 8000f4e:	4a13      	ldr	r2, [pc, #76]	@ (8000f9c <ADC_Read+0xcc>)
 8000f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f54:	60fb      	str	r3, [r7, #12]
  for(i=1;i<=5;i++)
 8000f56:	7afb      	ldrb	r3, [r7, #11]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	72fb      	strb	r3, [r7, #11]
 8000f5c:	7afb      	ldrb	r3, [r7, #11]
 8000f5e:	2b05      	cmp	r3, #5
 8000f60:	d9ce      	bls.n	8000f00 <ADC_Read+0x30>
  }
  adc_result = (sum - max - min) / 3.0;
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad2      	subs	r2, r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fa49 	bl	8000404 <__aeabi_i2d>
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <ADC_Read+0xd0>)
 8000f78:	f7ff fbd8 	bl	800072c <__aeabi_ddiv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fd58 	bl	8000a38 <__aeabi_d2iz>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	607b      	str	r3, [r7, #4]
  return adc_result;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	b29b      	uxth	r3, r3
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200001f0 	.word	0x200001f0
 8000f9c:	200002a8 	.word	0x200002a8
 8000fa0:	40080000 	.word	0x40080000

08000fa4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if (htim == &htim2) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a1a      	ldr	r2, [pc, #104]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d12c      	bne.n	800100e <HAL_TIM_PeriodElapsedCallback+0x6a>
    adc_value = ADC_Read();
 8000fb4:	f7ff ff8c 	bl	8000ed0 <ADC_Read>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000fbe:	601a      	str	r2, [r3, #0]
    Encoder_Cnt = __HAL_TIM_GetCounter(&htim3);
 8000fc0:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000fca:	601a      	str	r2, [r3, #0]
    Encoder_Angle = Encoder_Cnt / 1.5;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa17 	bl	8000404 <__aeabi_i2d>
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000fdc:	f7ff fba6 	bl	800072c <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fd4e 	bl	8000a88 <__aeabi_d2f>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ff0:	6013      	str	r3, [r2, #0]
    if (Encoder_Angle > 360) {
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	490e      	ldr	r1, [pc, #56]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe01 	bl	8000c00 <__aeabi_fcmpgt>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d100      	bne.n	8001006 <HAL_TIM_PeriodElapsedCallback+0x62>
    // Encoder_Integral += Encoder_Cnt;
    // PID_Calculate(&Turn_PID1, 2800, adc_value);
    // PID_Calculate(&Turn_PID2, 0, Encoder_Integral);
    // Load(Turn_PID1.PID_Out + Turn_PID2.PID_Out);
  }
}
 8001004:	e003      	b.n	800100e <HAL_TIM_PeriodElapsedCallback+0x6a>
      __HAL_TIM_SetCounter(&htim3, 0);
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000075c 	.word	0x2000075c
 800101c:	200002a4 	.word	0x200002a4
 8001020:	200007a4 	.word	0x200007a4
 8001024:	20000288 	.word	0x20000288
 8001028:	3ff80000 	.word	0x3ff80000
 800102c:	2000028c 	.word	0x2000028c
 8001030:	43b40000 	.word	0x43b40000

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f000 ff63 	bl	8001f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 f867 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f7ff fe61 	bl	8000d08 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001046:	f7ff fec5 	bl	8000dd4 <MX_I2C1_Init>
  MX_TIM4_Init();
 800104a:	f000 fe15 	bl	8001c78 <MX_TIM4_Init>
  MX_TIM3_Init();
 800104e:	f000 fdbf 	bl	8001bd0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001052:	f000 fd6f 	bl	8001b34 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001056:	f7ff fddd 	bl	8000c14 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800105a:	f000 f913 	bl	8001284 <OLED_Init>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800105e:	2100      	movs	r1, #0
 8001060:	481f      	ldr	r0, [pc, #124]	@ (80010e0 <main+0xac>)
 8001062:	f003 fa47 	bl	80044f4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001066:	481f      	ldr	r0, [pc, #124]	@ (80010e4 <main+0xb0>)
 8001068:	f003 f99a 	bl	80043a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800106c:	213c      	movs	r1, #60	@ 0x3c
 800106e:	481e      	ldr	r0, [pc, #120]	@ (80010e8 <main+0xb4>)
 8001070:	f003 fb84 	bl	800477c <HAL_TIM_Encoder_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001074:	481d      	ldr	r0, [pc, #116]	@ (80010ec <main+0xb8>)
 8001076:	f001 fbd3 	bl	8002820 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);     //启动ADC转换
 800107a:	481c      	ldr	r0, [pc, #112]	@ (80010ec <main+0xb8>)
 800107c:	f001 f87c 	bl	8002178 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	4819      	ldr	r0, [pc, #100]	@ (80010ec <main+0xb8>)
 8001086:	f001 f925 	bl	80022d4 <HAL_ADC_PollForConversion>
  // PID_Init(&Turn_PID1, 300, 0, 0, 0, 7200);
  // PID_Init(&Turn_PID2, 0, 0, 0, 0, 7200);
  Load(-1500);
 800108a:	4819      	ldr	r0, [pc, #100]	@ (80010f0 <main+0xbc>)
 800108c:	f000 f8a2 	bl	80011d4 <Load>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    OLED_NewFrame();
 8001090:	f000 f954 	bl	800133c <OLED_NewFrame>
    sprintf(message_adc, "adc: %d", adc_value);
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <main+0xc0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4917      	ldr	r1, [pc, #92]	@ (80010f8 <main+0xc4>)
 800109c:	4817      	ldr	r0, [pc, #92]	@ (80010fc <main+0xc8>)
 800109e:	f004 fed7 	bl	8005e50 <siprintf>
    OLED_PrintString(0, 0, message_adc, &font16x16, OLED_COLOR_NORMAL);
 80010a2:	2300      	movs	r3, #0
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <main+0xcc>)
 80010a8:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <main+0xc8>)
 80010aa:	2100      	movs	r1, #0
 80010ac:	2000      	movs	r0, #0
 80010ae:	f000 fb6a 	bl	8001786 <OLED_PrintString>
    // sprintf(message, "position: %.2f", Encoder_Integral);
    // OLED_PrintString(0, 17, message, &font16x16, OLED_COLOR_NORMAL);

    sprintf(message, "angle: %.2f", Encoder_Angle);
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <main+0xd0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f9b6 	bl	8000428 <__aeabi_f2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4911      	ldr	r1, [pc, #68]	@ (8001108 <main+0xd4>)
 80010c2:	4812      	ldr	r0, [pc, #72]	@ (800110c <main+0xd8>)
 80010c4:	f004 fec4 	bl	8005e50 <siprintf>
    OLED_PrintString(0, 33, message, &font16x16, OLED_COLOR_NORMAL);
 80010c8:	2300      	movs	r3, #0
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <main+0xcc>)
 80010ce:	4a0f      	ldr	r2, [pc, #60]	@ (800110c <main+0xd8>)
 80010d0:	2121      	movs	r1, #33	@ 0x21
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 fb57 	bl	8001786 <OLED_PrintString>
    OLED_ShowFrame();
 80010d8:	f000 f93c 	bl	8001354 <OLED_ShowFrame>
    OLED_NewFrame();
 80010dc:	bf00      	nop
 80010de:	e7d7      	b.n	8001090 <main+0x5c>
 80010e0:	200007ec 	.word	0x200007ec
 80010e4:	2000075c 	.word	0x2000075c
 80010e8:	200007a4 	.word	0x200007a4
 80010ec:	200001f0 	.word	0x200001f0
 80010f0:	fffffa24 	.word	0xfffffa24
 80010f4:	200002a4 	.word	0x200002a4
 80010f8:	080080f0 	.word	0x080080f0
 80010fc:	20000290 	.word	0x20000290
 8001100:	0800878c 	.word	0x0800878c
 8001104:	2000028c 	.word	0x2000028c
 8001108:	080080f8 	.word	0x080080f8
 800110c:	20000274 	.word	0x20000274

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	@ 0x50
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111a:	2228      	movs	r2, #40	@ 0x28
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f004 ff09 	bl	8005f36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001140:	2301      	movs	r3, #1
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001144:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114e:	2301      	movs	r3, #1
 8001150:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001156:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800115a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800115c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001160:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001166:	4618      	mov	r0, r3
 8001168:	f002 fb4e 	bl	8003808 <HAL_RCC_OscConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001172:	f000 f828 	bl	80011c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001176:	230f      	movs	r3, #15
 8001178:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001186:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2102      	movs	r1, #2
 8001192:	4618      	mov	r0, r3
 8001194:	f002 fdba 	bl	8003d0c <HAL_RCC_ClockConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800119e:	f000 f812 	bl	80011c6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011a2:	2302      	movs	r3, #2
 80011a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 ff3a 	bl	8004028 <HAL_RCCEx_PeriphCLKConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011ba:	f000 f804 	bl	80011c6 <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	@ 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ca:	b672      	cpsid	i
}
 80011cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ce:	bf00      	nop
 80011d0:	e7fd      	b.n	80011ce <Error_Handler+0x8>
	...

080011d4 <Load>:
        return -n;
    }
}

void Load(int moto1)   //-7200~7200
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    if(moto1 < 0)   //反转
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da0c      	bge.n	80011fc <Load+0x28>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);     //AIN1 = 0;
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011e8:	4810      	ldr	r0, [pc, #64]	@ (800122c <Load+0x58>)
 80011ea:	f001 fe59 	bl	8002ea0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);       //AIN2 = 1;
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f4:	480d      	ldr	r0, [pc, #52]	@ (800122c <Load+0x58>)
 80011f6:	f001 fe53 	bl	8002ea0 <HAL_GPIO_WritePin>
 80011fa:	e00b      	b.n	8001214 <Load+0x40>
    }
    else            //正转
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);      //AIN1 = 1;
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001202:	480a      	ldr	r0, [pc, #40]	@ (800122c <Load+0x58>)
 8001204:	f001 fe4c 	bl	8002ea0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);    //AIN2 = 0;
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800120e:	4807      	ldr	r0, [pc, #28]	@ (800122c <Load+0x58>)
 8001210:	f001 fe46 	bl	8002ea0 <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, abs(moto1));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800121a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800121e:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <Load+0x5c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40010c00 	.word	0x40010c00
 8001230:	200007ec 	.word	0x200007ec

08001234 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af02      	add	r7, sp, #8
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	b29b      	uxth	r3, r3
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	9200      	str	r2, [sp, #0]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	2178      	movs	r1, #120	@ 0x78
 800124e:	4803      	ldr	r0, [pc, #12]	@ (800125c <OLED_Send+0x28>)
 8001250:	f001 ff82 	bl	8003158 <HAL_I2C_Master_Transmit>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000220 	.word	0x20000220

08001260 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 800126a:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <OLED_SendCmd+0x20>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8001270:	2102      	movs	r1, #2
 8001272:	4803      	ldr	r0, [pc, #12]	@ (8001280 <OLED_SendCmd+0x20>)
 8001274:	f7ff ffde 	bl	8001234 <OLED_Send>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200006d0 	.word	0x200006d0

08001284 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8001288:	20ae      	movs	r0, #174	@ 0xae
 800128a:	f7ff ffe9 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 800128e:	2020      	movs	r0, #32
 8001290:	f7ff ffe6 	bl	8001260 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001294:	2010      	movs	r0, #16
 8001296:	f7ff ffe3 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 800129a:	20b0      	movs	r0, #176	@ 0xb0
 800129c:	f7ff ffe0 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 80012a0:	20c8      	movs	r0, #200	@ 0xc8
 80012a2:	f7ff ffdd 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff ffda 	bl	8001260 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 80012ac:	2010      	movs	r0, #16
 80012ae:	f7ff ffd7 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 80012b2:	2040      	movs	r0, #64	@ 0x40
 80012b4:	f7ff ffd4 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 80012b8:	2081      	movs	r0, #129	@ 0x81
 80012ba:	f7ff ffd1 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 80012be:	20df      	movs	r0, #223	@ 0xdf
 80012c0:	f7ff ffce 	bl	8001260 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 80012c4:	20a1      	movs	r0, #161	@ 0xa1
 80012c6:	f7ff ffcb 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 80012ca:	20a6      	movs	r0, #166	@ 0xa6
 80012cc:	f7ff ffc8 	bl	8001260 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 80012d0:	20a8      	movs	r0, #168	@ 0xa8
 80012d2:	f7ff ffc5 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 80012d6:	203f      	movs	r0, #63	@ 0x3f
 80012d8:	f7ff ffc2 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 80012dc:	20a4      	movs	r0, #164	@ 0xa4
 80012de:	f7ff ffbf 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 80012e2:	20d3      	movs	r0, #211	@ 0xd3
 80012e4:	f7ff ffbc 	bl	8001260 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff ffb9 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 80012ee:	20d5      	movs	r0, #213	@ 0xd5
 80012f0:	f7ff ffb6 	bl	8001260 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 80012f4:	20f0      	movs	r0, #240	@ 0xf0
 80012f6:	f7ff ffb3 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 80012fa:	20d9      	movs	r0, #217	@ 0xd9
 80012fc:	f7ff ffb0 	bl	8001260 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8001300:	2022      	movs	r0, #34	@ 0x22
 8001302:	f7ff ffad 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8001306:	20da      	movs	r0, #218	@ 0xda
 8001308:	f7ff ffaa 	bl	8001260 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 800130c:	2012      	movs	r0, #18
 800130e:	f7ff ffa7 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8001312:	20db      	movs	r0, #219	@ 0xdb
 8001314:	f7ff ffa4 	bl	8001260 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8001318:	2020      	movs	r0, #32
 800131a:	f7ff ffa1 	bl	8001260 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 800131e:	208d      	movs	r0, #141	@ 0x8d
 8001320:	f7ff ff9e 	bl	8001260 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8001324:	2014      	movs	r0, #20
 8001326:	f7ff ff9b 	bl	8001260 <OLED_SendCmd>

  OLED_NewFrame();
 800132a:	f000 f807 	bl	800133c <OLED_NewFrame>
  OLED_ShowFrame();
 800132e:	f000 f811 	bl	8001354 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001332:	20af      	movs	r0, #175	@ 0xaf
 8001334:	f7ff ff94 	bl	8001260 <OLED_SendCmd>
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001340:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001344:	2100      	movs	r1, #0
 8001346:	4802      	ldr	r0, [pc, #8]	@ (8001350 <OLED_NewFrame+0x14>)
 8001348:	f004 fdf5 	bl	8005f36 <memset>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200002d0 	.word	0x200002d0

08001354 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <OLED_ShowFrame+0x5c>)
 800135c:	2240      	movs	r2, #64	@ 0x40
 800135e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	e01b      	b.n	800139e <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	3b50      	subs	r3, #80	@ 0x50
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff77 	bl	8001260 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff ff74 	bl	8001260 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001378:	2010      	movs	r0, #16
 800137a:	f7ff ff71 	bl	8001260 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 800137e:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <OLED_ShowFrame+0x60>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	01db      	lsls	r3, r3, #7
 8001384:	4a0c      	ldr	r2, [pc, #48]	@ (80013b8 <OLED_ShowFrame+0x64>)
 8001386:	4413      	add	r3, r2
 8001388:	2280      	movs	r2, #128	@ 0x80
 800138a:	4619      	mov	r1, r3
 800138c:	f004 fe61 	bl	8006052 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001390:	2181      	movs	r1, #129	@ 0x81
 8001392:	4807      	ldr	r0, [pc, #28]	@ (80013b0 <OLED_ShowFrame+0x5c>)
 8001394:	f7ff ff4e 	bl	8001234 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	3301      	adds	r3, #1
 800139c:	71fb      	strb	r3, [r7, #7]
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b07      	cmp	r3, #7
 80013a2:	d9e0      	bls.n	8001366 <OLED_ShowFrame+0x12>
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200006d4 	.word	0x200006d4
 80013b4:	200006d5 	.word	0x200006d5
 80013b8:	200002d0 	.word	0x200002d0

080013bc <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 80013bc:	b490      	push	{r4, r7}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4604      	mov	r4, r0
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4623      	mov	r3, r4
 80013cc:	71fb      	strb	r3, [r7, #7]
 80013ce:	4603      	mov	r3, r0
 80013d0:	71bb      	strb	r3, [r7, #6]
 80013d2:	460b      	mov	r3, r1
 80013d4:	717b      	strb	r3, [r7, #5]
 80013d6:	4613      	mov	r3, r2
 80013d8:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b07      	cmp	r3, #7
 80013de:	d860      	bhi.n	80014a2 <OLED_SetByte_Fine+0xe6>
 80013e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db5c      	blt.n	80014a2 <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 80013e8:	7d3b      	ldrb	r3, [r7, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <OLED_SetByte_Fine+0x38>
    data = ~data;
 80013ee:	797b      	ldrb	r3, [r7, #5]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80013f4:	7c3b      	ldrb	r3, [r7, #16]
 80013f6:	3301      	adds	r3, #1
 80013f8:	22ff      	movs	r2, #255	@ 0xff
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	b25a      	sxtb	r2, r3
 8001400:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001404:	4313      	orrs	r3, r2
 8001406:	b25a      	sxtb	r2, r3
 8001408:	793b      	ldrb	r3, [r7, #4]
 800140a:	f1c3 0308 	rsb	r3, r3, #8
 800140e:	21ff      	movs	r1, #255	@ 0xff
 8001410:	fa41 f303 	asr.w	r3, r1, r3
 8001414:	b25b      	sxtb	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b25b      	sxtb	r3, r3
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <OLED_SetByte_Fine+0xf0>)
 800141e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	4922      	ldr	r1, [pc, #136]	@ (80014b0 <OLED_SetByte_Fine+0xf4>)
 8001426:	01d2      	lsls	r2, r2, #7
 8001428:	440a      	add	r2, r1
 800142a:	4413      	add	r3, r2
 800142c:	7818      	ldrb	r0, [r3, #0]
 800142e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <OLED_SetByte_Fine+0xf0>)
 8001430:	7819      	ldrb	r1, [r3, #0]
 8001432:	79fa      	ldrb	r2, [r7, #7]
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	4001      	ands	r1, r0
 8001438:	b2c8      	uxtb	r0, r1
 800143a:	491d      	ldr	r1, [pc, #116]	@ (80014b0 <OLED_SetByte_Fine+0xf4>)
 800143c:	01d2      	lsls	r2, r2, #7
 800143e:	440a      	add	r2, r1
 8001440:	4413      	add	r3, r2
 8001442:	4602      	mov	r2, r0
 8001444:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8001446:	7c3b      	ldrb	r3, [r7, #16]
 8001448:	3301      	adds	r3, #1
 800144a:	22ff      	movs	r2, #255	@ 0xff
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	b25b      	sxtb	r3, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	b25a      	sxtb	r2, r3
 8001456:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800145a:	4013      	ands	r3, r2
 800145c:	b25a      	sxtb	r2, r3
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	f1c3 0308 	rsb	r3, r3, #8
 8001464:	21ff      	movs	r1, #255	@ 0xff
 8001466:	fa41 f303 	asr.w	r3, r1, r3
 800146a:	b25b      	sxtb	r3, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	b25b      	sxtb	r3, r3
 8001470:	4013      	ands	r3, r2
 8001472:	b25b      	sxtb	r3, r3
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <OLED_SetByte_Fine+0xf0>)
 8001478:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	490c      	ldr	r1, [pc, #48]	@ (80014b0 <OLED_SetByte_Fine+0xf4>)
 8001480:	01d2      	lsls	r2, r2, #7
 8001482:	440a      	add	r2, r1
 8001484:	4413      	add	r3, r2
 8001486:	7818      	ldrb	r0, [r3, #0]
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <OLED_SetByte_Fine+0xf0>)
 800148a:	7819      	ldrb	r1, [r3, #0]
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	4301      	orrs	r1, r0
 8001492:	b2c8      	uxtb	r0, r1
 8001494:	4906      	ldr	r1, [pc, #24]	@ (80014b0 <OLED_SetByte_Fine+0xf4>)
 8001496:	01d2      	lsls	r2, r2, #7
 8001498:	440a      	add	r2, r1
 800149a:	4413      	add	r3, r2
 800149c:	4602      	mov	r2, r0
 800149e:	701a      	strb	r2, [r3, #0]
 80014a0:	e000      	b.n	80014a4 <OLED_SetByte_Fine+0xe8>
    return;
 80014a2:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc90      	pop	{r4, r7}
 80014aa:	4770      	bx	lr
 80014ac:	20000755 	.word	0x20000755
 80014b0:	200002d0 	.word	0x200002d0

080014b4 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af02      	add	r7, sp, #8
 80014ba:	4604      	mov	r4, r0
 80014bc:	4608      	mov	r0, r1
 80014be:	4611      	mov	r1, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	4623      	mov	r3, r4
 80014c4:	71fb      	strb	r3, [r7, #7]
 80014c6:	4603      	mov	r3, r0
 80014c8:	71bb      	strb	r3, [r7, #6]
 80014ca:	460b      	mov	r3, r1
 80014cc:	717b      	strb	r3, [r7, #5]
 80014ce:	4613      	mov	r3, r2
 80014d0:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 80014e0:	7bba      	ldrb	r2, [r7, #14]
 80014e2:	793b      	ldrb	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	dd29      	ble.n	800153e <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80014ea:	797a      	ldrb	r2, [r7, #5]
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	7bbc      	ldrb	r4, [r7, #14]
 80014f6:	79f9      	ldrb	r1, [r7, #7]
 80014f8:	7bf8      	ldrb	r0, [r7, #15]
 80014fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	2307      	movs	r3, #7
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	4623      	mov	r3, r4
 8001506:	f7ff ff59 	bl	80013bc <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	3301      	adds	r3, #1
 800150e:	b2d8      	uxtb	r0, r3
 8001510:	797a      	ldrb	r2, [r7, #5]
 8001512:	7bbb      	ldrb	r3, [r7, #14]
 8001514:	f1c3 0308 	rsb	r3, r3, #8
 8001518:	fa42 f303 	asr.w	r3, r2, r3
 800151c:	b2dc      	uxtb	r4, r3
 800151e:	793a      	ldrb	r2, [r7, #4]
 8001520:	7bbb      	ldrb	r3, [r7, #14]
 8001522:	4413      	add	r3, r2
 8001524:	b2db      	uxtb	r3, r3
 8001526:	3b09      	subs	r3, #9
 8001528:	b2db      	uxtb	r3, r3
 800152a:	79f9      	ldrb	r1, [r7, #7]
 800152c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001530:	9201      	str	r2, [sp, #4]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2300      	movs	r3, #0
 8001536:	4622      	mov	r2, r4
 8001538:	f7ff ff40 	bl	80013bc <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 800153c:	e015      	b.n	800156a <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 800153e:	797a      	ldrb	r2, [r7, #5]
 8001540:	7bbb      	ldrb	r3, [r7, #14]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	b2dc      	uxtb	r4, r3
 8001548:	7bba      	ldrb	r2, [r7, #14]
 800154a:	793b      	ldrb	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	b2db      	uxtb	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	7bbd      	ldrb	r5, [r7, #14]
 8001556:	79f9      	ldrb	r1, [r7, #7]
 8001558:	7bf8      	ldrb	r0, [r7, #15]
 800155a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800155e:	9201      	str	r2, [sp, #4]
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	462b      	mov	r3, r5
 8001564:	4622      	mov	r2, r4
 8001566:	f7ff ff29 	bl	80013bc <OLED_SetByte_Fine>
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bdb0      	pop	{r4, r5, r7, pc}

08001572 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8001572:	b590      	push	{r4, r7, lr}
 8001574:	b087      	sub	sp, #28
 8001576:	af02      	add	r7, sp, #8
 8001578:	4604      	mov	r4, r0
 800157a:	4608      	mov	r0, r1
 800157c:	4611      	mov	r1, r2
 800157e:	461a      	mov	r2, r3
 8001580:	4623      	mov	r3, r4
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	4603      	mov	r3, r0
 8001586:	71bb      	strb	r3, [r7, #6]
 8001588:	460b      	mov	r3, r1
 800158a:	717b      	strb	r3, [r7, #5]
 800158c:	4613      	mov	r3, r2
 800158e:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001596:	79bb      	ldrb	r3, [r7, #6]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800159e:	797a      	ldrb	r2, [r7, #5]
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	7bbc      	ldrb	r4, [r7, #14]
 80015aa:	79f9      	ldrb	r1, [r7, #7]
 80015ac:	7bf8      	ldrb	r0, [r7, #15]
 80015ae:	793b      	ldrb	r3, [r7, #4]
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	2307      	movs	r3, #7
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	4623      	mov	r3, r4
 80015b8:	f7ff ff00 	bl	80013bc <OLED_SetByte_Fine>
  if (bit)
 80015bc:	7bbb      	ldrb	r3, [r7, #14]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d014      	beq.n	80015ec <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	3301      	adds	r3, #1
 80015c6:	b2d8      	uxtb	r0, r3
 80015c8:	797a      	ldrb	r2, [r7, #5]
 80015ca:	7bbb      	ldrb	r3, [r7, #14]
 80015cc:	f1c3 0308 	rsb	r3, r3, #8
 80015d0:	fa42 f303 	asr.w	r3, r2, r3
 80015d4:	b2dc      	uxtb	r4, r3
 80015d6:	7bbb      	ldrb	r3, [r7, #14]
 80015d8:	3b01      	subs	r3, #1
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	79f9      	ldrb	r1, [r7, #7]
 80015de:	793a      	ldrb	r2, [r7, #4]
 80015e0:	9201      	str	r2, [sp, #4]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2300      	movs	r3, #0
 80015e6:	4622      	mov	r2, r4
 80015e8:	f7ff fee8 	bl	80013bc <OLED_SetByte_Fine>
  }
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}

080015f4 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	603a      	str	r2, [r7, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	460b      	mov	r3, r1
 8001604:	71bb      	strb	r3, [r7, #6]
 8001606:	4613      	mov	r3, r2
 8001608:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 800160a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800160e:	08db      	lsrs	r3, r3, #3
 8001610:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8001612:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e025      	b.n	800166e <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8001622:	2300      	movs	r3, #0
 8001624:	73bb      	strb	r3, [r7, #14]
 8001626:	e01b      	b.n	8001660 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	4413      	add	r3, r2
 800162e:	b2d8      	uxtb	r0, r3
 8001630:	7bbb      	ldrb	r3, [r7, #14]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	b2da      	uxtb	r2, r3
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	4413      	add	r3, r2
 800163a:	b2dc      	uxtb	r4, r3
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	7bbb      	ldrb	r3, [r7, #14]
 8001640:	7979      	ldrb	r1, [r7, #5]
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	461a      	mov	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001654:	4621      	mov	r1, r4
 8001656:	f7ff ff8c 	bl	8001572 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 800165a:	7bbb      	ldrb	r3, [r7, #14]
 800165c:	3301      	adds	r3, #1
 800165e:	73bb      	strb	r3, [r7, #14]
 8001660:	7bba      	ldrb	r2, [r7, #14]
 8001662:	7b3b      	ldrb	r3, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d3df      	bcc.n	8001628 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	3301      	adds	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	797b      	ldrb	r3, [r7, #5]
 8001672:	429a      	cmp	r2, r3
 8001674:	d3d5      	bcc.n	8001622 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8001676:	7afb      	ldrb	r3, [r7, #11]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d028      	beq.n	80016ce <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 800167c:	797b      	ldrb	r3, [r7, #5]
 800167e:	b29b      	uxth	r3, r3
 8001680:	7b3a      	ldrb	r2, [r7, #12]
 8001682:	b292      	uxth	r2, r2
 8001684:	fb02 f303 	mul.w	r3, r2, r3
 8001688:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	737b      	strb	r3, [r7, #13]
 800168e:	e01a      	b.n	80016c6 <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8001690:	79fa      	ldrb	r2, [r7, #7]
 8001692:	7b7b      	ldrb	r3, [r7, #13]
 8001694:	4413      	add	r3, r2
 8001696:	b2d8      	uxtb	r0, r3
 8001698:	7b3b      	ldrb	r3, [r7, #12]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	b2da      	uxtb	r2, r3
 800169e:	79bb      	ldrb	r3, [r7, #6]
 80016a0:	4413      	add	r3, r2
 80016a2:	b2d9      	uxtb	r1, r3
 80016a4:	893a      	ldrh	r2, [r7, #8]
 80016a6:	7b7b      	ldrb	r3, [r7, #13]
 80016a8:	4413      	add	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	7afc      	ldrb	r4, [r7, #11]
 80016b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4623      	mov	r3, r4
 80016bc:	f7ff fefa 	bl	80014b4 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 80016c0:	7b7b      	ldrb	r3, [r7, #13]
 80016c2:	3301      	adds	r3, #1
 80016c4:	737b      	strb	r3, [r7, #13]
 80016c6:	7b7a      	ldrb	r2, [r7, #13]
 80016c8:	797b      	ldrb	r3, [r7, #5]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d3e0      	bcc.n	8001690 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}

080016d6 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 80016d6:	b5b0      	push	{r4, r5, r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af02      	add	r7, sp, #8
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	460b      	mov	r3, r1
 80016e4:	71bb      	strb	r3, [r7, #6]
 80016e6:	4613      	mov	r3, r2
 80016e8:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	797b      	ldrb	r3, [r7, #5]
 80016f0:	f1a3 0120 	sub.w	r1, r3, #32
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3307      	adds	r3, #7
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	da00      	bge.n	8001700 <OLED_PrintASCIIChar+0x2a>
 80016fe:	3307      	adds	r3, #7
 8001700:	10db      	asrs	r3, r3, #3
 8001702:	4618      	mov	r0, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	785b      	ldrb	r3, [r3, #1]
 8001708:	fb00 f303 	mul.w	r3, r0, r3
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	18d4      	adds	r4, r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	785d      	ldrb	r5, [r3, #1]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	79b9      	ldrb	r1, [r7, #6]
 800171c:	79f8      	ldrb	r0, [r7, #7]
 800171e:	7e3a      	ldrb	r2, [r7, #24]
 8001720:	9201      	str	r2, [sp, #4]
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	462b      	mov	r3, r5
 8001726:	4622      	mov	r2, r4
 8001728:	f7ff ff64 	bl	80015f4 <OLED_SetBlock>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bdb0      	pop	{r4, r5, r7, pc}

08001734 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b25b      	sxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	db01      	blt.n	800174a <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8001746:	2301      	movs	r3, #1
 8001748:	e018      	b.n	800177c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001752:	2bc0      	cmp	r3, #192	@ 0xc0
 8001754:	d101      	bne.n	800175a <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8001756:	2302      	movs	r3, #2
 8001758:	e010      	b.n	800177c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001762:	2be0      	cmp	r3, #224	@ 0xe0
 8001764:	d101      	bne.n	800176a <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8001766:	2303      	movs	r3, #3
 8001768:	e008      	b.n	800177c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8001772:	2bf0      	cmp	r3, #240	@ 0xf0
 8001774:	d101      	bne.n	800177a <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8001776:	2304      	movs	r3, #4
 8001778:	e000      	b.n	800177c <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8001786:	b5b0      	push	{r4, r5, r7, lr}
 8001788:	b08a      	sub	sp, #40	@ 0x28
 800178a:	af02      	add	r7, sp, #8
 800178c:	60ba      	str	r2, [r7, #8]
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	4603      	mov	r3, r0
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	460b      	mov	r3, r1
 8001796:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8001798:	2300      	movs	r3, #0
 800179a:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	3307      	adds	r3, #7
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da00      	bge.n	80017a8 <OLED_PrintString+0x22>
 80017a6:	3307      	adds	r3, #7
 80017a8:	10db      	asrs	r3, r3, #3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	7852      	ldrb	r2, [r2, #1]
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	3304      	adds	r3, #4
 80017b8:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 80017ba:	e07d      	b.n	80018b8 <OLED_PrintString+0x132>
  {
    found = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 80017c0:	8bfb      	ldrh	r3, [r7, #30]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	4413      	add	r3, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ffb4 	bl	8001734 <_OLED_GetUTF8Len>
 80017cc:	4603      	mov	r3, r0
 80017ce:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 80017d0:	7ebb      	ldrb	r3, [r7, #26]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d078      	beq.n	80018c8 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	773b      	strb	r3, [r7, #28]
 80017da:	e032      	b.n	8001842 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	7f3a      	ldrb	r2, [r7, #28]
 80017e2:	7ef9      	ldrb	r1, [r7, #27]
 80017e4:	fb01 f202 	mul.w	r2, r1, r2
 80017e8:	4413      	add	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 80017ec:	8bfb      	ldrh	r3, [r7, #30]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	4413      	add	r3, r2
 80017f2:	7eba      	ldrb	r2, [r7, #26]
 80017f4:	6979      	ldr	r1, [r7, #20]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 fb8d 	bl	8005f16 <memcmp>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d11c      	bne.n	800183c <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	1d1c      	adds	r4, r3, #4
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	785d      	ldrb	r5, [r3, #1]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	7bb9      	ldrb	r1, [r7, #14]
 8001810:	7bf8      	ldrb	r0, [r7, #15]
 8001812:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001816:	9201      	str	r2, [sp, #4]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	462b      	mov	r3, r5
 800181c:	4622      	mov	r2, r4
 800181e:	f7ff fee9 	bl	80015f4 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	785a      	ldrb	r2, [r3, #1]
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	4413      	add	r3, r2
 800182a:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800182c:	7ebb      	ldrb	r3, [r7, #26]
 800182e:	b29a      	uxth	r2, r3
 8001830:	8bfb      	ldrh	r3, [r7, #30]
 8001832:	4413      	add	r3, r2
 8001834:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8001836:	2301      	movs	r3, #1
 8001838:	777b      	strb	r3, [r7, #29]
        break;
 800183a:	e007      	b.n	800184c <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 800183c:	7f3b      	ldrb	r3, [r7, #28]
 800183e:	3301      	adds	r3, #1
 8001840:	773b      	strb	r3, [r7, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7a1b      	ldrb	r3, [r3, #8]
 8001846:	7f3a      	ldrb	r2, [r7, #28]
 8001848:	429a      	cmp	r2, r3
 800184a:	d3c7      	bcc.n	80017dc <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 800184c:	7f7b      	ldrb	r3, [r7, #29]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d132      	bne.n	80018b8 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8001852:	7ebb      	ldrb	r3, [r7, #26]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d119      	bne.n	800188c <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8001858:	8bfb      	ldrh	r3, [r7, #30]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	4413      	add	r3, r2
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68dc      	ldr	r4, [r3, #12]
 8001864:	7bb9      	ldrb	r1, [r7, #14]
 8001866:	7bf8      	ldrb	r0, [r7, #15]
 8001868:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	4623      	mov	r3, r4
 8001870:	f7ff ff31 	bl	80016d6 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	785a      	ldrb	r2, [r3, #1]
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	4413      	add	r3, r2
 800187e:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001880:	7ebb      	ldrb	r3, [r7, #26]
 8001882:	b29a      	uxth	r2, r3
 8001884:	8bfb      	ldrh	r3, [r7, #30]
 8001886:	4413      	add	r3, r2
 8001888:	83fb      	strh	r3, [r7, #30]
 800188a:	e015      	b.n	80018b8 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	7bb9      	ldrb	r1, [r7, #14]
 8001892:	7bf8      	ldrb	r0, [r7, #15]
 8001894:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4613      	mov	r3, r2
 800189c:	2220      	movs	r2, #32
 800189e:	f7ff ff1a 	bl	80016d6 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	785a      	ldrb	r2, [r3, #1]
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	4413      	add	r3, r2
 80018ac:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80018ae:	7ebb      	ldrb	r3, [r7, #26]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	8bfb      	ldrh	r3, [r7, #30]
 80018b4:	4413      	add	r3, r2
 80018b6:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 80018b8:	8bfb      	ldrh	r3, [r7, #30]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	4413      	add	r3, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f47f af7b 	bne.w	80017bc <OLED_PrintString+0x36>
      }
    }
  }
}
 80018c6:	e000      	b.n	80018ca <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 80018c8:	bf00      	nop
}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <HAL_MspInit+0x5c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a14      	ldr	r2, [pc, #80]	@ (8001930 <HAL_MspInit+0x5c>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_MspInit+0x5c>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_MspInit+0x5c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001930 <HAL_MspInit+0x5c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <HAL_MspInit+0x5c>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_MspInit+0x60>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_MspInit+0x60>)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <NMI_Handler+0x4>

08001940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <MemManage_Handler+0x4>

08001950 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <UsageFault_Handler+0x4>

08001960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 fb02 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <TIM2_IRQHandler+0x10>)
 8001996:	f002 ff7f 	bl	8004898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2000075c 	.word	0x2000075c

080019a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <_kill>:

int _kill(int pid, int sig)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019bc:	f004 fb0e 	bl	8005fdc <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2216      	movs	r2, #22
 80019c4:	601a      	str	r2, [r3, #0]
  return -1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_exit>:

void _exit (int status)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019da:	f04f 31ff 	mov.w	r1, #4294967295
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ffe7 	bl	80019b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <_exit+0x12>

080019e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e00a      	b.n	8001a10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019fa:	f3af 8000 	nop.w
 80019fe:	4601      	mov	r1, r0
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	b2ca      	uxtb	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf0      	blt.n	80019fa <_read+0x12>
  }

  return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e009      	b.n	8001a48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	60ba      	str	r2, [r7, #8]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf1      	blt.n	8001a34 <_write+0x12>
  }
  return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_close>:

int _close(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a80:	605a      	str	r2, [r3, #4]
  return 0;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <_isatty>:

int _isatty(int file)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b085      	sub	sp, #20
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
	...

08001abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac4:	4a14      	ldr	r2, [pc, #80]	@ (8001b18 <_sbrk+0x5c>)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <_sbrk+0x60>)
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <_sbrk+0x64>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	@ (8001b24 <_sbrk+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d207      	bcs.n	8001afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aec:	f004 fa76 	bl	8005fdc <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b02:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20005000 	.word	0x20005000
 8001b1c:	00000400 	.word	0x00000400
 8001b20:	20000758 	.word	0x20000758
 8001b24:	20000988 	.word	0x20000988

08001b28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	463b      	mov	r3, r7
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b50:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <MX_TIM2_Init+0x98>)
 8001b52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 360-1;
 8001b58:	4b1c      	ldr	r3, [pc, #112]	@ (8001bcc <MX_TIM2_Init+0x98>)
 8001b5a:	f240 1267 	movw	r2, #359	@ 0x167
 8001b5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <MX_TIM2_Init+0x98>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <MX_TIM2_Init+0x98>)
 8001b68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <MX_TIM2_Init+0x98>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <MX_TIM2_Init+0x98>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b7a:	4814      	ldr	r0, [pc, #80]	@ (8001bcc <MX_TIM2_Init+0x98>)
 8001b7c:	f002 fbc0 	bl	8004300 <HAL_TIM_Base_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b86:	f7ff fb1e 	bl	80011c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	4619      	mov	r1, r3
 8001b96:	480d      	ldr	r0, [pc, #52]	@ (8001bcc <MX_TIM2_Init+0x98>)
 8001b98:	f003 f830 	bl	8004bfc <HAL_TIM_ConfigClockSource>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ba2:	f7ff fb10 	bl	80011c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <MX_TIM2_Init+0x98>)
 8001bb4:	f003 fbbe 	bl	8005334 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bbe:	f7ff fb02 	bl	80011c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000075c 	.word	0x2000075c

08001bd0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	@ 0x30
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2224      	movs	r2, #36	@ 0x24
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f004 f9a9 	bl	8005f36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bec:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <MX_TIM3_Init+0xa0>)
 8001bee:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <MX_TIM3_Init+0xa4>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c70 <MX_TIM3_Init+0xa0>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <MX_TIM3_Init+0xa0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001c70 <MX_TIM3_Init+0xa0>)
 8001c00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <MX_TIM3_Init+0xa0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <MX_TIM3_Init+0xa0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c12:	2303      	movs	r3, #3
 8001c14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c26:	2302      	movs	r3, #2
 8001c28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480c      	ldr	r0, [pc, #48]	@ (8001c70 <MX_TIM3_Init+0xa0>)
 8001c3e:	f002 fcfb 	bl	8004638 <HAL_TIM_Encoder_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c48:	f7ff fabd 	bl	80011c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <MX_TIM3_Init+0xa0>)
 8001c5a:	f003 fb6b 	bl	8005334 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c64:	f7ff faaf 	bl	80011c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	3730      	adds	r7, #48	@ 0x30
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200007a4 	.word	0x200007a4
 8001c74:	40000400 	.word	0x40000400

08001c78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08e      	sub	sp, #56	@ 0x38
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <MX_TIM4_Init+0xe8>)
 8001caa:	4a2e      	ldr	r2, [pc, #184]	@ (8001d64 <MX_TIM4_Init+0xec>)
 8001cac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001cae:	4b2c      	ldr	r3, [pc, #176]	@ (8001d60 <MX_TIM4_Init+0xe8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d60 <MX_TIM4_Init+0xe8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7200-1;
 8001cba:	4b29      	ldr	r3, [pc, #164]	@ (8001d60 <MX_TIM4_Init+0xe8>)
 8001cbc:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001cc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc2:	4b27      	ldr	r3, [pc, #156]	@ (8001d60 <MX_TIM4_Init+0xe8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc8:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <MX_TIM4_Init+0xe8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cce:	4824      	ldr	r0, [pc, #144]	@ (8001d60 <MX_TIM4_Init+0xe8>)
 8001cd0:	f002 fb16 	bl	8004300 <HAL_TIM_Base_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001cda:	f7ff fa74 	bl	80011c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ce4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	481d      	ldr	r0, [pc, #116]	@ (8001d60 <MX_TIM4_Init+0xe8>)
 8001cec:	f002 ff86 	bl	8004bfc <HAL_TIM_ConfigClockSource>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001cf6:	f7ff fa66 	bl	80011c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cfa:	4819      	ldr	r0, [pc, #100]	@ (8001d60 <MX_TIM4_Init+0xe8>)
 8001cfc:	f002 fba2 	bl	8004444 <HAL_TIM_PWM_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d06:	f7ff fa5e 	bl	80011c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d12:	f107 0320 	add.w	r3, r7, #32
 8001d16:	4619      	mov	r1, r3
 8001d18:	4811      	ldr	r0, [pc, #68]	@ (8001d60 <MX_TIM4_Init+0xe8>)
 8001d1a:	f003 fb0b 	bl	8005334 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001d24:	f7ff fa4f 	bl	80011c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d28:	2360      	movs	r3, #96	@ 0x60
 8001d2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 7000;
 8001d2c:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8001d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4807      	ldr	r0, [pc, #28]	@ (8001d60 <MX_TIM4_Init+0xe8>)
 8001d42:	f002 fe99 	bl	8004a78 <HAL_TIM_PWM_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001d4c:	f7ff fa3b 	bl	80011c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d50:	4803      	ldr	r0, [pc, #12]	@ (8001d60 <MX_TIM4_Init+0xe8>)
 8001d52:	f000 f87f 	bl	8001e54 <HAL_TIM_MspPostInit>

}
 8001d56:	bf00      	nop
 8001d58:	3738      	adds	r7, #56	@ 0x38
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200007ec 	.word	0x200007ec
 8001d64:	40000800 	.word	0x40000800

08001d68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d78:	d114      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a14      	ldr	r2, [pc, #80]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	201c      	movs	r0, #28
 8001d98:	f000 fec7 	bl	8002b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d9c:	201c      	movs	r0, #28
 8001d9e:	f000 fee0 	bl	8002b62 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001da2:	e010      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10b      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4a07      	ldr	r2, [pc, #28]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	61d3      	str	r3, [r2, #28]
 8001dba:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40000800 	.word	0x40000800

08001dd8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a15      	ldr	r2, [pc, #84]	@ (8001e48 <HAL_TIM_Encoder_MspInit+0x70>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d123      	bne.n	8001e40 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0x74>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	4a13      	ldr	r2, [pc, #76]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0x74>)
 8001dfe:	f043 0302 	orr.w	r3, r3, #2
 8001e02:	61d3      	str	r3, [r2, #28]
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0x74>)
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0x74>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0x74>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0x74>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e28:	23c0      	movs	r3, #192	@ 0xc0
 8001e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4805      	ldr	r0, [pc, #20]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0x78>)
 8001e3c:	f000 feac 	bl	8002b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e40:	bf00      	nop
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010800 	.word	0x40010800

08001e54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001eac <HAL_TIM_MspPostInit+0x58>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d117      	bne.n	8001ea4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_TIM_MspPostInit+0x5c>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb0 <HAL_TIM_MspPostInit+0x5c>)
 8001e7a:	f043 0308 	orr.w	r3, r3, #8
 8001e7e:	6193      	str	r3, [r2, #24]
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_TIM_MspPostInit+0x5c>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PWMA_Pin;
 8001e8c:	2340      	movs	r3, #64	@ 0x40
 8001e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2302      	movs	r3, #2
 8001e96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMA_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <HAL_TIM_MspPostInit+0x60>)
 8001ea0:	f000 fe7a 	bl	8002b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ea4:	bf00      	nop
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40000800 	.word	0x40000800
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010c00 	.word	0x40010c00

08001eb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb8:	f7ff fe36 	bl	8001b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ebc:	480b      	ldr	r0, [pc, #44]	@ (8001eec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ebe:	490c      	ldr	r1, [pc, #48]	@ (8001ef0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a09      	ldr	r2, [pc, #36]	@ (8001ef8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ed4:	4c09      	ldr	r4, [pc, #36]	@ (8001efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f004 f881 	bl	8005fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ee6:	f7ff f8a5 	bl	8001034 <main>
  bx lr
 8001eea:	4770      	bx	lr
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ef4:	08008b58 	.word	0x08008b58
  ldr r2, =_sbss
 8001ef8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001efc:	20000984 	.word	0x20000984

08001f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC1_2_IRQHandler>
	...

08001f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f08:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <HAL_Init+0x28>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	@ (8001f2c <HAL_Init+0x28>)
 8001f0e:	f043 0310 	orr.w	r3, r3, #16
 8001f12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 fdfd 	bl	8002b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1a:	200f      	movs	r0, #15
 8001f1c:	f000 f808 	bl	8001f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f7ff fcd8 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40022000 	.word	0x40022000

08001f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_InitTick+0x54>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <HAL_InitTick+0x58>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fe15 	bl	8002b7e <HAL_SYSTICK_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00e      	b.n	8001f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d80a      	bhi.n	8001f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f000 fddd 	bl	8002b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f70:	4a06      	ldr	r2, [pc, #24]	@ (8001f8c <HAL_InitTick+0x5c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20000004 	.word	0x20000004

08001f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f94:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_IncTick+0x1c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_IncTick+0x20>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a03      	ldr	r2, [pc, #12]	@ (8001fb0 <HAL_IncTick+0x20>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	20000834 	.word	0x20000834

08001fb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b02      	ldr	r3, [pc, #8]	@ (8001fc4 <HAL_GetTick+0x10>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	20000834 	.word	0x20000834

08001fc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0be      	b.n	8002168 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fe42 	bl	8000c90 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fbc5 	bl	800279c <ADC_ConversionStop_Disable>
 8002012:	4603      	mov	r3, r0
 8002014:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 8099 	bne.w	8002156 <HAL_ADC_Init+0x18e>
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 8095 	bne.w	8002156 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002034:	f023 0302 	bic.w	r3, r3, #2
 8002038:	f043 0202 	orr.w	r2, r3, #2
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002048:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7b1b      	ldrb	r3, [r3, #12]
 800204e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002050:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	4313      	orrs	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002060:	d003      	beq.n	800206a <HAL_ADC_Init+0xa2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_ADC_Init+0xa8>
 800206a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800206e:	e000      	b.n	8002072 <HAL_ADC_Init+0xaa>
 8002070:	2300      	movs	r3, #0
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7d1b      	ldrb	r3, [r3, #20]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d119      	bne.n	80020b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7b1b      	ldrb	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	3b01      	subs	r3, #1
 800208e:	035a      	lsls	r2, r3, #13
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	e00b      	b.n	80020b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <HAL_ADC_Init+0x1a8>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	430b      	orrs	r3, r1
 80020da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020e4:	d003      	beq.n	80020ee <HAL_ADC_Init+0x126>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d104      	bne.n	80020f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	051b      	lsls	r3, r3, #20
 80020f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	430a      	orrs	r2, r1
 800210a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <HAL_ADC_Init+0x1ac>)
 8002114:	4013      	ands	r3, r2
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	429a      	cmp	r2, r3
 800211a:	d10b      	bne.n	8002134 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002132:	e018      	b.n	8002166 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	f023 0312 	bic.w	r3, r3, #18
 800213c:	f043 0210 	orr.w	r2, r3, #16
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002154:	e007      	b.n	8002166 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215a:	f043 0210 	orr.w	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002166:	7dfb      	ldrb	r3, [r7, #23]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	ffe1f7fd 	.word	0xffe1f7fd
 8002174:	ff1f0efe 	.word	0xff1f0efe

08002178 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_ADC_Start+0x1a>
 800218e:	2302      	movs	r3, #2
 8002190:	e098      	b.n	80022c4 <HAL_ADC_Start+0x14c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 faa4 	bl	80026e8 <ADC_Enable>
 80021a0:	4603      	mov	r3, r0
 80021a2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 8087 	bne.w	80022ba <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a41      	ldr	r2, [pc, #260]	@ (80022cc <HAL_ADC_Start+0x154>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d105      	bne.n	80021d6 <HAL_ADC_Start+0x5e>
 80021ca:	4b41      	ldr	r3, [pc, #260]	@ (80022d0 <HAL_ADC_Start+0x158>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d115      	bne.n	8002202 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d026      	beq.n	800223e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002200:	e01d      	b.n	800223e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002206:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2f      	ldr	r2, [pc, #188]	@ (80022d0 <HAL_ADC_Start+0x158>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_ADC_Start+0xaa>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2b      	ldr	r2, [pc, #172]	@ (80022cc <HAL_ADC_Start+0x154>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d10d      	bne.n	800223e <HAL_ADC_Start+0xc6>
 8002222:	4b2b      	ldr	r3, [pc, #172]	@ (80022d0 <HAL_ADC_Start+0x158>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002232:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002236:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002242:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	f023 0206 	bic.w	r2, r3, #6
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002256:	e002      	b.n	800225e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f06f 0202 	mvn.w	r2, #2
 800226e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800227a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800227e:	d113      	bne.n	80022a8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002284:	4a11      	ldr	r2, [pc, #68]	@ (80022cc <HAL_ADC_Start+0x154>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d105      	bne.n	8002296 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800228a:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <HAL_ADC_Start+0x158>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	e00c      	b.n	80022c2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	e003      	b.n	80022c2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40012800 	.word	0x40012800
 80022d0:	40012400 	.word	0x40012400

080022d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80022ea:	f7ff fe63 	bl	8001fb4 <HAL_GetTick>
 80022ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002302:	f043 0220 	orr.w	r2, r3, #32
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0d3      	b.n	80024be <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d131      	bne.n	8002388 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800232e:	2b00      	cmp	r3, #0
 8002330:	d12a      	bne.n	8002388 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002332:	e021      	b.n	8002378 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233a:	d01d      	beq.n	8002378 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_ADC_PollForConversion+0x7e>
 8002342:	f7ff fe37 	bl	8001fb4 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d212      	bcs.n	8002378 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	f043 0204 	orr.w	r2, r3, #4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0a2      	b.n	80024be <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0d6      	beq.n	8002334 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002386:	e070      	b.n	800246a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002388:	4b4f      	ldr	r3, [pc, #316]	@ (80024c8 <HAL_ADC_PollForConversion+0x1f4>)
 800238a:	681c      	ldr	r4, [r3, #0]
 800238c:	2002      	movs	r0, #2
 800238e:	f001 ff01 	bl	8004194 <HAL_RCCEx_GetPeriphCLKFreq>
 8002392:	4603      	mov	r3, r0
 8002394:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6919      	ldr	r1, [r3, #16]
 800239e:	4b4b      	ldr	r3, [pc, #300]	@ (80024cc <HAL_ADC_PollForConversion+0x1f8>)
 80023a0:	400b      	ands	r3, r1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d118      	bne.n	80023d8 <HAL_ADC_PollForConversion+0x104>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68d9      	ldr	r1, [r3, #12]
 80023ac:	4b48      	ldr	r3, [pc, #288]	@ (80024d0 <HAL_ADC_PollForConversion+0x1fc>)
 80023ae:	400b      	ands	r3, r1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d111      	bne.n	80023d8 <HAL_ADC_PollForConversion+0x104>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6919      	ldr	r1, [r3, #16]
 80023ba:	4b46      	ldr	r3, [pc, #280]	@ (80024d4 <HAL_ADC_PollForConversion+0x200>)
 80023bc:	400b      	ands	r3, r1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d108      	bne.n	80023d4 <HAL_ADC_PollForConversion+0x100>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68d9      	ldr	r1, [r3, #12]
 80023c8:	4b43      	ldr	r3, [pc, #268]	@ (80024d8 <HAL_ADC_PollForConversion+0x204>)
 80023ca:	400b      	ands	r3, r1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_PollForConversion+0x100>
 80023d0:	2314      	movs	r3, #20
 80023d2:	e020      	b.n	8002416 <HAL_ADC_PollForConversion+0x142>
 80023d4:	2329      	movs	r3, #41	@ 0x29
 80023d6:	e01e      	b.n	8002416 <HAL_ADC_PollForConversion+0x142>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
 80023de:	4b3d      	ldr	r3, [pc, #244]	@ (80024d4 <HAL_ADC_PollForConversion+0x200>)
 80023e0:	400b      	ands	r3, r1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_ADC_PollForConversion+0x120>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68d9      	ldr	r1, [r3, #12]
 80023ec:	4b3a      	ldr	r3, [pc, #232]	@ (80024d8 <HAL_ADC_PollForConversion+0x204>)
 80023ee:	400b      	ands	r3, r1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <HAL_ADC_PollForConversion+0x13c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6919      	ldr	r1, [r3, #16]
 80023fa:	4b38      	ldr	r3, [pc, #224]	@ (80024dc <HAL_ADC_PollForConversion+0x208>)
 80023fc:	400b      	ands	r3, r1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d108      	bne.n	8002414 <HAL_ADC_PollForConversion+0x140>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68d9      	ldr	r1, [r3, #12]
 8002408:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <HAL_ADC_PollForConversion+0x208>)
 800240a:	400b      	ands	r3, r1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_ADC_PollForConversion+0x140>
 8002410:	2354      	movs	r3, #84	@ 0x54
 8002412:	e000      	b.n	8002416 <HAL_ADC_PollForConversion+0x142>
 8002414:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800241c:	e021      	b.n	8002462 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d01a      	beq.n	800245c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_ADC_PollForConversion+0x168>
 800242c:	f7ff fdc2 	bl	8001fb4 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d20f      	bcs.n	800245c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	429a      	cmp	r2, r3
 8002442:	d90b      	bls.n	800245c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	f043 0204 	orr.w	r2, r3, #4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e030      	b.n	80024be <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3301      	adds	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	429a      	cmp	r2, r3
 8002468:	d8d9      	bhi.n	800241e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f06f 0212 	mvn.w	r2, #18
 8002472:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800248a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800248e:	d115      	bne.n	80024bc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000000 	.word	0x20000000
 80024cc:	24924924 	.word	0x24924924
 80024d0:	00924924 	.word	0x00924924
 80024d4:	12492492 	.word	0x12492492
 80024d8:	00492492 	.word	0x00492492
 80024dc:	00249249 	.word	0x00249249

080024e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x20>
 8002514:	2302      	movs	r3, #2
 8002516:	e0dc      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x1da>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b06      	cmp	r3, #6
 8002526:	d81c      	bhi.n	8002562 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b05      	subs	r3, #5
 800253a:	221f      	movs	r2, #31
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	4019      	ands	r1, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	3b05      	subs	r3, #5
 8002554:	fa00 f203 	lsl.w	r2, r0, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002560:	e03c      	b.n	80025dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d81c      	bhi.n	80025a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	3b23      	subs	r3, #35	@ 0x23
 800257c:	221f      	movs	r2, #31
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	4019      	ands	r1, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	3b23      	subs	r3, #35	@ 0x23
 8002596:	fa00 f203 	lsl.w	r2, r0, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80025a2:	e01b      	b.n	80025dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	3b41      	subs	r3, #65	@ 0x41
 80025b6:	221f      	movs	r2, #31
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	4019      	ands	r1, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b41      	subs	r3, #65	@ 0x41
 80025d0:	fa00 f203 	lsl.w	r2, r0, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b09      	cmp	r3, #9
 80025e2:	d91c      	bls.n	800261e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68d9      	ldr	r1, [r3, #12]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	3b1e      	subs	r3, #30
 80025f6:	2207      	movs	r2, #7
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	4019      	ands	r1, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6898      	ldr	r0, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	3b1e      	subs	r3, #30
 8002610:	fa00 f203 	lsl.w	r2, r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	e019      	b.n	8002652 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6919      	ldr	r1, [r3, #16]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	2207      	movs	r2, #7
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	4019      	ands	r1, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6898      	ldr	r0, [r3, #8]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	fa00 f203 	lsl.w	r2, r0, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b10      	cmp	r3, #16
 8002658:	d003      	beq.n	8002662 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800265e:	2b11      	cmp	r3, #17
 8002660:	d132      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1d      	ldr	r2, [pc, #116]	@ (80026dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d125      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d126      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002688:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b10      	cmp	r3, #16
 8002690:	d11a      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002692:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a13      	ldr	r2, [pc, #76]	@ (80026e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002698:	fba2 2303 	umull	r2, r3, r2, r3
 800269c:	0c9a      	lsrs	r2, r3, #18
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026a8:	e002      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f9      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x1b2>
 80026b6:	e007      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	40012400 	.word	0x40012400
 80026e0:	20000000 	.word	0x20000000
 80026e4:	431bde83 	.word	0x431bde83

080026e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d040      	beq.n	8002788 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002716:	4b1f      	ldr	r3, [pc, #124]	@ (8002794 <ADC_Enable+0xac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1f      	ldr	r2, [pc, #124]	@ (8002798 <ADC_Enable+0xb0>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	0c9b      	lsrs	r3, r3, #18
 8002722:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002724:	e002      	b.n	800272c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3b01      	subs	r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f9      	bne.n	8002726 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002732:	f7ff fc3f 	bl	8001fb4 <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002738:	e01f      	b.n	800277a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800273a:	f7ff fc3b 	bl	8001fb4 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d918      	bls.n	800277a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d011      	beq.n	800277a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e007      	b.n	800278a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	d1d8      	bne.n	800273a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000000 	.word	0x20000000
 8002798:	431bde83 	.word	0x431bde83

0800279c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d12e      	bne.n	8002814 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027c6:	f7ff fbf5 	bl	8001fb4 <HAL_GetTick>
 80027ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027cc:	e01b      	b.n	8002806 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027ce:	f7ff fbf1 	bl	8001fb4 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d914      	bls.n	8002806 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d10d      	bne.n	8002806 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ee:	f043 0210 	orr.w	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fa:	f043 0201 	orr.w	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e007      	b.n	8002816 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d0dc      	beq.n	80027ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_ADCEx_Calibration_Start+0x1e>
 800283a:	2302      	movs	r3, #2
 800283c:	e097      	b.n	800296e <HAL_ADCEx_Calibration_Start+0x14e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ffa8 	bl	800279c <ADC_ConversionStop_Disable>
 800284c:	4603      	mov	r3, r0
 800284e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff49 	bl	80026e8 <ADC_Enable>
 8002856:	4603      	mov	r3, r0
 8002858:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800285a:	7dfb      	ldrb	r3, [r7, #23]
 800285c:	2b00      	cmp	r3, #0
 800285e:	f040 8081 	bne.w	8002964 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800286a:	f023 0302 	bic.w	r3, r3, #2
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002876:	4b40      	ldr	r3, [pc, #256]	@ (8002978 <HAL_ADCEx_Calibration_Start+0x158>)
 8002878:	681c      	ldr	r4, [r3, #0]
 800287a:	2002      	movs	r0, #2
 800287c:	f001 fc8a 	bl	8004194 <HAL_RCCEx_GetPeriphCLKFreq>
 8002880:	4603      	mov	r3, r0
 8002882:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002886:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002888:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800288a:	e002      	b.n	8002892 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3b01      	subs	r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f9      	bne.n	800288c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0208 	orr.w	r2, r2, #8
 80028a6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80028a8:	f7ff fb84 	bl	8001fb4 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028ae:	e01b      	b.n	80028e8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028b0:	f7ff fb80 	bl	8001fb4 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b0a      	cmp	r3, #10
 80028bc:	d914      	bls.n	80028e8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00d      	beq.n	80028e8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d0:	f023 0312 	bic.w	r3, r3, #18
 80028d4:	f043 0210 	orr.w	r2, r3, #16
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e042      	b.n	800296e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1dc      	bne.n	80028b0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0204 	orr.w	r2, r2, #4
 8002904:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002906:	f7ff fb55 	bl	8001fb4 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800290c:	e01b      	b.n	8002946 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800290e:	f7ff fb51 	bl	8001fb4 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b0a      	cmp	r3, #10
 800291a:	d914      	bls.n	8002946 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292e:	f023 0312 	bic.w	r3, r3, #18
 8002932:	f043 0210 	orr.w	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e013      	b.n	800296e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1dc      	bne.n	800290e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002958:	f023 0303 	bic.w	r3, r3, #3
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800296c:	7dfb      	ldrb	r3, [r7, #23]
}
 800296e:	4618      	mov	r0, r3
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bd90      	pop	{r4, r7, pc}
 8002976:	bf00      	nop
 8002978:	20000000 	.word	0x20000000

0800297c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800298c:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <__NVIC_SetPriorityGrouping+0x44>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002998:	4013      	ands	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ae:	4a04      	ldr	r2, [pc, #16]	@ (80029c0 <__NVIC_SetPriorityGrouping+0x44>)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	60d3      	str	r3, [r2, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c8:	4b04      	ldr	r3, [pc, #16]	@ (80029dc <__NVIC_GetPriorityGrouping+0x18>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	f003 0307 	and.w	r3, r3, #7
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	db0b      	blt.n	8002a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	f003 021f 	and.w	r2, r3, #31
 80029f8:	4906      	ldr	r1, [pc, #24]	@ (8002a14 <__NVIC_EnableIRQ+0x34>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2001      	movs	r0, #1
 8002a02:	fa00 f202 	lsl.w	r2, r0, r2
 8002a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db0a      	blt.n	8002a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	490c      	ldr	r1, [pc, #48]	@ (8002a64 <__NVIC_SetPriority+0x4c>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a40:	e00a      	b.n	8002a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4908      	ldr	r1, [pc, #32]	@ (8002a68 <__NVIC_SetPriority+0x50>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3b04      	subs	r3, #4
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	761a      	strb	r2, [r3, #24]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000e100 	.word	0xe000e100
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	@ 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf28      	it	cs
 8002a8a:	2304      	movcs	r3, #4
 8002a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d902      	bls.n	8002a9c <NVIC_EncodePriority+0x30>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3b03      	subs	r3, #3
 8002a9a:	e000      	b.n	8002a9e <NVIC_EncodePriority+0x32>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	4313      	orrs	r3, r2
         );
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3724      	adds	r7, #36	@ 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ae0:	d301      	bcc.n	8002ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00f      	b.n	8002b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b10 <SysTick_Config+0x40>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aee:	210f      	movs	r1, #15
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	f7ff ff90 	bl	8002a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af8:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <SysTick_Config+0x40>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002afe:	4b04      	ldr	r3, [pc, #16]	@ (8002b10 <SysTick_Config+0x40>)
 8002b00:	2207      	movs	r2, #7
 8002b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	e000e010 	.word	0xe000e010

08002b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff ff2d 	bl	800297c <__NVIC_SetPriorityGrouping>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b3c:	f7ff ff42 	bl	80029c4 <__NVIC_GetPriorityGrouping>
 8002b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	6978      	ldr	r0, [r7, #20]
 8002b48:	f7ff ff90 	bl	8002a6c <NVIC_EncodePriority>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff5f 	bl	8002a18 <__NVIC_SetPriority>
}
 8002b5a:	bf00      	nop
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	4603      	mov	r3, r0
 8002b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff35 	bl	80029e0 <__NVIC_EnableIRQ>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff ffa2 	bl	8002ad0 <SysTick_Config>
 8002b8c:	4603      	mov	r3, r0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b08b      	sub	sp, #44	@ 0x2c
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002baa:	e169      	b.n	8002e80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bac:	2201      	movs	r2, #1
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	f040 8158 	bne.w	8002e7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4a9a      	ldr	r2, [pc, #616]	@ (8002e38 <HAL_GPIO_Init+0x2a0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d05e      	beq.n	8002c92 <HAL_GPIO_Init+0xfa>
 8002bd4:	4a98      	ldr	r2, [pc, #608]	@ (8002e38 <HAL_GPIO_Init+0x2a0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d875      	bhi.n	8002cc6 <HAL_GPIO_Init+0x12e>
 8002bda:	4a98      	ldr	r2, [pc, #608]	@ (8002e3c <HAL_GPIO_Init+0x2a4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d058      	beq.n	8002c92 <HAL_GPIO_Init+0xfa>
 8002be0:	4a96      	ldr	r2, [pc, #600]	@ (8002e3c <HAL_GPIO_Init+0x2a4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d86f      	bhi.n	8002cc6 <HAL_GPIO_Init+0x12e>
 8002be6:	4a96      	ldr	r2, [pc, #600]	@ (8002e40 <HAL_GPIO_Init+0x2a8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d052      	beq.n	8002c92 <HAL_GPIO_Init+0xfa>
 8002bec:	4a94      	ldr	r2, [pc, #592]	@ (8002e40 <HAL_GPIO_Init+0x2a8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d869      	bhi.n	8002cc6 <HAL_GPIO_Init+0x12e>
 8002bf2:	4a94      	ldr	r2, [pc, #592]	@ (8002e44 <HAL_GPIO_Init+0x2ac>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d04c      	beq.n	8002c92 <HAL_GPIO_Init+0xfa>
 8002bf8:	4a92      	ldr	r2, [pc, #584]	@ (8002e44 <HAL_GPIO_Init+0x2ac>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d863      	bhi.n	8002cc6 <HAL_GPIO_Init+0x12e>
 8002bfe:	4a92      	ldr	r2, [pc, #584]	@ (8002e48 <HAL_GPIO_Init+0x2b0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d046      	beq.n	8002c92 <HAL_GPIO_Init+0xfa>
 8002c04:	4a90      	ldr	r2, [pc, #576]	@ (8002e48 <HAL_GPIO_Init+0x2b0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d85d      	bhi.n	8002cc6 <HAL_GPIO_Init+0x12e>
 8002c0a:	2b12      	cmp	r3, #18
 8002c0c:	d82a      	bhi.n	8002c64 <HAL_GPIO_Init+0xcc>
 8002c0e:	2b12      	cmp	r3, #18
 8002c10:	d859      	bhi.n	8002cc6 <HAL_GPIO_Init+0x12e>
 8002c12:	a201      	add	r2, pc, #4	@ (adr r2, 8002c18 <HAL_GPIO_Init+0x80>)
 8002c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c18:	08002c93 	.word	0x08002c93
 8002c1c:	08002c6d 	.word	0x08002c6d
 8002c20:	08002c7f 	.word	0x08002c7f
 8002c24:	08002cc1 	.word	0x08002cc1
 8002c28:	08002cc7 	.word	0x08002cc7
 8002c2c:	08002cc7 	.word	0x08002cc7
 8002c30:	08002cc7 	.word	0x08002cc7
 8002c34:	08002cc7 	.word	0x08002cc7
 8002c38:	08002cc7 	.word	0x08002cc7
 8002c3c:	08002cc7 	.word	0x08002cc7
 8002c40:	08002cc7 	.word	0x08002cc7
 8002c44:	08002cc7 	.word	0x08002cc7
 8002c48:	08002cc7 	.word	0x08002cc7
 8002c4c:	08002cc7 	.word	0x08002cc7
 8002c50:	08002cc7 	.word	0x08002cc7
 8002c54:	08002cc7 	.word	0x08002cc7
 8002c58:	08002cc7 	.word	0x08002cc7
 8002c5c:	08002c75 	.word	0x08002c75
 8002c60:	08002c89 	.word	0x08002c89
 8002c64:	4a79      	ldr	r2, [pc, #484]	@ (8002e4c <HAL_GPIO_Init+0x2b4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c6a:	e02c      	b.n	8002cc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	623b      	str	r3, [r7, #32]
          break;
 8002c72:	e029      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	623b      	str	r3, [r7, #32]
          break;
 8002c7c:	e024      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	3308      	adds	r3, #8
 8002c84:	623b      	str	r3, [r7, #32]
          break;
 8002c86:	e01f      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	330c      	adds	r3, #12
 8002c8e:	623b      	str	r3, [r7, #32]
          break;
 8002c90:	e01a      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	623b      	str	r3, [r7, #32]
          break;
 8002c9e:	e013      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca8:	2308      	movs	r3, #8
 8002caa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	611a      	str	r2, [r3, #16]
          break;
 8002cb2:	e009      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	615a      	str	r2, [r3, #20]
          break;
 8002cbe:	e003      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	623b      	str	r3, [r7, #32]
          break;
 8002cc4:	e000      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          break;
 8002cc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2bff      	cmp	r3, #255	@ 0xff
 8002ccc:	d801      	bhi.n	8002cd2 <HAL_GPIO_Init+0x13a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	e001      	b.n	8002cd6 <HAL_GPIO_Init+0x13e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2bff      	cmp	r3, #255	@ 0xff
 8002cdc:	d802      	bhi.n	8002ce4 <HAL_GPIO_Init+0x14c>
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	e002      	b.n	8002cea <HAL_GPIO_Init+0x152>
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	3b08      	subs	r3, #8
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	210f      	movs	r1, #15
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	6a39      	ldr	r1, [r7, #32]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	431a      	orrs	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80b1 	beq.w	8002e7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d18:	4b4d      	ldr	r3, [pc, #308]	@ (8002e50 <HAL_GPIO_Init+0x2b8>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	4a4c      	ldr	r2, [pc, #304]	@ (8002e50 <HAL_GPIO_Init+0x2b8>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6193      	str	r3, [r2, #24]
 8002d24:	4b4a      	ldr	r3, [pc, #296]	@ (8002e50 <HAL_GPIO_Init+0x2b8>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d30:	4a48      	ldr	r2, [pc, #288]	@ (8002e54 <HAL_GPIO_Init+0x2bc>)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	3302      	adds	r3, #2
 8002d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	220f      	movs	r2, #15
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4013      	ands	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a40      	ldr	r2, [pc, #256]	@ (8002e58 <HAL_GPIO_Init+0x2c0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d013      	beq.n	8002d84 <HAL_GPIO_Init+0x1ec>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e5c <HAL_GPIO_Init+0x2c4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00d      	beq.n	8002d80 <HAL_GPIO_Init+0x1e8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3e      	ldr	r2, [pc, #248]	@ (8002e60 <HAL_GPIO_Init+0x2c8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d007      	beq.n	8002d7c <HAL_GPIO_Init+0x1e4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3d      	ldr	r2, [pc, #244]	@ (8002e64 <HAL_GPIO_Init+0x2cc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_GPIO_Init+0x1e0>
 8002d74:	2303      	movs	r3, #3
 8002d76:	e006      	b.n	8002d86 <HAL_GPIO_Init+0x1ee>
 8002d78:	2304      	movs	r3, #4
 8002d7a:	e004      	b.n	8002d86 <HAL_GPIO_Init+0x1ee>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e002      	b.n	8002d86 <HAL_GPIO_Init+0x1ee>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_GPIO_Init+0x1ee>
 8002d84:	2300      	movs	r3, #0
 8002d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d88:	f002 0203 	and.w	r2, r2, #3
 8002d8c:	0092      	lsls	r2, r2, #2
 8002d8e:	4093      	lsls	r3, r2
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d96:	492f      	ldr	r1, [pc, #188]	@ (8002e54 <HAL_GPIO_Init+0x2bc>)
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002db0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	492c      	ldr	r1, [pc, #176]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]
 8002dbc:	e006      	b.n	8002dcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	4928      	ldr	r1, [pc, #160]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d006      	beq.n	8002de6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dd8:	4b23      	ldr	r3, [pc, #140]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	4922      	ldr	r1, [pc, #136]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60cb      	str	r3, [r1, #12]
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002de6:	4b20      	ldr	r3, [pc, #128]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	491e      	ldr	r1, [pc, #120]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d006      	beq.n	8002e0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4918      	ldr	r1, [pc, #96]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
 8002e0c:	e006      	b.n	8002e1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e0e:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	4914      	ldr	r1, [pc, #80]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d021      	beq.n	8002e6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e28:	4b0f      	ldr	r3, [pc, #60]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	490e      	ldr	r1, [pc, #56]	@ (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
 8002e34:	e021      	b.n	8002e7a <HAL_GPIO_Init+0x2e2>
 8002e36:	bf00      	nop
 8002e38:	10320000 	.word	0x10320000
 8002e3c:	10310000 	.word	0x10310000
 8002e40:	10220000 	.word	0x10220000
 8002e44:	10210000 	.word	0x10210000
 8002e48:	10120000 	.word	0x10120000
 8002e4c:	10110000 	.word	0x10110000
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40010800 	.word	0x40010800
 8002e5c:	40010c00 	.word	0x40010c00
 8002e60:	40011000 	.word	0x40011000
 8002e64:	40011400 	.word	0x40011400
 8002e68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <HAL_GPIO_Init+0x304>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	4909      	ldr	r1, [pc, #36]	@ (8002e9c <HAL_GPIO_Init+0x304>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f47f ae8e 	bne.w	8002bac <HAL_GPIO_Init+0x14>
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	372c      	adds	r7, #44	@ 0x2c
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	40010400 	.word	0x40010400

08002ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	807b      	strh	r3, [r7, #2]
 8002eac:	4613      	mov	r3, r2
 8002eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eb0:	787b      	ldrb	r3, [r7, #1]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ebc:	e003      	b.n	8002ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	041a      	lsls	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	611a      	str	r2, [r3, #16]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e12b      	b.n	800313a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd ff9a 	bl	8000e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2224      	movs	r2, #36	@ 0x24
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f34:	f001 f832 	bl	8003f9c <HAL_RCC_GetPCLK1Freq>
 8002f38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a81      	ldr	r2, [pc, #516]	@ (8003144 <HAL_I2C_Init+0x274>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d807      	bhi.n	8002f54 <HAL_I2C_Init+0x84>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a80      	ldr	r2, [pc, #512]	@ (8003148 <HAL_I2C_Init+0x278>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	bf94      	ite	ls
 8002f4c:	2301      	movls	r3, #1
 8002f4e:	2300      	movhi	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e006      	b.n	8002f62 <HAL_I2C_Init+0x92>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a7d      	ldr	r2, [pc, #500]	@ (800314c <HAL_I2C_Init+0x27c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	bf94      	ite	ls
 8002f5c:	2301      	movls	r3, #1
 8002f5e:	2300      	movhi	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0e7      	b.n	800313a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a78      	ldr	r2, [pc, #480]	@ (8003150 <HAL_I2C_Init+0x280>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0c9b      	lsrs	r3, r3, #18
 8002f74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4a6a      	ldr	r2, [pc, #424]	@ (8003144 <HAL_I2C_Init+0x274>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d802      	bhi.n	8002fa4 <HAL_I2C_Init+0xd4>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	e009      	b.n	8002fb8 <HAL_I2C_Init+0xe8>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	4a69      	ldr	r2, [pc, #420]	@ (8003154 <HAL_I2C_Init+0x284>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	495c      	ldr	r1, [pc, #368]	@ (8003144 <HAL_I2C_Init+0x274>)
 8002fd4:	428b      	cmp	r3, r1
 8002fd6:	d819      	bhi.n	800300c <HAL_I2C_Init+0x13c>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1e59      	subs	r1, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe6:	1c59      	adds	r1, r3, #1
 8002fe8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fec:	400b      	ands	r3, r1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_I2C_Init+0x138>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1e59      	subs	r1, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003000:	3301      	adds	r3, #1
 8003002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003006:	e051      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 8003008:	2304      	movs	r3, #4
 800300a:	e04f      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d111      	bne.n	8003038 <HAL_I2C_Init+0x168>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	440b      	add	r3, r1
 8003022:	fbb0 f3f3 	udiv	r3, r0, r3
 8003026:	3301      	adds	r3, #1
 8003028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e012      	b.n	800305e <HAL_I2C_Init+0x18e>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e58      	subs	r0, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	0099      	lsls	r1, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	fbb0 f3f3 	udiv	r3, r0, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Init+0x196>
 8003062:	2301      	movs	r3, #1
 8003064:	e022      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10e      	bne.n	800308c <HAL_I2C_Init+0x1bc>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1e58      	subs	r0, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6859      	ldr	r1, [r3, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	440b      	add	r3, r1
 800307c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003080:	3301      	adds	r3, #1
 8003082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800308a:	e00f      	b.n	80030ac <HAL_I2C_Init+0x1dc>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e58      	subs	r0, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	0099      	lsls	r1, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	6809      	ldr	r1, [r1, #0]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6911      	ldr	r1, [r2, #16]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68d2      	ldr	r2, [r2, #12]
 80030e6:	4311      	orrs	r1, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	000186a0 	.word	0x000186a0
 8003148:	001e847f 	.word	0x001e847f
 800314c:	003d08ff 	.word	0x003d08ff
 8003150:	431bde83 	.word	0x431bde83
 8003154:	10624dd3 	.word	0x10624dd3

08003158 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	461a      	mov	r2, r3
 8003164:	460b      	mov	r3, r1
 8003166:	817b      	strh	r3, [r7, #10]
 8003168:	4613      	mov	r3, r2
 800316a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800316c:	f7fe ff22 	bl	8001fb4 <HAL_GetTick>
 8003170:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	f040 80e0 	bne.w	8003340 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2319      	movs	r3, #25
 8003186:	2201      	movs	r2, #1
 8003188:	4970      	ldr	r1, [pc, #448]	@ (800334c <HAL_I2C_Master_Transmit+0x1f4>)
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f964 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003196:	2302      	movs	r3, #2
 8003198:	e0d3      	b.n	8003342 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_I2C_Master_Transmit+0x50>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0cc      	b.n	8003342 <HAL_I2C_Master_Transmit+0x1ea>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d007      	beq.n	80031ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2221      	movs	r2, #33	@ 0x21
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2210      	movs	r2, #16
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	893a      	ldrh	r2, [r7, #8]
 80031fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a50      	ldr	r2, [pc, #320]	@ (8003350 <HAL_I2C_Master_Transmit+0x1f8>)
 800320e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003210:	8979      	ldrh	r1, [r7, #10]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	6a3a      	ldr	r2, [r7, #32]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f89c 	bl	8003354 <I2C_MasterRequestWrite>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e08d      	b.n	8003342 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800323c:	e066      	b.n	800330c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	6a39      	ldr	r1, [r7, #32]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fa22 	bl	800368c <I2C_WaitOnTXEFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	2b04      	cmp	r3, #4
 8003254:	d107      	bne.n	8003266 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003264:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06b      	b.n	8003342 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d11b      	bne.n	80032e0 <HAL_I2C_Master_Transmit+0x188>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d017      	beq.n	80032e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	6a39      	ldr	r1, [r7, #32]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fa19 	bl	800371c <I2C_WaitOnBTFFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d107      	bne.n	8003308 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003306:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e01a      	b.n	8003342 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003310:	2b00      	cmp	r3, #0
 8003312:	d194      	bne.n	800323e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	e000      	b.n	8003342 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003340:	2302      	movs	r3, #2
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	00100002 	.word	0x00100002
 8003350:	ffff0000 	.word	0xffff0000

08003354 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	460b      	mov	r3, r1
 8003362:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d006      	beq.n	800337e <I2C_MasterRequestWrite+0x2a>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d003      	beq.n	800337e <I2C_MasterRequestWrite+0x2a>
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800337c:	d108      	bne.n	8003390 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e00b      	b.n	80033a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	2b12      	cmp	r3, #18
 8003396:	d107      	bne.n	80033a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f84f 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ce:	d103      	bne.n	80033d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e035      	b.n	8003448 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033e4:	d108      	bne.n	80033f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033e6:	897b      	ldrh	r3, [r7, #10]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033f4:	611a      	str	r2, [r3, #16]
 80033f6:	e01b      	b.n	8003430 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033f8:	897b      	ldrh	r3, [r7, #10]
 80033fa:	11db      	asrs	r3, r3, #7
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 0306 	and.w	r3, r3, #6
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f063 030f 	orn	r3, r3, #15
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	490e      	ldr	r1, [pc, #56]	@ (8003450 <I2C_MasterRequestWrite+0xfc>)
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f898 	bl	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e010      	b.n	8003448 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003426:	897b      	ldrh	r3, [r7, #10]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4907      	ldr	r1, [pc, #28]	@ (8003454 <I2C_MasterRequestWrite+0x100>)
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f888 	bl	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	00010008 	.word	0x00010008
 8003454:	00010002 	.word	0x00010002

08003458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	4613      	mov	r3, r2
 8003466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003468:	e048      	b.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d044      	beq.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7fe fd9f 	bl	8001fb4 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d139      	bne.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	0c1b      	lsrs	r3, r3, #16
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10d      	bne.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	43da      	mvns	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4013      	ands	r3, r2
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	e00c      	b.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	43da      	mvns	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4013      	ands	r3, r2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf0c      	ite	eq
 80034c0:	2301      	moveq	r3, #1
 80034c2:	2300      	movne	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d116      	bne.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e023      	b.n	8003544 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d10d      	bne.n	8003522 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	43da      	mvns	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4013      	ands	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	e00c      	b.n	800353c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	429a      	cmp	r2, r3
 8003540:	d093      	beq.n	800346a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800355a:	e071      	b.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800356a:	d123      	bne.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003584:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	f043 0204 	orr.w	r2, r3, #4
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e067      	b.n	8003684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d041      	beq.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035bc:	f7fe fcfa 	bl	8001fb4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d302      	bcc.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d136      	bne.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d10c      	bne.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4013      	ands	r3, r2
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e00b      	b.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	f043 0220 	orr.w	r2, r3, #32
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e021      	b.n	8003684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d10c      	bne.n	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	43da      	mvns	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e00b      	b.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	43da      	mvns	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4013      	ands	r3, r2
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	f47f af6d 	bne.w	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003698:	e034      	b.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f886 	bl	80037ac <I2C_IsAcknowledgeFailed>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e034      	b.n	8003714 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d028      	beq.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fe fc7f 	bl	8001fb4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d11d      	bne.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d2:	2b80      	cmp	r3, #128	@ 0x80
 80036d4:	d016      	beq.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e007      	b.n	8003714 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370e:	2b80      	cmp	r3, #128	@ 0x80
 8003710:	d1c3      	bne.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003728:	e034      	b.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f83e 	bl	80037ac <I2C_IsAcknowledgeFailed>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e034      	b.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d028      	beq.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7fe fc37 	bl	8001fb4 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d11d      	bne.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b04      	cmp	r3, #4
 8003764:	d016      	beq.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e007      	b.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d1c3      	bne.n	800372a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c2:	d11b      	bne.n	80037fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	f043 0204 	orr.w	r2, r3, #4
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e272      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8087 	beq.w	8003936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003828:	4b92      	ldr	r3, [pc, #584]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b04      	cmp	r3, #4
 8003832:	d00c      	beq.n	800384e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003834:	4b8f      	ldr	r3, [pc, #572]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b08      	cmp	r3, #8
 800383e:	d112      	bne.n	8003866 <HAL_RCC_OscConfig+0x5e>
 8003840:	4b8c      	ldr	r3, [pc, #560]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800384c:	d10b      	bne.n	8003866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384e:	4b89      	ldr	r3, [pc, #548]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d06c      	beq.n	8003934 <HAL_RCC_OscConfig+0x12c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d168      	bne.n	8003934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e24c      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800386e:	d106      	bne.n	800387e <HAL_RCC_OscConfig+0x76>
 8003870:	4b80      	ldr	r3, [pc, #512]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a7f      	ldr	r2, [pc, #508]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	e02e      	b.n	80038dc <HAL_RCC_OscConfig+0xd4>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x98>
 8003886:	4b7b      	ldr	r3, [pc, #492]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7a      	ldr	r2, [pc, #488]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b78      	ldr	r3, [pc, #480]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a77      	ldr	r2, [pc, #476]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003898:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e01d      	b.n	80038dc <HAL_RCC_OscConfig+0xd4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0xbc>
 80038aa:	4b72      	ldr	r3, [pc, #456]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a71      	ldr	r2, [pc, #452]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e00b      	b.n	80038dc <HAL_RCC_OscConfig+0xd4>
 80038c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b68      	ldr	r3, [pc, #416]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a67      	ldr	r2, [pc, #412]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d013      	beq.n	800390c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fe fb66 	bl	8001fb4 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fe fb62 	bl	8001fb4 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	@ 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e200      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0xe4>
 800390a:	e014      	b.n	8003936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fe fb52 	bl	8001fb4 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7fe fb4e 	bl	8001fb4 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	@ 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e1ec      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	4b53      	ldr	r3, [pc, #332]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x10c>
 8003932:	e000      	b.n	8003936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d063      	beq.n	8003a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003942:	4b4c      	ldr	r3, [pc, #304]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800394e:	4b49      	ldr	r3, [pc, #292]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b08      	cmp	r3, #8
 8003958:	d11c      	bne.n	8003994 <HAL_RCC_OscConfig+0x18c>
 800395a:	4b46      	ldr	r3, [pc, #280]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d116      	bne.n	8003994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003966:	4b43      	ldr	r3, [pc, #268]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_RCC_OscConfig+0x176>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e1c0      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4939      	ldr	r1, [pc, #228]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	e03a      	b.n	8003a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d020      	beq.n	80039de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399c:	4b36      	ldr	r3, [pc, #216]	@ (8003a78 <HAL_RCC_OscConfig+0x270>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a2:	f7fe fb07 	bl	8001fb4 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039aa:	f7fe fb03 	bl	8001fb4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e1a1      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4927      	ldr	r1, [pc, #156]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
 80039dc:	e015      	b.n	8003a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039de:	4b26      	ldr	r3, [pc, #152]	@ (8003a78 <HAL_RCC_OscConfig+0x270>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fe fae6 	bl	8001fb4 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ec:	f7fe fae2 	bl	8001fb4 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e180      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d03a      	beq.n	8003a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d019      	beq.n	8003a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1e:	4b17      	ldr	r3, [pc, #92]	@ (8003a7c <HAL_RCC_OscConfig+0x274>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a24:	f7fe fac6 	bl	8001fb4 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2c:	f7fe fac2 	bl	8001fb4 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e160      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	f000 face 	bl	8003fec <RCC_Delay>
 8003a50:	e01c      	b.n	8003a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a52:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <HAL_RCC_OscConfig+0x274>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a58:	f7fe faac 	bl	8001fb4 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5e:	e00f      	b.n	8003a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a60:	f7fe faa8 	bl	8001fb4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d908      	bls.n	8003a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e146      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000
 8003a78:	42420000 	.word	0x42420000
 8003a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	4b92      	ldr	r3, [pc, #584]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e9      	bne.n	8003a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a6 	beq.w	8003be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10d      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aaa:	4b88      	ldr	r3, [pc, #544]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4a87      	ldr	r2, [pc, #540]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	61d3      	str	r3, [r2, #28]
 8003ab6:	4b85      	ldr	r3, [pc, #532]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac6:	4b82      	ldr	r3, [pc, #520]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d118      	bne.n	8003b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a7e      	ldr	r2, [pc, #504]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c8>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ade:	f7fe fa69 	bl	8001fb4 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae6:	f7fe fa65 	bl	8001fb4 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b64      	cmp	r3, #100	@ 0x64
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e103      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	4b75      	ldr	r3, [pc, #468]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_OscConfig+0x312>
 8003b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4a6e      	ldr	r2, [pc, #440]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6213      	str	r3, [r2, #32]
 8003b18:	e02d      	b.n	8003b76 <HAL_RCC_OscConfig+0x36e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x334>
 8003b22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	4a69      	ldr	r2, [pc, #420]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6213      	str	r3, [r2, #32]
 8003b2e:	4b67      	ldr	r3, [pc, #412]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4a66      	ldr	r2, [pc, #408]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6213      	str	r3, [r2, #32]
 8003b3a:	e01c      	b.n	8003b76 <HAL_RCC_OscConfig+0x36e>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b05      	cmp	r3, #5
 8003b42:	d10c      	bne.n	8003b5e <HAL_RCC_OscConfig+0x356>
 8003b44:	4b61      	ldr	r3, [pc, #388]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4a60      	ldr	r2, [pc, #384]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	f043 0304 	orr.w	r3, r3, #4
 8003b4e:	6213      	str	r3, [r2, #32]
 8003b50:	4b5e      	ldr	r3, [pc, #376]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4a5d      	ldr	r2, [pc, #372]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6213      	str	r3, [r2, #32]
 8003b5c:	e00b      	b.n	8003b76 <HAL_RCC_OscConfig+0x36e>
 8003b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4a5a      	ldr	r2, [pc, #360]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	6213      	str	r3, [r2, #32]
 8003b6a:	4b58      	ldr	r3, [pc, #352]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	4a57      	ldr	r2, [pc, #348]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	f023 0304 	bic.w	r3, r3, #4
 8003b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d015      	beq.n	8003baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7e:	f7fe fa19 	bl	8001fb4 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b84:	e00a      	b.n	8003b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f7fe fa15 	bl	8001fb4 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e0b1      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ee      	beq.n	8003b86 <HAL_RCC_OscConfig+0x37e>
 8003ba8:	e014      	b.n	8003bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003baa:	f7fe fa03 	bl	8001fb4 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fe f9ff 	bl	8001fb4 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e09b      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc8:	4b40      	ldr	r3, [pc, #256]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1ee      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bda:	4b3c      	ldr	r3, [pc, #240]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	4a3b      	ldr	r2, [pc, #236]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8087 	beq.w	8003cfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf0:	4b36      	ldr	r3, [pc, #216]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d061      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d146      	bne.n	8003c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c04:	4b33      	ldr	r3, [pc, #204]	@ (8003cd4 <HAL_RCC_OscConfig+0x4cc>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7fe f9d3 	bl	8001fb4 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c12:	f7fe f9cf 	bl	8001fb4 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e06d      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c24:	4b29      	ldr	r3, [pc, #164]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c38:	d108      	bne.n	8003c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c3a:	4b24      	ldr	r3, [pc, #144]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	4921      	ldr	r1, [pc, #132]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a19      	ldr	r1, [r3, #32]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	491b      	ldr	r1, [pc, #108]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c64:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd4 <HAL_RCC_OscConfig+0x4cc>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7fe f9a3 	bl	8001fb4 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fe f99f 	bl	8001fb4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e03d      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c84:	4b11      	ldr	r3, [pc, #68]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x46a>
 8003c90:	e035      	b.n	8003cfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c92:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <HAL_RCC_OscConfig+0x4cc>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fe f98c 	bl	8001fb4 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca0:	f7fe f988 	bl	8001fb4 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e026      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb2:	4b06      	ldr	r3, [pc, #24]	@ (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x498>
 8003cbe:	e01e      	b.n	8003cfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e019      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
 8003cd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <HAL_RCC_OscConfig+0x500>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d106      	bne.n	8003cfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000

08003d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0d0      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d20:	4b6a      	ldr	r3, [pc, #424]	@ (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d910      	bls.n	8003d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2e:	4b67      	ldr	r3, [pc, #412]	@ (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 0207 	bic.w	r2, r3, #7
 8003d36:	4965      	ldr	r1, [pc, #404]	@ (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b63      	ldr	r3, [pc, #396]	@ (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0b8      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d020      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d68:	4b59      	ldr	r3, [pc, #356]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4a58      	ldr	r2, [pc, #352]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d80:	4b53      	ldr	r3, [pc, #332]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4a52      	ldr	r2, [pc, #328]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8c:	4b50      	ldr	r3, [pc, #320]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	494d      	ldr	r1, [pc, #308]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d040      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	4b47      	ldr	r3, [pc, #284]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d115      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e07f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dca:	4b41      	ldr	r3, [pc, #260]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e073      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dda:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e06b      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dea:	4b39      	ldr	r3, [pc, #228]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f023 0203 	bic.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4936      	ldr	r1, [pc, #216]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dfc:	f7fe f8da 	bl	8001fb4 <HAL_GetTick>
 8003e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e04:	f7fe f8d6 	bl	8001fb4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e053      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 020c 	and.w	r2, r3, #12
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1eb      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b27      	ldr	r3, [pc, #156]	@ (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d210      	bcs.n	8003e5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b24      	ldr	r3, [pc, #144]	@ (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 0207 	bic.w	r2, r3, #7
 8003e42:	4922      	ldr	r1, [pc, #136]	@ (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b20      	ldr	r3, [pc, #128]	@ (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e032      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e68:	4b19      	ldr	r3, [pc, #100]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4916      	ldr	r1, [pc, #88]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e86:	4b12      	ldr	r3, [pc, #72]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	490e      	ldr	r1, [pc, #56]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e9a:	f000 f821 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	490a      	ldr	r1, [pc, #40]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eac:	5ccb      	ldrb	r3, [r1, r3]
 8003eae:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb2:	4a09      	ldr	r2, [pc, #36]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8003eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eb6:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <HAL_RCC_ClockConfig+0x1d0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe f838 	bl	8001f30 <HAL_InitTick>

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40022000 	.word	0x40022000
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	0800879c 	.word	0x0800879c
 8003ed8:	20000000 	.word	0x20000000
 8003edc:	20000004 	.word	0x20000004

08003ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003efa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d002      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x30>
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x36>
 8003f0e:	e027      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f10:	4b19      	ldr	r3, [pc, #100]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f12:	613b      	str	r3, [r7, #16]
      break;
 8003f14:	e027      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	0c9b      	lsrs	r3, r3, #18
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	4a17      	ldr	r2, [pc, #92]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f20:	5cd3      	ldrb	r3, [r2, r3]
 8003f22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d010      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f2e:	4b11      	ldr	r3, [pc, #68]	@ (8003f74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	0c5b      	lsrs	r3, r3, #17
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	4a11      	ldr	r2, [pc, #68]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f3a:	5cd3      	ldrb	r3, [r2, r3]
 8003f3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a0d      	ldr	r2, [pc, #52]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f42:	fb03 f202 	mul.w	r2, r3, r2
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	e004      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a0c      	ldr	r2, [pc, #48]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f54:	fb02 f303 	mul.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	613b      	str	r3, [r7, #16]
      break;
 8003f5e:	e002      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f60:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f62:	613b      	str	r3, [r7, #16]
      break;
 8003f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f66:	693b      	ldr	r3, [r7, #16]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40021000 	.word	0x40021000
 8003f78:	007a1200 	.word	0x007a1200
 8003f7c:	080087b4 	.word	0x080087b4
 8003f80:	080087c4 	.word	0x080087c4
 8003f84:	003d0900 	.word	0x003d0900

08003f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f8c:	4b02      	ldr	r3, [pc, #8]	@ (8003f98 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr
 8003f98:	20000000 	.word	0x20000000

08003f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fa0:	f7ff fff2 	bl	8003f88 <HAL_RCC_GetHCLKFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b05      	ldr	r3, [pc, #20]	@ (8003fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	0a1b      	lsrs	r3, r3, #8
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	4903      	ldr	r1, [pc, #12]	@ (8003fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	080087ac 	.word	0x080087ac

08003fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fc8:	f7ff ffde 	bl	8003f88 <HAL_RCC_GetHCLKFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b05      	ldr	r3, [pc, #20]	@ (8003fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	0adb      	lsrs	r3, r3, #11
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	4903      	ldr	r1, [pc, #12]	@ (8003fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	080087ac 	.word	0x080087ac

08003fec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <RCC_Delay+0x34>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8004024 <RCC_Delay+0x38>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	0a5b      	lsrs	r3, r3, #9
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004008:	bf00      	nop
  }
  while (Delay --);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1e5a      	subs	r2, r3, #1
 800400e:	60fa      	str	r2, [r7, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f9      	bne.n	8004008 <RCC_Delay+0x1c>
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	20000000 	.word	0x20000000
 8004024:	10624dd3 	.word	0x10624dd3

08004028 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d07d      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004044:	2300      	movs	r3, #0
 8004046:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004048:	4b4f      	ldr	r3, [pc, #316]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10d      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004054:	4b4c      	ldr	r3, [pc, #304]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	4a4b      	ldr	r2, [pc, #300]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800405e:	61d3      	str	r3, [r2, #28]
 8004060:	4b49      	ldr	r3, [pc, #292]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406c:	2301      	movs	r3, #1
 800406e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004070:	4b46      	ldr	r3, [pc, #280]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d118      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407c:	4b43      	ldr	r3, [pc, #268]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a42      	ldr	r2, [pc, #264]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004086:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004088:	f7fd ff94 	bl	8001fb4 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408e:	e008      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004090:	f7fd ff90 	bl	8001fb4 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	@ 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e06d      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4b3a      	ldr	r3, [pc, #232]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ae:	4b36      	ldr	r3, [pc, #216]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d02e      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d027      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040d8:	2201      	movs	r2, #1
 80040da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040e2:	4a29      	ldr	r2, [pc, #164]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d014      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f2:	f7fd ff5f 	bl	8001fb4 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f8:	e00a      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f7fd ff5b 	bl	8001fb4 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004108:	4293      	cmp	r3, r2
 800410a:	d901      	bls.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e036      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004110:	4b1d      	ldr	r3, [pc, #116]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0ee      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800411c:	4b1a      	ldr	r3, [pc, #104]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	4917      	ldr	r1, [pc, #92]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	4313      	orrs	r3, r2
 800412c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800412e:	7dfb      	ldrb	r3, [r7, #23]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d105      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004134:	4b14      	ldr	r3, [pc, #80]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	4a13      	ldr	r2, [pc, #76]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800413e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800414c:	4b0e      	ldr	r3, [pc, #56]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	490b      	ldr	r1, [pc, #44]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415a:	4313      	orrs	r3, r2
 800415c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800416a:	4b07      	ldr	r3, [pc, #28]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	4904      	ldr	r1, [pc, #16]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
 800418c:	40007000 	.word	0x40007000
 8004190:	42420440 	.word	0x42420440

08004194 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	f200 808a 	bhi.w	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d045      	beq.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d075      	beq.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80041ca:	e082      	b.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80041cc:	4b46      	ldr	r3, [pc, #280]	@ (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80041d2:	4b45      	ldr	r3, [pc, #276]	@ (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d07b      	beq.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	0c9b      	lsrs	r3, r3, #18
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	4a41      	ldr	r2, [pc, #260]	@ (80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80041e8:	5cd3      	ldrb	r3, [r2, r3]
 80041ea:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d015      	beq.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041f6:	4b3c      	ldr	r3, [pc, #240]	@ (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	0c5b      	lsrs	r3, r3, #17
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	4a3b      	ldr	r2, [pc, #236]	@ (80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004202:	5cd3      	ldrb	r3, [r2, r3]
 8004204:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00d      	beq.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004210:	4a38      	ldr	r2, [pc, #224]	@ (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	fbb2 f2f3 	udiv	r2, r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	e004      	b.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4a34      	ldr	r2, [pc, #208]	@ (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800422c:	4b2e      	ldr	r3, [pc, #184]	@ (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004238:	d102      	bne.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	61bb      	str	r3, [r7, #24]
      break;
 800423e:	e04a      	b.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	4a2d      	ldr	r2, [pc, #180]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	085b      	lsrs	r3, r3, #1
 800424c:	61bb      	str	r3, [r7, #24]
      break;
 800424e:	e042      	b.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004250:	4b25      	ldr	r3, [pc, #148]	@ (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800425c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004260:	d108      	bne.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800426c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	e01f      	b.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800427a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800427e:	d109      	bne.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004280:	4b19      	ldr	r3, [pc, #100]	@ (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800428c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	e00f      	b.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800429a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800429e:	d11c      	bne.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80042a0:	4b11      	ldr	r3, [pc, #68]	@ (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d016      	beq.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80042ac:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80042b0:	61bb      	str	r3, [r7, #24]
      break;
 80042b2:	e012      	b.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80042b4:	e011      	b.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80042b6:	f7ff fe85 	bl	8003fc4 <HAL_RCC_GetPCLK2Freq>
 80042ba:	4602      	mov	r2, r0
 80042bc:	4b0a      	ldr	r3, [pc, #40]	@ (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	0b9b      	lsrs	r3, r3, #14
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	3301      	adds	r3, #1
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	61bb      	str	r3, [r7, #24]
      break;
 80042d0:	e004      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80042da:	bf00      	nop
    }
  }
  return (frequency);
 80042dc:	69bb      	ldr	r3, [r7, #24]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000
 80042ec:	080087c8 	.word	0x080087c8
 80042f0:	080087d8 	.word	0x080087d8
 80042f4:	007a1200 	.word	0x007a1200
 80042f8:	003d0900 	.word	0x003d0900
 80042fc:	aaaaaaab 	.word	0xaaaaaaab

08004300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e041      	b.n	8004396 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd fd1e 	bl	8001d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	4619      	mov	r1, r3
 800433e:	4610      	mov	r0, r2
 8004340:	f000 fd48 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d001      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e03a      	b.n	800442e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a18      	ldr	r2, [pc, #96]	@ (8004438 <HAL_TIM_Base_Start_IT+0x98>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00e      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x58>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043e2:	d009      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x58>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a14      	ldr	r2, [pc, #80]	@ (800443c <HAL_TIM_Base_Start_IT+0x9c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x58>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a13      	ldr	r2, [pc, #76]	@ (8004440 <HAL_TIM_Base_Start_IT+0xa0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d111      	bne.n	800441c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b06      	cmp	r3, #6
 8004408:	d010      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0201 	orr.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441a:	e007      	b.n	800442c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800

08004444 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e041      	b.n	80044da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f839 	bl	80044e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4610      	mov	r0, r2
 8004484:	f000 fca6 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_TIM_PWM_Start+0x24>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	bf14      	ite	ne
 8004510:	2301      	movne	r3, #1
 8004512:	2300      	moveq	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	e022      	b.n	800455e <HAL_TIM_PWM_Start+0x6a>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b04      	cmp	r3, #4
 800451c:	d109      	bne.n	8004532 <HAL_TIM_PWM_Start+0x3e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	bf14      	ite	ne
 800452a:	2301      	movne	r3, #1
 800452c:	2300      	moveq	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	e015      	b.n	800455e <HAL_TIM_PWM_Start+0x6a>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d109      	bne.n	800454c <HAL_TIM_PWM_Start+0x58>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	bf14      	ite	ne
 8004544:	2301      	movne	r3, #1
 8004546:	2300      	moveq	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	e008      	b.n	800455e <HAL_TIM_PWM_Start+0x6a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e05e      	b.n	8004624 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d104      	bne.n	8004576 <HAL_TIM_PWM_Start+0x82>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004574:	e013      	b.n	800459e <HAL_TIM_PWM_Start+0xaa>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b04      	cmp	r3, #4
 800457a:	d104      	bne.n	8004586 <HAL_TIM_PWM_Start+0x92>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004584:	e00b      	b.n	800459e <HAL_TIM_PWM_Start+0xaa>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b08      	cmp	r3, #8
 800458a:	d104      	bne.n	8004596 <HAL_TIM_PWM_Start+0xa2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004594:	e003      	b.n	800459e <HAL_TIM_PWM_Start+0xaa>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2201      	movs	r2, #1
 80045a4:	6839      	ldr	r1, [r7, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fea0 	bl	80052ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1e      	ldr	r2, [pc, #120]	@ (800462c <HAL_TIM_PWM_Start+0x138>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d107      	bne.n	80045c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a18      	ldr	r2, [pc, #96]	@ (800462c <HAL_TIM_PWM_Start+0x138>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00e      	beq.n	80045ee <HAL_TIM_PWM_Start+0xfa>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d8:	d009      	beq.n	80045ee <HAL_TIM_PWM_Start+0xfa>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a14      	ldr	r2, [pc, #80]	@ (8004630 <HAL_TIM_PWM_Start+0x13c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d004      	beq.n	80045ee <HAL_TIM_PWM_Start+0xfa>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a12      	ldr	r2, [pc, #72]	@ (8004634 <HAL_TIM_PWM_Start+0x140>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d111      	bne.n	8004612 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b06      	cmp	r3, #6
 80045fe:	d010      	beq.n	8004622 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004610:	e007      	b.n	8004622 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0201 	orr.w	r2, r2, #1
 8004620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40012c00 	.word	0x40012c00
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800

08004638 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e093      	b.n	8004774 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fd fbb9 	bl	8001dd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2202      	movs	r2, #2
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800467c:	f023 0307 	bic.w	r3, r3, #7
 8004680:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f000 fba1 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	4313      	orrs	r3, r2
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80046d8:	f023 030c 	bic.w	r3, r3, #12
 80046dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	4313      	orrs	r3, r2
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	011a      	lsls	r2, r3, #4
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	031b      	lsls	r3, r3, #12
 8004708:	4313      	orrs	r3, r2
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004716:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	4313      	orrs	r3, r2
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800478c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004794:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800479c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d110      	bne.n	80047ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d102      	bne.n	80047b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80047b2:	7b7b      	ldrb	r3, [r7, #13]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d001      	beq.n	80047bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e069      	b.n	8004890 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047cc:	e031      	b.n	8004832 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d110      	bne.n	80047f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047d4:	7bbb      	ldrb	r3, [r7, #14]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d102      	bne.n	80047e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047da:	7b3b      	ldrb	r3, [r7, #12]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d001      	beq.n	80047e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e055      	b.n	8004890 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047f4:	e01d      	b.n	8004832 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d108      	bne.n	800480e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047fc:	7bbb      	ldrb	r3, [r7, #14]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d105      	bne.n	800480e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004802:	7b7b      	ldrb	r3, [r7, #13]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d102      	bne.n	800480e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004808:	7b3b      	ldrb	r3, [r7, #12]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d001      	beq.n	8004812 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e03e      	b.n	8004890 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2202      	movs	r2, #2
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2202      	movs	r2, #2
 800481e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_TIM_Encoder_Start+0xc4>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b04      	cmp	r3, #4
 800483c:	d008      	beq.n	8004850 <HAL_TIM_Encoder_Start+0xd4>
 800483e:	e00f      	b.n	8004860 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2201      	movs	r2, #1
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fd4f 	bl	80052ec <TIM_CCxChannelCmd>
      break;
 800484e:	e016      	b.n	800487e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2201      	movs	r2, #1
 8004856:	2104      	movs	r1, #4
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fd47 	bl	80052ec <TIM_CCxChannelCmd>
      break;
 800485e:	e00e      	b.n	800487e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2201      	movs	r2, #1
 8004866:	2100      	movs	r1, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fd3f 	bl	80052ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2201      	movs	r2, #1
 8004874:	2104      	movs	r1, #4
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fd38 	bl	80052ec <TIM_CCxChannelCmd>
      break;
 800487c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d020      	beq.n	80048fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01b      	beq.n	80048fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0202 	mvn.w	r2, #2
 80048cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fa5a 	bl	8004d9c <HAL_TIM_IC_CaptureCallback>
 80048e8:	e005      	b.n	80048f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fa4d 	bl	8004d8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fa5c 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b00      	cmp	r3, #0
 8004904:	d020      	beq.n	8004948 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01b      	beq.n	8004948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0204 	mvn.w	r2, #4
 8004918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fa34 	bl	8004d9c <HAL_TIM_IC_CaptureCallback>
 8004934:	e005      	b.n	8004942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa27 	bl	8004d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fa36 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d020      	beq.n	8004994 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01b      	beq.n	8004994 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0208 	mvn.w	r2, #8
 8004964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2204      	movs	r2, #4
 800496a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa0e 	bl	8004d9c <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fa01 	bl	8004d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fa10 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b00      	cmp	r3, #0
 800499c:	d020      	beq.n	80049e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01b      	beq.n	80049e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0210 	mvn.w	r2, #16
 80049b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2208      	movs	r2, #8
 80049b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f9e8 	bl	8004d9c <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f9db 	bl	8004d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f9ea 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00c      	beq.n	8004a04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0201 	mvn.w	r2, #1
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fc fad0 	bl	8000fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00c      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d007      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fced 	bl	8005402 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00c      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f9ba 	bl	8004dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00c      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0220 	mvn.w	r2, #32
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fcc0 	bl	80053f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e0ae      	b.n	8004bf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b0c      	cmp	r3, #12
 8004aa2:	f200 809f 	bhi.w	8004be4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8004aac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aac:	08004ae1 	.word	0x08004ae1
 8004ab0:	08004be5 	.word	0x08004be5
 8004ab4:	08004be5 	.word	0x08004be5
 8004ab8:	08004be5 	.word	0x08004be5
 8004abc:	08004b21 	.word	0x08004b21
 8004ac0:	08004be5 	.word	0x08004be5
 8004ac4:	08004be5 	.word	0x08004be5
 8004ac8:	08004be5 	.word	0x08004be5
 8004acc:	08004b63 	.word	0x08004b63
 8004ad0:	08004be5 	.word	0x08004be5
 8004ad4:	08004be5 	.word	0x08004be5
 8004ad8:	08004be5 	.word	0x08004be5
 8004adc:	08004ba3 	.word	0x08004ba3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f9e2 	bl	8004eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0208 	orr.w	r2, r2, #8
 8004afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0204 	bic.w	r2, r2, #4
 8004b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6999      	ldr	r1, [r3, #24]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	619a      	str	r2, [r3, #24]
      break;
 8004b1e:	e064      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fa28 	bl	8004f7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6999      	ldr	r1, [r3, #24]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	021a      	lsls	r2, r3, #8
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	619a      	str	r2, [r3, #24]
      break;
 8004b60:	e043      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fa71 	bl	8005050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69da      	ldr	r2, [r3, #28]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0208 	orr.w	r2, r2, #8
 8004b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0204 	bic.w	r2, r2, #4
 8004b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69d9      	ldr	r1, [r3, #28]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	61da      	str	r2, [r3, #28]
      break;
 8004ba0:	e023      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fabb 	bl	8005124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69d9      	ldr	r1, [r3, #28]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	021a      	lsls	r2, r3, #8
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	61da      	str	r2, [r3, #28]
      break;
 8004be2:	e002      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
      break;
 8004be8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_TIM_ConfigClockSource+0x1c>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e0b4      	b.n	8004d82 <HAL_TIM_ConfigClockSource+0x186>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c50:	d03e      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0xd4>
 8004c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c56:	f200 8087 	bhi.w	8004d68 <HAL_TIM_ConfigClockSource+0x16c>
 8004c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c5e:	f000 8086 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x172>
 8004c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c66:	d87f      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b70      	cmp	r3, #112	@ 0x70
 8004c6a:	d01a      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0xa6>
 8004c6c:	2b70      	cmp	r3, #112	@ 0x70
 8004c6e:	d87b      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b60      	cmp	r3, #96	@ 0x60
 8004c72:	d050      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x11a>
 8004c74:	2b60      	cmp	r3, #96	@ 0x60
 8004c76:	d877      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b50      	cmp	r3, #80	@ 0x50
 8004c7a:	d03c      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c7c:	2b50      	cmp	r3, #80	@ 0x50
 8004c7e:	d873      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b40      	cmp	r3, #64	@ 0x40
 8004c82:	d058      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x13a>
 8004c84:	2b40      	cmp	r3, #64	@ 0x40
 8004c86:	d86f      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b30      	cmp	r3, #48	@ 0x30
 8004c8a:	d064      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	2b30      	cmp	r3, #48	@ 0x30
 8004c8e:	d86b      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d060      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x15a>
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d867      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d05c      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x15a>
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d05a      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca0:	e062      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cb2:	f000 fafc 	bl	80052ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	609a      	str	r2, [r3, #8]
      break;
 8004cce:	e04f      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ce0:	f000 fae5 	bl	80052ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cf2:	609a      	str	r2, [r3, #8]
      break;
 8004cf4:	e03c      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d02:	461a      	mov	r2, r3
 8004d04:	f000 fa5c 	bl	80051c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2150      	movs	r1, #80	@ 0x50
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fab3 	bl	800527a <TIM_ITRx_SetConfig>
      break;
 8004d14:	e02c      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d22:	461a      	mov	r2, r3
 8004d24:	f000 fa7a 	bl	800521c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2160      	movs	r1, #96	@ 0x60
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 faa3 	bl	800527a <TIM_ITRx_SetConfig>
      break;
 8004d34:	e01c      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d42:	461a      	mov	r2, r3
 8004d44:	f000 fa3c 	bl	80051c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2140      	movs	r1, #64	@ 0x40
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fa93 	bl	800527a <TIM_ITRx_SetConfig>
      break;
 8004d54:	e00c      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f000 fa8a 	bl	800527a <TIM_ITRx_SetConfig>
      break;
 8004d66:	e003      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d6c:	e000      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr

08004dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr
	...

08004dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a2f      	ldr	r2, [pc, #188]	@ (8004ea4 <TIM_Base_SetConfig+0xd0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <TIM_Base_SetConfig+0x30>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0x30>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea8 <TIM_Base_SetConfig+0xd4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0x30>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a2b      	ldr	r2, [pc, #172]	@ (8004eac <TIM_Base_SetConfig+0xd8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d108      	bne.n	8004e16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a22      	ldr	r2, [pc, #136]	@ (8004ea4 <TIM_Base_SetConfig+0xd0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00b      	beq.n	8004e36 <TIM_Base_SetConfig+0x62>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e24:	d007      	beq.n	8004e36 <TIM_Base_SetConfig+0x62>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea8 <TIM_Base_SetConfig+0xd4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d003      	beq.n	8004e36 <TIM_Base_SetConfig+0x62>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1e      	ldr	r2, [pc, #120]	@ (8004eac <TIM_Base_SetConfig+0xd8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d108      	bne.n	8004e48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a0d      	ldr	r2, [pc, #52]	@ (8004ea4 <TIM_Base_SetConfig+0xd0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d103      	bne.n	8004e7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f023 0201 	bic.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	611a      	str	r2, [r3, #16]
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	40012c00 	.word	0x40012c00
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40000800 	.word	0x40000800

08004eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f023 0201 	bic.w	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0303 	bic.w	r3, r3, #3
 8004ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 0302 	bic.w	r3, r3, #2
 8004ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a1c      	ldr	r2, [pc, #112]	@ (8004f78 <TIM_OC1_SetConfig+0xc8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d10c      	bne.n	8004f26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f023 0308 	bic.w	r3, r3, #8
 8004f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 0304 	bic.w	r3, r3, #4
 8004f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a13      	ldr	r2, [pc, #76]	@ (8004f78 <TIM_OC1_SetConfig+0xc8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d111      	bne.n	8004f52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	621a      	str	r2, [r3, #32]
}
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40012c00 	.word	0x40012c00

08004f7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	f023 0210 	bic.w	r2, r3, #16
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0320 	bic.w	r3, r3, #32
 8004fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800504c <TIM_OC2_SetConfig+0xd0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d10d      	bne.n	8004ff8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a14      	ldr	r2, [pc, #80]	@ (800504c <TIM_OC2_SetConfig+0xd0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d113      	bne.n	8005028 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800500e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	621a      	str	r2, [r3, #32]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	40012c00 	.word	0x40012c00

08005050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005120 <TIM_OC3_SetConfig+0xd0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d10d      	bne.n	80050ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a14      	ldr	r2, [pc, #80]	@ (8005120 <TIM_OC3_SetConfig+0xd0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d113      	bne.n	80050fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	621a      	str	r2, [r3, #32]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40012c00 	.word	0x40012c00

08005124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800515a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800516e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	031b      	lsls	r3, r3, #12
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a0f      	ldr	r2, [pc, #60]	@ (80051bc <TIM_OC4_SetConfig+0x98>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d109      	bne.n	8005198 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800518a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	019b      	lsls	r3, r3, #6
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	621a      	str	r2, [r3, #32]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	40012c00 	.word	0x40012c00

080051c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 030a 	bic.w	r3, r3, #10
 80051fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f023 0210 	bic.w	r2, r3, #16
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	031b      	lsls	r3, r3, #12
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005258:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	621a      	str	r2, [r3, #32]
}
 8005270:	bf00      	nop
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr

0800527a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	f043 0307 	orr.w	r3, r3, #7
 800529c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	609a      	str	r2, [r3, #8]
}
 80052a4:	bf00      	nop
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr

080052ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b087      	sub	sp, #28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	021a      	lsls	r2, r3, #8
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	609a      	str	r2, [r3, #8]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr

080052ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2201      	movs	r2, #1
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a1a      	ldr	r2, [r3, #32]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	43db      	mvns	r3, r3
 800530e:	401a      	ands	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a1a      	ldr	r2, [r3, #32]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	fa01 f303 	lsl.w	r3, r1, r3
 8005324:	431a      	orrs	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr

08005334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005348:	2302      	movs	r3, #2
 800534a:	e046      	b.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a16      	ldr	r2, [pc, #88]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00e      	beq.n	80053ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005398:	d009      	beq.n	80053ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a12      	ldr	r2, [pc, #72]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d004      	beq.n	80053ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a10      	ldr	r2, [pc, #64]	@ (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d10c      	bne.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800

080053f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr

08005414 <__cvt>:
 8005414:	2b00      	cmp	r3, #0
 8005416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800541a:	461d      	mov	r5, r3
 800541c:	bfbb      	ittet	lt
 800541e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005422:	461d      	movlt	r5, r3
 8005424:	2300      	movge	r3, #0
 8005426:	232d      	movlt	r3, #45	@ 0x2d
 8005428:	b088      	sub	sp, #32
 800542a:	4614      	mov	r4, r2
 800542c:	bfb8      	it	lt
 800542e:	4614      	movlt	r4, r2
 8005430:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005432:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005434:	7013      	strb	r3, [r2, #0]
 8005436:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005438:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800543c:	f023 0820 	bic.w	r8, r3, #32
 8005440:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005444:	d005      	beq.n	8005452 <__cvt+0x3e>
 8005446:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800544a:	d100      	bne.n	800544e <__cvt+0x3a>
 800544c:	3601      	adds	r6, #1
 800544e:	2302      	movs	r3, #2
 8005450:	e000      	b.n	8005454 <__cvt+0x40>
 8005452:	2303      	movs	r3, #3
 8005454:	aa07      	add	r2, sp, #28
 8005456:	9204      	str	r2, [sp, #16]
 8005458:	aa06      	add	r2, sp, #24
 800545a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800545e:	e9cd 3600 	strd	r3, r6, [sp]
 8005462:	4622      	mov	r2, r4
 8005464:	462b      	mov	r3, r5
 8005466:	f000 fe8b 	bl	8006180 <_dtoa_r>
 800546a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800546e:	4607      	mov	r7, r0
 8005470:	d119      	bne.n	80054a6 <__cvt+0x92>
 8005472:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005474:	07db      	lsls	r3, r3, #31
 8005476:	d50e      	bpl.n	8005496 <__cvt+0x82>
 8005478:	eb00 0906 	add.w	r9, r0, r6
 800547c:	2200      	movs	r2, #0
 800547e:	2300      	movs	r3, #0
 8005480:	4620      	mov	r0, r4
 8005482:	4629      	mov	r1, r5
 8005484:	f7fb fa90 	bl	80009a8 <__aeabi_dcmpeq>
 8005488:	b108      	cbz	r0, 800548e <__cvt+0x7a>
 800548a:	f8cd 901c 	str.w	r9, [sp, #28]
 800548e:	2230      	movs	r2, #48	@ 0x30
 8005490:	9b07      	ldr	r3, [sp, #28]
 8005492:	454b      	cmp	r3, r9
 8005494:	d31e      	bcc.n	80054d4 <__cvt+0xc0>
 8005496:	4638      	mov	r0, r7
 8005498:	9b07      	ldr	r3, [sp, #28]
 800549a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800549c:	1bdb      	subs	r3, r3, r7
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	b008      	add	sp, #32
 80054a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054aa:	eb00 0906 	add.w	r9, r0, r6
 80054ae:	d1e5      	bne.n	800547c <__cvt+0x68>
 80054b0:	7803      	ldrb	r3, [r0, #0]
 80054b2:	2b30      	cmp	r3, #48	@ 0x30
 80054b4:	d10a      	bne.n	80054cc <__cvt+0xb8>
 80054b6:	2200      	movs	r2, #0
 80054b8:	2300      	movs	r3, #0
 80054ba:	4620      	mov	r0, r4
 80054bc:	4629      	mov	r1, r5
 80054be:	f7fb fa73 	bl	80009a8 <__aeabi_dcmpeq>
 80054c2:	b918      	cbnz	r0, 80054cc <__cvt+0xb8>
 80054c4:	f1c6 0601 	rsb	r6, r6, #1
 80054c8:	f8ca 6000 	str.w	r6, [sl]
 80054cc:	f8da 3000 	ldr.w	r3, [sl]
 80054d0:	4499      	add	r9, r3
 80054d2:	e7d3      	b.n	800547c <__cvt+0x68>
 80054d4:	1c59      	adds	r1, r3, #1
 80054d6:	9107      	str	r1, [sp, #28]
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e7d9      	b.n	8005490 <__cvt+0x7c>

080054dc <__exponent>:
 80054dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054de:	2900      	cmp	r1, #0
 80054e0:	bfb6      	itet	lt
 80054e2:	232d      	movlt	r3, #45	@ 0x2d
 80054e4:	232b      	movge	r3, #43	@ 0x2b
 80054e6:	4249      	neglt	r1, r1
 80054e8:	2909      	cmp	r1, #9
 80054ea:	7002      	strb	r2, [r0, #0]
 80054ec:	7043      	strb	r3, [r0, #1]
 80054ee:	dd29      	ble.n	8005544 <__exponent+0x68>
 80054f0:	f10d 0307 	add.w	r3, sp, #7
 80054f4:	461d      	mov	r5, r3
 80054f6:	270a      	movs	r7, #10
 80054f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80054fc:	461a      	mov	r2, r3
 80054fe:	fb07 1416 	mls	r4, r7, r6, r1
 8005502:	3430      	adds	r4, #48	@ 0x30
 8005504:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005508:	460c      	mov	r4, r1
 800550a:	2c63      	cmp	r4, #99	@ 0x63
 800550c:	4631      	mov	r1, r6
 800550e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005512:	dcf1      	bgt.n	80054f8 <__exponent+0x1c>
 8005514:	3130      	adds	r1, #48	@ 0x30
 8005516:	1e94      	subs	r4, r2, #2
 8005518:	f803 1c01 	strb.w	r1, [r3, #-1]
 800551c:	4623      	mov	r3, r4
 800551e:	1c41      	adds	r1, r0, #1
 8005520:	42ab      	cmp	r3, r5
 8005522:	d30a      	bcc.n	800553a <__exponent+0x5e>
 8005524:	f10d 0309 	add.w	r3, sp, #9
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	42ac      	cmp	r4, r5
 800552c:	bf88      	it	hi
 800552e:	2300      	movhi	r3, #0
 8005530:	3302      	adds	r3, #2
 8005532:	4403      	add	r3, r0
 8005534:	1a18      	subs	r0, r3, r0
 8005536:	b003      	add	sp, #12
 8005538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800553a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800553e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005542:	e7ed      	b.n	8005520 <__exponent+0x44>
 8005544:	2330      	movs	r3, #48	@ 0x30
 8005546:	3130      	adds	r1, #48	@ 0x30
 8005548:	7083      	strb	r3, [r0, #2]
 800554a:	70c1      	strb	r1, [r0, #3]
 800554c:	1d03      	adds	r3, r0, #4
 800554e:	e7f1      	b.n	8005534 <__exponent+0x58>

08005550 <_printf_float>:
 8005550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005554:	b091      	sub	sp, #68	@ 0x44
 8005556:	460c      	mov	r4, r1
 8005558:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800555c:	4616      	mov	r6, r2
 800555e:	461f      	mov	r7, r3
 8005560:	4605      	mov	r5, r0
 8005562:	f000 fcf1 	bl	8005f48 <_localeconv_r>
 8005566:	6803      	ldr	r3, [r0, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	9308      	str	r3, [sp, #32]
 800556c:	f7fa fdf0 	bl	8000150 <strlen>
 8005570:	2300      	movs	r3, #0
 8005572:	930e      	str	r3, [sp, #56]	@ 0x38
 8005574:	f8d8 3000 	ldr.w	r3, [r8]
 8005578:	9009      	str	r0, [sp, #36]	@ 0x24
 800557a:	3307      	adds	r3, #7
 800557c:	f023 0307 	bic.w	r3, r3, #7
 8005580:	f103 0208 	add.w	r2, r3, #8
 8005584:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005588:	f8d4 b000 	ldr.w	fp, [r4]
 800558c:	f8c8 2000 	str.w	r2, [r8]
 8005590:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005594:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800559a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800559e:	f04f 32ff 	mov.w	r2, #4294967295
 80055a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80055aa:	4b9c      	ldr	r3, [pc, #624]	@ (800581c <_printf_float+0x2cc>)
 80055ac:	f7fb fa2e 	bl	8000a0c <__aeabi_dcmpun>
 80055b0:	bb70      	cbnz	r0, 8005610 <_printf_float+0xc0>
 80055b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055b6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ba:	4b98      	ldr	r3, [pc, #608]	@ (800581c <_printf_float+0x2cc>)
 80055bc:	f7fb fa08 	bl	80009d0 <__aeabi_dcmple>
 80055c0:	bb30      	cbnz	r0, 8005610 <_printf_float+0xc0>
 80055c2:	2200      	movs	r2, #0
 80055c4:	2300      	movs	r3, #0
 80055c6:	4640      	mov	r0, r8
 80055c8:	4649      	mov	r1, r9
 80055ca:	f7fb f9f7 	bl	80009bc <__aeabi_dcmplt>
 80055ce:	b110      	cbz	r0, 80055d6 <_printf_float+0x86>
 80055d0:	232d      	movs	r3, #45	@ 0x2d
 80055d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d6:	4a92      	ldr	r2, [pc, #584]	@ (8005820 <_printf_float+0x2d0>)
 80055d8:	4b92      	ldr	r3, [pc, #584]	@ (8005824 <_printf_float+0x2d4>)
 80055da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80055de:	bf94      	ite	ls
 80055e0:	4690      	movls	r8, r2
 80055e2:	4698      	movhi	r8, r3
 80055e4:	2303      	movs	r3, #3
 80055e6:	f04f 0900 	mov.w	r9, #0
 80055ea:	6123      	str	r3, [r4, #16]
 80055ec:	f02b 0304 	bic.w	r3, fp, #4
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	4633      	mov	r3, r6
 80055f4:	4621      	mov	r1, r4
 80055f6:	4628      	mov	r0, r5
 80055f8:	9700      	str	r7, [sp, #0]
 80055fa:	aa0f      	add	r2, sp, #60	@ 0x3c
 80055fc:	f000 f9d4 	bl	80059a8 <_printf_common>
 8005600:	3001      	adds	r0, #1
 8005602:	f040 8090 	bne.w	8005726 <_printf_float+0x1d6>
 8005606:	f04f 30ff 	mov.w	r0, #4294967295
 800560a:	b011      	add	sp, #68	@ 0x44
 800560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005610:	4642      	mov	r2, r8
 8005612:	464b      	mov	r3, r9
 8005614:	4640      	mov	r0, r8
 8005616:	4649      	mov	r1, r9
 8005618:	f7fb f9f8 	bl	8000a0c <__aeabi_dcmpun>
 800561c:	b148      	cbz	r0, 8005632 <_printf_float+0xe2>
 800561e:	464b      	mov	r3, r9
 8005620:	2b00      	cmp	r3, #0
 8005622:	bfb8      	it	lt
 8005624:	232d      	movlt	r3, #45	@ 0x2d
 8005626:	4a80      	ldr	r2, [pc, #512]	@ (8005828 <_printf_float+0x2d8>)
 8005628:	bfb8      	it	lt
 800562a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800562e:	4b7f      	ldr	r3, [pc, #508]	@ (800582c <_printf_float+0x2dc>)
 8005630:	e7d3      	b.n	80055da <_printf_float+0x8a>
 8005632:	6863      	ldr	r3, [r4, #4]
 8005634:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	d13f      	bne.n	80056bc <_printf_float+0x16c>
 800563c:	2306      	movs	r3, #6
 800563e:	6063      	str	r3, [r4, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	9206      	str	r2, [sp, #24]
 800564a:	aa0e      	add	r2, sp, #56	@ 0x38
 800564c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005650:	aa0d      	add	r2, sp, #52	@ 0x34
 8005652:	9203      	str	r2, [sp, #12]
 8005654:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005658:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800565c:	6863      	ldr	r3, [r4, #4]
 800565e:	4642      	mov	r2, r8
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	4628      	mov	r0, r5
 8005664:	464b      	mov	r3, r9
 8005666:	910a      	str	r1, [sp, #40]	@ 0x28
 8005668:	f7ff fed4 	bl	8005414 <__cvt>
 800566c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800566e:	4680      	mov	r8, r0
 8005670:	2947      	cmp	r1, #71	@ 0x47
 8005672:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005674:	d128      	bne.n	80056c8 <_printf_float+0x178>
 8005676:	1cc8      	adds	r0, r1, #3
 8005678:	db02      	blt.n	8005680 <_printf_float+0x130>
 800567a:	6863      	ldr	r3, [r4, #4]
 800567c:	4299      	cmp	r1, r3
 800567e:	dd40      	ble.n	8005702 <_printf_float+0x1b2>
 8005680:	f1aa 0a02 	sub.w	sl, sl, #2
 8005684:	fa5f fa8a 	uxtb.w	sl, sl
 8005688:	4652      	mov	r2, sl
 800568a:	3901      	subs	r1, #1
 800568c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005690:	910d      	str	r1, [sp, #52]	@ 0x34
 8005692:	f7ff ff23 	bl	80054dc <__exponent>
 8005696:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005698:	4681      	mov	r9, r0
 800569a:	1813      	adds	r3, r2, r0
 800569c:	2a01      	cmp	r2, #1
 800569e:	6123      	str	r3, [r4, #16]
 80056a0:	dc02      	bgt.n	80056a8 <_printf_float+0x158>
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	07d2      	lsls	r2, r2, #31
 80056a6:	d501      	bpl.n	80056ac <_printf_float+0x15c>
 80056a8:	3301      	adds	r3, #1
 80056aa:	6123      	str	r3, [r4, #16]
 80056ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d09e      	beq.n	80055f2 <_printf_float+0xa2>
 80056b4:	232d      	movs	r3, #45	@ 0x2d
 80056b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056ba:	e79a      	b.n	80055f2 <_printf_float+0xa2>
 80056bc:	2947      	cmp	r1, #71	@ 0x47
 80056be:	d1bf      	bne.n	8005640 <_printf_float+0xf0>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1bd      	bne.n	8005640 <_printf_float+0xf0>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e7ba      	b.n	800563e <_printf_float+0xee>
 80056c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056cc:	d9dc      	bls.n	8005688 <_printf_float+0x138>
 80056ce:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80056d2:	d118      	bne.n	8005706 <_printf_float+0x1b6>
 80056d4:	2900      	cmp	r1, #0
 80056d6:	6863      	ldr	r3, [r4, #4]
 80056d8:	dd0b      	ble.n	80056f2 <_printf_float+0x1a2>
 80056da:	6121      	str	r1, [r4, #16]
 80056dc:	b913      	cbnz	r3, 80056e4 <_printf_float+0x194>
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	07d0      	lsls	r0, r2, #31
 80056e2:	d502      	bpl.n	80056ea <_printf_float+0x19a>
 80056e4:	3301      	adds	r3, #1
 80056e6:	440b      	add	r3, r1
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	f04f 0900 	mov.w	r9, #0
 80056ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 80056f0:	e7dc      	b.n	80056ac <_printf_float+0x15c>
 80056f2:	b913      	cbnz	r3, 80056fa <_printf_float+0x1aa>
 80056f4:	6822      	ldr	r2, [r4, #0]
 80056f6:	07d2      	lsls	r2, r2, #31
 80056f8:	d501      	bpl.n	80056fe <_printf_float+0x1ae>
 80056fa:	3302      	adds	r3, #2
 80056fc:	e7f4      	b.n	80056e8 <_printf_float+0x198>
 80056fe:	2301      	movs	r3, #1
 8005700:	e7f2      	b.n	80056e8 <_printf_float+0x198>
 8005702:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005708:	4299      	cmp	r1, r3
 800570a:	db05      	blt.n	8005718 <_printf_float+0x1c8>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	6121      	str	r1, [r4, #16]
 8005710:	07d8      	lsls	r0, r3, #31
 8005712:	d5ea      	bpl.n	80056ea <_printf_float+0x19a>
 8005714:	1c4b      	adds	r3, r1, #1
 8005716:	e7e7      	b.n	80056e8 <_printf_float+0x198>
 8005718:	2900      	cmp	r1, #0
 800571a:	bfcc      	ite	gt
 800571c:	2201      	movgt	r2, #1
 800571e:	f1c1 0202 	rsble	r2, r1, #2
 8005722:	4413      	add	r3, r2
 8005724:	e7e0      	b.n	80056e8 <_printf_float+0x198>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	055a      	lsls	r2, r3, #21
 800572a:	d407      	bmi.n	800573c <_printf_float+0x1ec>
 800572c:	6923      	ldr	r3, [r4, #16]
 800572e:	4642      	mov	r2, r8
 8005730:	4631      	mov	r1, r6
 8005732:	4628      	mov	r0, r5
 8005734:	47b8      	blx	r7
 8005736:	3001      	adds	r0, #1
 8005738:	d12b      	bne.n	8005792 <_printf_float+0x242>
 800573a:	e764      	b.n	8005606 <_printf_float+0xb6>
 800573c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005740:	f240 80dc 	bls.w	80058fc <_printf_float+0x3ac>
 8005744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005748:	2200      	movs	r2, #0
 800574a:	2300      	movs	r3, #0
 800574c:	f7fb f92c 	bl	80009a8 <__aeabi_dcmpeq>
 8005750:	2800      	cmp	r0, #0
 8005752:	d033      	beq.n	80057bc <_printf_float+0x26c>
 8005754:	2301      	movs	r3, #1
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	4a35      	ldr	r2, [pc, #212]	@ (8005830 <_printf_float+0x2e0>)
 800575c:	47b8      	blx	r7
 800575e:	3001      	adds	r0, #1
 8005760:	f43f af51 	beq.w	8005606 <_printf_float+0xb6>
 8005764:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005768:	4543      	cmp	r3, r8
 800576a:	db02      	blt.n	8005772 <_printf_float+0x222>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	07d8      	lsls	r0, r3, #31
 8005770:	d50f      	bpl.n	8005792 <_printf_float+0x242>
 8005772:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005776:	4631      	mov	r1, r6
 8005778:	4628      	mov	r0, r5
 800577a:	47b8      	blx	r7
 800577c:	3001      	adds	r0, #1
 800577e:	f43f af42 	beq.w	8005606 <_printf_float+0xb6>
 8005782:	f04f 0900 	mov.w	r9, #0
 8005786:	f108 38ff 	add.w	r8, r8, #4294967295
 800578a:	f104 0a1a 	add.w	sl, r4, #26
 800578e:	45c8      	cmp	r8, r9
 8005790:	dc09      	bgt.n	80057a6 <_printf_float+0x256>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	079b      	lsls	r3, r3, #30
 8005796:	f100 8102 	bmi.w	800599e <_printf_float+0x44e>
 800579a:	68e0      	ldr	r0, [r4, #12]
 800579c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800579e:	4298      	cmp	r0, r3
 80057a0:	bfb8      	it	lt
 80057a2:	4618      	movlt	r0, r3
 80057a4:	e731      	b.n	800560a <_printf_float+0xba>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4652      	mov	r2, sl
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	f43f af28 	beq.w	8005606 <_printf_float+0xb6>
 80057b6:	f109 0901 	add.w	r9, r9, #1
 80057ba:	e7e8      	b.n	800578e <_printf_float+0x23e>
 80057bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057be:	2b00      	cmp	r3, #0
 80057c0:	dc38      	bgt.n	8005834 <_printf_float+0x2e4>
 80057c2:	2301      	movs	r3, #1
 80057c4:	4631      	mov	r1, r6
 80057c6:	4628      	mov	r0, r5
 80057c8:	4a19      	ldr	r2, [pc, #100]	@ (8005830 <_printf_float+0x2e0>)
 80057ca:	47b8      	blx	r7
 80057cc:	3001      	adds	r0, #1
 80057ce:	f43f af1a 	beq.w	8005606 <_printf_float+0xb6>
 80057d2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80057d6:	ea59 0303 	orrs.w	r3, r9, r3
 80057da:	d102      	bne.n	80057e2 <_printf_float+0x292>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	07d9      	lsls	r1, r3, #31
 80057e0:	d5d7      	bpl.n	8005792 <_printf_float+0x242>
 80057e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057e6:	4631      	mov	r1, r6
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b8      	blx	r7
 80057ec:	3001      	adds	r0, #1
 80057ee:	f43f af0a 	beq.w	8005606 <_printf_float+0xb6>
 80057f2:	f04f 0a00 	mov.w	sl, #0
 80057f6:	f104 0b1a 	add.w	fp, r4, #26
 80057fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057fc:	425b      	negs	r3, r3
 80057fe:	4553      	cmp	r3, sl
 8005800:	dc01      	bgt.n	8005806 <_printf_float+0x2b6>
 8005802:	464b      	mov	r3, r9
 8005804:	e793      	b.n	800572e <_printf_float+0x1de>
 8005806:	2301      	movs	r3, #1
 8005808:	465a      	mov	r2, fp
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f aef8 	beq.w	8005606 <_printf_float+0xb6>
 8005816:	f10a 0a01 	add.w	sl, sl, #1
 800581a:	e7ee      	b.n	80057fa <_printf_float+0x2aa>
 800581c:	7fefffff 	.word	0x7fefffff
 8005820:	080087da 	.word	0x080087da
 8005824:	080087de 	.word	0x080087de
 8005828:	080087e2 	.word	0x080087e2
 800582c:	080087e6 	.word	0x080087e6
 8005830:	080087ea 	.word	0x080087ea
 8005834:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005836:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800583a:	4553      	cmp	r3, sl
 800583c:	bfa8      	it	ge
 800583e:	4653      	movge	r3, sl
 8005840:	2b00      	cmp	r3, #0
 8005842:	4699      	mov	r9, r3
 8005844:	dc36      	bgt.n	80058b4 <_printf_float+0x364>
 8005846:	f04f 0b00 	mov.w	fp, #0
 800584a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800584e:	f104 021a 	add.w	r2, r4, #26
 8005852:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005854:	930a      	str	r3, [sp, #40]	@ 0x28
 8005856:	eba3 0309 	sub.w	r3, r3, r9
 800585a:	455b      	cmp	r3, fp
 800585c:	dc31      	bgt.n	80058c2 <_printf_float+0x372>
 800585e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005860:	459a      	cmp	sl, r3
 8005862:	dc3a      	bgt.n	80058da <_printf_float+0x38a>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	07da      	lsls	r2, r3, #31
 8005868:	d437      	bmi.n	80058da <_printf_float+0x38a>
 800586a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800586c:	ebaa 0903 	sub.w	r9, sl, r3
 8005870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005872:	ebaa 0303 	sub.w	r3, sl, r3
 8005876:	4599      	cmp	r9, r3
 8005878:	bfa8      	it	ge
 800587a:	4699      	movge	r9, r3
 800587c:	f1b9 0f00 	cmp.w	r9, #0
 8005880:	dc33      	bgt.n	80058ea <_printf_float+0x39a>
 8005882:	f04f 0800 	mov.w	r8, #0
 8005886:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800588a:	f104 0b1a 	add.w	fp, r4, #26
 800588e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005890:	ebaa 0303 	sub.w	r3, sl, r3
 8005894:	eba3 0309 	sub.w	r3, r3, r9
 8005898:	4543      	cmp	r3, r8
 800589a:	f77f af7a 	ble.w	8005792 <_printf_float+0x242>
 800589e:	2301      	movs	r3, #1
 80058a0:	465a      	mov	r2, fp
 80058a2:	4631      	mov	r1, r6
 80058a4:	4628      	mov	r0, r5
 80058a6:	47b8      	blx	r7
 80058a8:	3001      	adds	r0, #1
 80058aa:	f43f aeac 	beq.w	8005606 <_printf_float+0xb6>
 80058ae:	f108 0801 	add.w	r8, r8, #1
 80058b2:	e7ec      	b.n	800588e <_printf_float+0x33e>
 80058b4:	4642      	mov	r2, r8
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	d1c2      	bne.n	8005846 <_printf_float+0x2f6>
 80058c0:	e6a1      	b.n	8005606 <_printf_float+0xb6>
 80058c2:	2301      	movs	r3, #1
 80058c4:	4631      	mov	r1, r6
 80058c6:	4628      	mov	r0, r5
 80058c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80058ca:	47b8      	blx	r7
 80058cc:	3001      	adds	r0, #1
 80058ce:	f43f ae9a 	beq.w	8005606 <_printf_float+0xb6>
 80058d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058d4:	f10b 0b01 	add.w	fp, fp, #1
 80058d8:	e7bb      	b.n	8005852 <_printf_float+0x302>
 80058da:	4631      	mov	r1, r6
 80058dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b8      	blx	r7
 80058e4:	3001      	adds	r0, #1
 80058e6:	d1c0      	bne.n	800586a <_printf_float+0x31a>
 80058e8:	e68d      	b.n	8005606 <_printf_float+0xb6>
 80058ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058ec:	464b      	mov	r3, r9
 80058ee:	4631      	mov	r1, r6
 80058f0:	4628      	mov	r0, r5
 80058f2:	4442      	add	r2, r8
 80058f4:	47b8      	blx	r7
 80058f6:	3001      	adds	r0, #1
 80058f8:	d1c3      	bne.n	8005882 <_printf_float+0x332>
 80058fa:	e684      	b.n	8005606 <_printf_float+0xb6>
 80058fc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005900:	f1ba 0f01 	cmp.w	sl, #1
 8005904:	dc01      	bgt.n	800590a <_printf_float+0x3ba>
 8005906:	07db      	lsls	r3, r3, #31
 8005908:	d536      	bpl.n	8005978 <_printf_float+0x428>
 800590a:	2301      	movs	r3, #1
 800590c:	4642      	mov	r2, r8
 800590e:	4631      	mov	r1, r6
 8005910:	4628      	mov	r0, r5
 8005912:	47b8      	blx	r7
 8005914:	3001      	adds	r0, #1
 8005916:	f43f ae76 	beq.w	8005606 <_printf_float+0xb6>
 800591a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	47b8      	blx	r7
 8005924:	3001      	adds	r0, #1
 8005926:	f43f ae6e 	beq.w	8005606 <_printf_float+0xb6>
 800592a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800592e:	2200      	movs	r2, #0
 8005930:	2300      	movs	r3, #0
 8005932:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005936:	f7fb f837 	bl	80009a8 <__aeabi_dcmpeq>
 800593a:	b9c0      	cbnz	r0, 800596e <_printf_float+0x41e>
 800593c:	4653      	mov	r3, sl
 800593e:	f108 0201 	add.w	r2, r8, #1
 8005942:	4631      	mov	r1, r6
 8005944:	4628      	mov	r0, r5
 8005946:	47b8      	blx	r7
 8005948:	3001      	adds	r0, #1
 800594a:	d10c      	bne.n	8005966 <_printf_float+0x416>
 800594c:	e65b      	b.n	8005606 <_printf_float+0xb6>
 800594e:	2301      	movs	r3, #1
 8005950:	465a      	mov	r2, fp
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	47b8      	blx	r7
 8005958:	3001      	adds	r0, #1
 800595a:	f43f ae54 	beq.w	8005606 <_printf_float+0xb6>
 800595e:	f108 0801 	add.w	r8, r8, #1
 8005962:	45d0      	cmp	r8, sl
 8005964:	dbf3      	blt.n	800594e <_printf_float+0x3fe>
 8005966:	464b      	mov	r3, r9
 8005968:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800596c:	e6e0      	b.n	8005730 <_printf_float+0x1e0>
 800596e:	f04f 0800 	mov.w	r8, #0
 8005972:	f104 0b1a 	add.w	fp, r4, #26
 8005976:	e7f4      	b.n	8005962 <_printf_float+0x412>
 8005978:	2301      	movs	r3, #1
 800597a:	4642      	mov	r2, r8
 800597c:	e7e1      	b.n	8005942 <_printf_float+0x3f2>
 800597e:	2301      	movs	r3, #1
 8005980:	464a      	mov	r2, r9
 8005982:	4631      	mov	r1, r6
 8005984:	4628      	mov	r0, r5
 8005986:	47b8      	blx	r7
 8005988:	3001      	adds	r0, #1
 800598a:	f43f ae3c 	beq.w	8005606 <_printf_float+0xb6>
 800598e:	f108 0801 	add.w	r8, r8, #1
 8005992:	68e3      	ldr	r3, [r4, #12]
 8005994:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005996:	1a5b      	subs	r3, r3, r1
 8005998:	4543      	cmp	r3, r8
 800599a:	dcf0      	bgt.n	800597e <_printf_float+0x42e>
 800599c:	e6fd      	b.n	800579a <_printf_float+0x24a>
 800599e:	f04f 0800 	mov.w	r8, #0
 80059a2:	f104 0919 	add.w	r9, r4, #25
 80059a6:	e7f4      	b.n	8005992 <_printf_float+0x442>

080059a8 <_printf_common>:
 80059a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ac:	4616      	mov	r6, r2
 80059ae:	4698      	mov	r8, r3
 80059b0:	688a      	ldr	r2, [r1, #8]
 80059b2:	690b      	ldr	r3, [r1, #16]
 80059b4:	4607      	mov	r7, r0
 80059b6:	4293      	cmp	r3, r2
 80059b8:	bfb8      	it	lt
 80059ba:	4613      	movlt	r3, r2
 80059bc:	6033      	str	r3, [r6, #0]
 80059be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059c2:	460c      	mov	r4, r1
 80059c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059c8:	b10a      	cbz	r2, 80059ce <_printf_common+0x26>
 80059ca:	3301      	adds	r3, #1
 80059cc:	6033      	str	r3, [r6, #0]
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	0699      	lsls	r1, r3, #26
 80059d2:	bf42      	ittt	mi
 80059d4:	6833      	ldrmi	r3, [r6, #0]
 80059d6:	3302      	addmi	r3, #2
 80059d8:	6033      	strmi	r3, [r6, #0]
 80059da:	6825      	ldr	r5, [r4, #0]
 80059dc:	f015 0506 	ands.w	r5, r5, #6
 80059e0:	d106      	bne.n	80059f0 <_printf_common+0x48>
 80059e2:	f104 0a19 	add.w	sl, r4, #25
 80059e6:	68e3      	ldr	r3, [r4, #12]
 80059e8:	6832      	ldr	r2, [r6, #0]
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	42ab      	cmp	r3, r5
 80059ee:	dc2b      	bgt.n	8005a48 <_printf_common+0xa0>
 80059f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	3b00      	subs	r3, #0
 80059f8:	bf18      	it	ne
 80059fa:	2301      	movne	r3, #1
 80059fc:	0692      	lsls	r2, r2, #26
 80059fe:	d430      	bmi.n	8005a62 <_printf_common+0xba>
 8005a00:	4641      	mov	r1, r8
 8005a02:	4638      	mov	r0, r7
 8005a04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a08:	47c8      	blx	r9
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d023      	beq.n	8005a56 <_printf_common+0xae>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	6922      	ldr	r2, [r4, #16]
 8005a12:	f003 0306 	and.w	r3, r3, #6
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	bf14      	ite	ne
 8005a1a:	2500      	movne	r5, #0
 8005a1c:	6833      	ldreq	r3, [r6, #0]
 8005a1e:	f04f 0600 	mov.w	r6, #0
 8005a22:	bf08      	it	eq
 8005a24:	68e5      	ldreq	r5, [r4, #12]
 8005a26:	f104 041a 	add.w	r4, r4, #26
 8005a2a:	bf08      	it	eq
 8005a2c:	1aed      	subeq	r5, r5, r3
 8005a2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a32:	bf08      	it	eq
 8005a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	bfc4      	itt	gt
 8005a3c:	1a9b      	subgt	r3, r3, r2
 8005a3e:	18ed      	addgt	r5, r5, r3
 8005a40:	42b5      	cmp	r5, r6
 8005a42:	d11a      	bne.n	8005a7a <_printf_common+0xd2>
 8005a44:	2000      	movs	r0, #0
 8005a46:	e008      	b.n	8005a5a <_printf_common+0xb2>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4652      	mov	r2, sl
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	4638      	mov	r0, r7
 8005a50:	47c8      	blx	r9
 8005a52:	3001      	adds	r0, #1
 8005a54:	d103      	bne.n	8005a5e <_printf_common+0xb6>
 8005a56:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5e:	3501      	adds	r5, #1
 8005a60:	e7c1      	b.n	80059e6 <_printf_common+0x3e>
 8005a62:	2030      	movs	r0, #48	@ 0x30
 8005a64:	18e1      	adds	r1, r4, r3
 8005a66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a70:	4422      	add	r2, r4
 8005a72:	3302      	adds	r3, #2
 8005a74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a78:	e7c2      	b.n	8005a00 <_printf_common+0x58>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	4641      	mov	r1, r8
 8005a80:	4638      	mov	r0, r7
 8005a82:	47c8      	blx	r9
 8005a84:	3001      	adds	r0, #1
 8005a86:	d0e6      	beq.n	8005a56 <_printf_common+0xae>
 8005a88:	3601      	adds	r6, #1
 8005a8a:	e7d9      	b.n	8005a40 <_printf_common+0x98>

08005a8c <_printf_i>:
 8005a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	7e0f      	ldrb	r7, [r1, #24]
 8005a92:	4691      	mov	r9, r2
 8005a94:	2f78      	cmp	r7, #120	@ 0x78
 8005a96:	4680      	mov	r8, r0
 8005a98:	460c      	mov	r4, r1
 8005a9a:	469a      	mov	sl, r3
 8005a9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005aa2:	d807      	bhi.n	8005ab4 <_printf_i+0x28>
 8005aa4:	2f62      	cmp	r7, #98	@ 0x62
 8005aa6:	d80a      	bhi.n	8005abe <_printf_i+0x32>
 8005aa8:	2f00      	cmp	r7, #0
 8005aaa:	f000 80d3 	beq.w	8005c54 <_printf_i+0x1c8>
 8005aae:	2f58      	cmp	r7, #88	@ 0x58
 8005ab0:	f000 80ba 	beq.w	8005c28 <_printf_i+0x19c>
 8005ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005abc:	e03a      	b.n	8005b34 <_printf_i+0xa8>
 8005abe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ac2:	2b15      	cmp	r3, #21
 8005ac4:	d8f6      	bhi.n	8005ab4 <_printf_i+0x28>
 8005ac6:	a101      	add	r1, pc, #4	@ (adr r1, 8005acc <_printf_i+0x40>)
 8005ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005acc:	08005b25 	.word	0x08005b25
 8005ad0:	08005b39 	.word	0x08005b39
 8005ad4:	08005ab5 	.word	0x08005ab5
 8005ad8:	08005ab5 	.word	0x08005ab5
 8005adc:	08005ab5 	.word	0x08005ab5
 8005ae0:	08005ab5 	.word	0x08005ab5
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005ab5 	.word	0x08005ab5
 8005aec:	08005ab5 	.word	0x08005ab5
 8005af0:	08005ab5 	.word	0x08005ab5
 8005af4:	08005ab5 	.word	0x08005ab5
 8005af8:	08005c3b 	.word	0x08005c3b
 8005afc:	08005b63 	.word	0x08005b63
 8005b00:	08005bf5 	.word	0x08005bf5
 8005b04:	08005ab5 	.word	0x08005ab5
 8005b08:	08005ab5 	.word	0x08005ab5
 8005b0c:	08005c5d 	.word	0x08005c5d
 8005b10:	08005ab5 	.word	0x08005ab5
 8005b14:	08005b63 	.word	0x08005b63
 8005b18:	08005ab5 	.word	0x08005ab5
 8005b1c:	08005ab5 	.word	0x08005ab5
 8005b20:	08005bfd 	.word	0x08005bfd
 8005b24:	6833      	ldr	r3, [r6, #0]
 8005b26:	1d1a      	adds	r2, r3, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6032      	str	r2, [r6, #0]
 8005b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b34:	2301      	movs	r3, #1
 8005b36:	e09e      	b.n	8005c76 <_printf_i+0x1ea>
 8005b38:	6833      	ldr	r3, [r6, #0]
 8005b3a:	6820      	ldr	r0, [r4, #0]
 8005b3c:	1d19      	adds	r1, r3, #4
 8005b3e:	6031      	str	r1, [r6, #0]
 8005b40:	0606      	lsls	r6, r0, #24
 8005b42:	d501      	bpl.n	8005b48 <_printf_i+0xbc>
 8005b44:	681d      	ldr	r5, [r3, #0]
 8005b46:	e003      	b.n	8005b50 <_printf_i+0xc4>
 8005b48:	0645      	lsls	r5, r0, #25
 8005b4a:	d5fb      	bpl.n	8005b44 <_printf_i+0xb8>
 8005b4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	da03      	bge.n	8005b5c <_printf_i+0xd0>
 8005b54:	232d      	movs	r3, #45	@ 0x2d
 8005b56:	426d      	negs	r5, r5
 8005b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b5c:	230a      	movs	r3, #10
 8005b5e:	4859      	ldr	r0, [pc, #356]	@ (8005cc4 <_printf_i+0x238>)
 8005b60:	e011      	b.n	8005b86 <_printf_i+0xfa>
 8005b62:	6821      	ldr	r1, [r4, #0]
 8005b64:	6833      	ldr	r3, [r6, #0]
 8005b66:	0608      	lsls	r0, r1, #24
 8005b68:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b6c:	d402      	bmi.n	8005b74 <_printf_i+0xe8>
 8005b6e:	0649      	lsls	r1, r1, #25
 8005b70:	bf48      	it	mi
 8005b72:	b2ad      	uxthmi	r5, r5
 8005b74:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b76:	6033      	str	r3, [r6, #0]
 8005b78:	bf14      	ite	ne
 8005b7a:	230a      	movne	r3, #10
 8005b7c:	2308      	moveq	r3, #8
 8005b7e:	4851      	ldr	r0, [pc, #324]	@ (8005cc4 <_printf_i+0x238>)
 8005b80:	2100      	movs	r1, #0
 8005b82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b86:	6866      	ldr	r6, [r4, #4]
 8005b88:	2e00      	cmp	r6, #0
 8005b8a:	bfa8      	it	ge
 8005b8c:	6821      	ldrge	r1, [r4, #0]
 8005b8e:	60a6      	str	r6, [r4, #8]
 8005b90:	bfa4      	itt	ge
 8005b92:	f021 0104 	bicge.w	r1, r1, #4
 8005b96:	6021      	strge	r1, [r4, #0]
 8005b98:	b90d      	cbnz	r5, 8005b9e <_printf_i+0x112>
 8005b9a:	2e00      	cmp	r6, #0
 8005b9c:	d04b      	beq.n	8005c36 <_printf_i+0x1aa>
 8005b9e:	4616      	mov	r6, r2
 8005ba0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ba4:	fb03 5711 	mls	r7, r3, r1, r5
 8005ba8:	5dc7      	ldrb	r7, [r0, r7]
 8005baa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bae:	462f      	mov	r7, r5
 8005bb0:	42bb      	cmp	r3, r7
 8005bb2:	460d      	mov	r5, r1
 8005bb4:	d9f4      	bls.n	8005ba0 <_printf_i+0x114>
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d10b      	bne.n	8005bd2 <_printf_i+0x146>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	07df      	lsls	r7, r3, #31
 8005bbe:	d508      	bpl.n	8005bd2 <_printf_i+0x146>
 8005bc0:	6923      	ldr	r3, [r4, #16]
 8005bc2:	6861      	ldr	r1, [r4, #4]
 8005bc4:	4299      	cmp	r1, r3
 8005bc6:	bfde      	ittt	le
 8005bc8:	2330      	movle	r3, #48	@ 0x30
 8005bca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bd2:	1b92      	subs	r2, r2, r6
 8005bd4:	6122      	str	r2, [r4, #16]
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4640      	mov	r0, r8
 8005bdc:	f8cd a000 	str.w	sl, [sp]
 8005be0:	aa03      	add	r2, sp, #12
 8005be2:	f7ff fee1 	bl	80059a8 <_printf_common>
 8005be6:	3001      	adds	r0, #1
 8005be8:	d14a      	bne.n	8005c80 <_printf_i+0x1f4>
 8005bea:	f04f 30ff 	mov.w	r0, #4294967295
 8005bee:	b004      	add	sp, #16
 8005bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	f043 0320 	orr.w	r3, r3, #32
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	2778      	movs	r7, #120	@ 0x78
 8005bfe:	4832      	ldr	r0, [pc, #200]	@ (8005cc8 <_printf_i+0x23c>)
 8005c00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	6831      	ldr	r1, [r6, #0]
 8005c08:	061f      	lsls	r7, r3, #24
 8005c0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c0e:	d402      	bmi.n	8005c16 <_printf_i+0x18a>
 8005c10:	065f      	lsls	r7, r3, #25
 8005c12:	bf48      	it	mi
 8005c14:	b2ad      	uxthmi	r5, r5
 8005c16:	6031      	str	r1, [r6, #0]
 8005c18:	07d9      	lsls	r1, r3, #31
 8005c1a:	bf44      	itt	mi
 8005c1c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c20:	6023      	strmi	r3, [r4, #0]
 8005c22:	b11d      	cbz	r5, 8005c2c <_printf_i+0x1a0>
 8005c24:	2310      	movs	r3, #16
 8005c26:	e7ab      	b.n	8005b80 <_printf_i+0xf4>
 8005c28:	4826      	ldr	r0, [pc, #152]	@ (8005cc4 <_printf_i+0x238>)
 8005c2a:	e7e9      	b.n	8005c00 <_printf_i+0x174>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	f023 0320 	bic.w	r3, r3, #32
 8005c32:	6023      	str	r3, [r4, #0]
 8005c34:	e7f6      	b.n	8005c24 <_printf_i+0x198>
 8005c36:	4616      	mov	r6, r2
 8005c38:	e7bd      	b.n	8005bb6 <_printf_i+0x12a>
 8005c3a:	6833      	ldr	r3, [r6, #0]
 8005c3c:	6825      	ldr	r5, [r4, #0]
 8005c3e:	1d18      	adds	r0, r3, #4
 8005c40:	6961      	ldr	r1, [r4, #20]
 8005c42:	6030      	str	r0, [r6, #0]
 8005c44:	062e      	lsls	r6, r5, #24
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	d501      	bpl.n	8005c4e <_printf_i+0x1c2>
 8005c4a:	6019      	str	r1, [r3, #0]
 8005c4c:	e002      	b.n	8005c54 <_printf_i+0x1c8>
 8005c4e:	0668      	lsls	r0, r5, #25
 8005c50:	d5fb      	bpl.n	8005c4a <_printf_i+0x1be>
 8005c52:	8019      	strh	r1, [r3, #0]
 8005c54:	2300      	movs	r3, #0
 8005c56:	4616      	mov	r6, r2
 8005c58:	6123      	str	r3, [r4, #16]
 8005c5a:	e7bc      	b.n	8005bd6 <_printf_i+0x14a>
 8005c5c:	6833      	ldr	r3, [r6, #0]
 8005c5e:	2100      	movs	r1, #0
 8005c60:	1d1a      	adds	r2, r3, #4
 8005c62:	6032      	str	r2, [r6, #0]
 8005c64:	681e      	ldr	r6, [r3, #0]
 8005c66:	6862      	ldr	r2, [r4, #4]
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f000 f9e4 	bl	8006036 <memchr>
 8005c6e:	b108      	cbz	r0, 8005c74 <_printf_i+0x1e8>
 8005c70:	1b80      	subs	r0, r0, r6
 8005c72:	6060      	str	r0, [r4, #4]
 8005c74:	6863      	ldr	r3, [r4, #4]
 8005c76:	6123      	str	r3, [r4, #16]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c7e:	e7aa      	b.n	8005bd6 <_printf_i+0x14a>
 8005c80:	4632      	mov	r2, r6
 8005c82:	4649      	mov	r1, r9
 8005c84:	4640      	mov	r0, r8
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	47d0      	blx	sl
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d0ad      	beq.n	8005bea <_printf_i+0x15e>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	079b      	lsls	r3, r3, #30
 8005c92:	d413      	bmi.n	8005cbc <_printf_i+0x230>
 8005c94:	68e0      	ldr	r0, [r4, #12]
 8005c96:	9b03      	ldr	r3, [sp, #12]
 8005c98:	4298      	cmp	r0, r3
 8005c9a:	bfb8      	it	lt
 8005c9c:	4618      	movlt	r0, r3
 8005c9e:	e7a6      	b.n	8005bee <_printf_i+0x162>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4632      	mov	r2, r6
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	47d0      	blx	sl
 8005caa:	3001      	adds	r0, #1
 8005cac:	d09d      	beq.n	8005bea <_printf_i+0x15e>
 8005cae:	3501      	adds	r5, #1
 8005cb0:	68e3      	ldr	r3, [r4, #12]
 8005cb2:	9903      	ldr	r1, [sp, #12]
 8005cb4:	1a5b      	subs	r3, r3, r1
 8005cb6:	42ab      	cmp	r3, r5
 8005cb8:	dcf2      	bgt.n	8005ca0 <_printf_i+0x214>
 8005cba:	e7eb      	b.n	8005c94 <_printf_i+0x208>
 8005cbc:	2500      	movs	r5, #0
 8005cbe:	f104 0619 	add.w	r6, r4, #25
 8005cc2:	e7f5      	b.n	8005cb0 <_printf_i+0x224>
 8005cc4:	080087ec 	.word	0x080087ec
 8005cc8:	080087fd 	.word	0x080087fd

08005ccc <std>:
 8005ccc:	2300      	movs	r3, #0
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8005cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cda:	6083      	str	r3, [r0, #8]
 8005cdc:	8181      	strh	r1, [r0, #12]
 8005cde:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ce0:	81c2      	strh	r2, [r0, #14]
 8005ce2:	6183      	str	r3, [r0, #24]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	2208      	movs	r2, #8
 8005ce8:	305c      	adds	r0, #92	@ 0x5c
 8005cea:	f000 f924 	bl	8005f36 <memset>
 8005cee:	4b0d      	ldr	r3, [pc, #52]	@ (8005d24 <std+0x58>)
 8005cf0:	6224      	str	r4, [r4, #32]
 8005cf2:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d28 <std+0x5c>)
 8005cf6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d2c <std+0x60>)
 8005cfa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d30 <std+0x64>)
 8005cfe:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d00:	4b0c      	ldr	r3, [pc, #48]	@ (8005d34 <std+0x68>)
 8005d02:	429c      	cmp	r4, r3
 8005d04:	d006      	beq.n	8005d14 <std+0x48>
 8005d06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d0a:	4294      	cmp	r4, r2
 8005d0c:	d002      	beq.n	8005d14 <std+0x48>
 8005d0e:	33d0      	adds	r3, #208	@ 0xd0
 8005d10:	429c      	cmp	r4, r3
 8005d12:	d105      	bne.n	8005d20 <std+0x54>
 8005d14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d1c:	f000 b988 	b.w	8006030 <__retarget_lock_init_recursive>
 8005d20:	bd10      	pop	{r4, pc}
 8005d22:	bf00      	nop
 8005d24:	08005e91 	.word	0x08005e91
 8005d28:	08005eb3 	.word	0x08005eb3
 8005d2c:	08005eeb 	.word	0x08005eeb
 8005d30:	08005f0f 	.word	0x08005f0f
 8005d34:	20000838 	.word	0x20000838

08005d38 <stdio_exit_handler>:
 8005d38:	4a02      	ldr	r2, [pc, #8]	@ (8005d44 <stdio_exit_handler+0xc>)
 8005d3a:	4903      	ldr	r1, [pc, #12]	@ (8005d48 <stdio_exit_handler+0x10>)
 8005d3c:	4803      	ldr	r0, [pc, #12]	@ (8005d4c <stdio_exit_handler+0x14>)
 8005d3e:	f000 b869 	b.w	8005e14 <_fwalk_sglue>
 8005d42:	bf00      	nop
 8005d44:	2000000c 	.word	0x2000000c
 8005d48:	080079bd 	.word	0x080079bd
 8005d4c:	2000001c 	.word	0x2000001c

08005d50 <cleanup_stdio>:
 8005d50:	6841      	ldr	r1, [r0, #4]
 8005d52:	4b0c      	ldr	r3, [pc, #48]	@ (8005d84 <cleanup_stdio+0x34>)
 8005d54:	b510      	push	{r4, lr}
 8005d56:	4299      	cmp	r1, r3
 8005d58:	4604      	mov	r4, r0
 8005d5a:	d001      	beq.n	8005d60 <cleanup_stdio+0x10>
 8005d5c:	f001 fe2e 	bl	80079bc <_fflush_r>
 8005d60:	68a1      	ldr	r1, [r4, #8]
 8005d62:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <cleanup_stdio+0x38>)
 8005d64:	4299      	cmp	r1, r3
 8005d66:	d002      	beq.n	8005d6e <cleanup_stdio+0x1e>
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f001 fe27 	bl	80079bc <_fflush_r>
 8005d6e:	68e1      	ldr	r1, [r4, #12]
 8005d70:	4b06      	ldr	r3, [pc, #24]	@ (8005d8c <cleanup_stdio+0x3c>)
 8005d72:	4299      	cmp	r1, r3
 8005d74:	d004      	beq.n	8005d80 <cleanup_stdio+0x30>
 8005d76:	4620      	mov	r0, r4
 8005d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d7c:	f001 be1e 	b.w	80079bc <_fflush_r>
 8005d80:	bd10      	pop	{r4, pc}
 8005d82:	bf00      	nop
 8005d84:	20000838 	.word	0x20000838
 8005d88:	200008a0 	.word	0x200008a0
 8005d8c:	20000908 	.word	0x20000908

08005d90 <global_stdio_init.part.0>:
 8005d90:	b510      	push	{r4, lr}
 8005d92:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <global_stdio_init.part.0+0x30>)
 8005d94:	4c0b      	ldr	r4, [pc, #44]	@ (8005dc4 <global_stdio_init.part.0+0x34>)
 8005d96:	4a0c      	ldr	r2, [pc, #48]	@ (8005dc8 <global_stdio_init.part.0+0x38>)
 8005d98:	4620      	mov	r0, r4
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	2104      	movs	r1, #4
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f7ff ff94 	bl	8005ccc <std>
 8005da4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005da8:	2201      	movs	r2, #1
 8005daa:	2109      	movs	r1, #9
 8005dac:	f7ff ff8e 	bl	8005ccc <std>
 8005db0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005db4:	2202      	movs	r2, #2
 8005db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dba:	2112      	movs	r1, #18
 8005dbc:	f7ff bf86 	b.w	8005ccc <std>
 8005dc0:	20000970 	.word	0x20000970
 8005dc4:	20000838 	.word	0x20000838
 8005dc8:	08005d39 	.word	0x08005d39

08005dcc <__sfp_lock_acquire>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	@ (8005dd4 <__sfp_lock_acquire+0x8>)
 8005dce:	f000 b930 	b.w	8006032 <__retarget_lock_acquire_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	20000979 	.word	0x20000979

08005dd8 <__sfp_lock_release>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	@ (8005de0 <__sfp_lock_release+0x8>)
 8005dda:	f000 b92b 	b.w	8006034 <__retarget_lock_release_recursive>
 8005dde:	bf00      	nop
 8005de0:	20000979 	.word	0x20000979

08005de4 <__sinit>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	4604      	mov	r4, r0
 8005de8:	f7ff fff0 	bl	8005dcc <__sfp_lock_acquire>
 8005dec:	6a23      	ldr	r3, [r4, #32]
 8005dee:	b11b      	cbz	r3, 8005df8 <__sinit+0x14>
 8005df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df4:	f7ff bff0 	b.w	8005dd8 <__sfp_lock_release>
 8005df8:	4b04      	ldr	r3, [pc, #16]	@ (8005e0c <__sinit+0x28>)
 8005dfa:	6223      	str	r3, [r4, #32]
 8005dfc:	4b04      	ldr	r3, [pc, #16]	@ (8005e10 <__sinit+0x2c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f5      	bne.n	8005df0 <__sinit+0xc>
 8005e04:	f7ff ffc4 	bl	8005d90 <global_stdio_init.part.0>
 8005e08:	e7f2      	b.n	8005df0 <__sinit+0xc>
 8005e0a:	bf00      	nop
 8005e0c:	08005d51 	.word	0x08005d51
 8005e10:	20000970 	.word	0x20000970

08005e14 <_fwalk_sglue>:
 8005e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e18:	4607      	mov	r7, r0
 8005e1a:	4688      	mov	r8, r1
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	2600      	movs	r6, #0
 8005e20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e24:	f1b9 0901 	subs.w	r9, r9, #1
 8005e28:	d505      	bpl.n	8005e36 <_fwalk_sglue+0x22>
 8005e2a:	6824      	ldr	r4, [r4, #0]
 8005e2c:	2c00      	cmp	r4, #0
 8005e2e:	d1f7      	bne.n	8005e20 <_fwalk_sglue+0xc>
 8005e30:	4630      	mov	r0, r6
 8005e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e36:	89ab      	ldrh	r3, [r5, #12]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d907      	bls.n	8005e4c <_fwalk_sglue+0x38>
 8005e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e40:	3301      	adds	r3, #1
 8005e42:	d003      	beq.n	8005e4c <_fwalk_sglue+0x38>
 8005e44:	4629      	mov	r1, r5
 8005e46:	4638      	mov	r0, r7
 8005e48:	47c0      	blx	r8
 8005e4a:	4306      	orrs	r6, r0
 8005e4c:	3568      	adds	r5, #104	@ 0x68
 8005e4e:	e7e9      	b.n	8005e24 <_fwalk_sglue+0x10>

08005e50 <siprintf>:
 8005e50:	b40e      	push	{r1, r2, r3}
 8005e52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e56:	b500      	push	{lr}
 8005e58:	b09c      	sub	sp, #112	@ 0x70
 8005e5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e5c:	9002      	str	r0, [sp, #8]
 8005e5e:	9006      	str	r0, [sp, #24]
 8005e60:	9107      	str	r1, [sp, #28]
 8005e62:	9104      	str	r1, [sp, #16]
 8005e64:	4808      	ldr	r0, [pc, #32]	@ (8005e88 <siprintf+0x38>)
 8005e66:	4909      	ldr	r1, [pc, #36]	@ (8005e8c <siprintf+0x3c>)
 8005e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e6c:	9105      	str	r1, [sp, #20]
 8005e6e:	6800      	ldr	r0, [r0, #0]
 8005e70:	a902      	add	r1, sp, #8
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	f001 fc26 	bl	80076c4 <_svfiprintf_r>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	9b02      	ldr	r3, [sp, #8]
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	b01c      	add	sp, #112	@ 0x70
 8005e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e84:	b003      	add	sp, #12
 8005e86:	4770      	bx	lr
 8005e88:	20000018 	.word	0x20000018
 8005e8c:	ffff0208 	.word	0xffff0208

08005e90 <__sread>:
 8005e90:	b510      	push	{r4, lr}
 8005e92:	460c      	mov	r4, r1
 8005e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e98:	f000 f87c 	bl	8005f94 <_read_r>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	bfab      	itete	ge
 8005ea0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ea4:	181b      	addge	r3, r3, r0
 8005ea6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005eaa:	bfac      	ite	ge
 8005eac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005eae:	81a3      	strhlt	r3, [r4, #12]
 8005eb0:	bd10      	pop	{r4, pc}

08005eb2 <__swrite>:
 8005eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb6:	461f      	mov	r7, r3
 8005eb8:	898b      	ldrh	r3, [r1, #12]
 8005eba:	4605      	mov	r5, r0
 8005ebc:	05db      	lsls	r3, r3, #23
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	4616      	mov	r6, r2
 8005ec2:	d505      	bpl.n	8005ed0 <__swrite+0x1e>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ecc:	f000 f850 	bl	8005f70 <_lseek_r>
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	4632      	mov	r2, r6
 8005ed4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ed8:	81a3      	strh	r3, [r4, #12]
 8005eda:	4628      	mov	r0, r5
 8005edc:	463b      	mov	r3, r7
 8005ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee6:	f000 b867 	b.w	8005fb8 <_write_r>

08005eea <__sseek>:
 8005eea:	b510      	push	{r4, lr}
 8005eec:	460c      	mov	r4, r1
 8005eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef2:	f000 f83d 	bl	8005f70 <_lseek_r>
 8005ef6:	1c43      	adds	r3, r0, #1
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	bf15      	itete	ne
 8005efc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005efe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f06:	81a3      	strheq	r3, [r4, #12]
 8005f08:	bf18      	it	ne
 8005f0a:	81a3      	strhne	r3, [r4, #12]
 8005f0c:	bd10      	pop	{r4, pc}

08005f0e <__sclose>:
 8005f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f12:	f000 b81d 	b.w	8005f50 <_close_r>

08005f16 <memcmp>:
 8005f16:	b510      	push	{r4, lr}
 8005f18:	3901      	subs	r1, #1
 8005f1a:	4402      	add	r2, r0
 8005f1c:	4290      	cmp	r0, r2
 8005f1e:	d101      	bne.n	8005f24 <memcmp+0xe>
 8005f20:	2000      	movs	r0, #0
 8005f22:	e005      	b.n	8005f30 <memcmp+0x1a>
 8005f24:	7803      	ldrb	r3, [r0, #0]
 8005f26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f2a:	42a3      	cmp	r3, r4
 8005f2c:	d001      	beq.n	8005f32 <memcmp+0x1c>
 8005f2e:	1b18      	subs	r0, r3, r4
 8005f30:	bd10      	pop	{r4, pc}
 8005f32:	3001      	adds	r0, #1
 8005f34:	e7f2      	b.n	8005f1c <memcmp+0x6>

08005f36 <memset>:
 8005f36:	4603      	mov	r3, r0
 8005f38:	4402      	add	r2, r0
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d100      	bne.n	8005f40 <memset+0xa>
 8005f3e:	4770      	bx	lr
 8005f40:	f803 1b01 	strb.w	r1, [r3], #1
 8005f44:	e7f9      	b.n	8005f3a <memset+0x4>
	...

08005f48 <_localeconv_r>:
 8005f48:	4800      	ldr	r0, [pc, #0]	@ (8005f4c <_localeconv_r+0x4>)
 8005f4a:	4770      	bx	lr
 8005f4c:	20000158 	.word	0x20000158

08005f50 <_close_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	2300      	movs	r3, #0
 8005f54:	4d05      	ldr	r5, [pc, #20]	@ (8005f6c <_close_r+0x1c>)
 8005f56:	4604      	mov	r4, r0
 8005f58:	4608      	mov	r0, r1
 8005f5a:	602b      	str	r3, [r5, #0]
 8005f5c:	f7fb fd7d 	bl	8001a5a <_close>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_close_r+0x1a>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_close_r+0x1a>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	20000974 	.word	0x20000974

08005f70 <_lseek_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4d05      	ldr	r5, [pc, #20]	@ (8005f90 <_lseek_r+0x20>)
 8005f7c:	602a      	str	r2, [r5, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f7fb fd8f 	bl	8001aa2 <_lseek>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_lseek_r+0x1e>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_lseek_r+0x1e>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	20000974 	.word	0x20000974

08005f94 <_read_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	4d05      	ldr	r5, [pc, #20]	@ (8005fb4 <_read_r+0x20>)
 8005fa0:	602a      	str	r2, [r5, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f7fb fd20 	bl	80019e8 <_read>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_read_r+0x1e>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_read_r+0x1e>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	20000974 	.word	0x20000974

08005fb8 <_write_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	4d05      	ldr	r5, [pc, #20]	@ (8005fd8 <_write_r+0x20>)
 8005fc4:	602a      	str	r2, [r5, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f7fb fd2b 	bl	8001a22 <_write>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d102      	bne.n	8005fd6 <_write_r+0x1e>
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	b103      	cbz	r3, 8005fd6 <_write_r+0x1e>
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	20000974 	.word	0x20000974

08005fdc <__errno>:
 8005fdc:	4b01      	ldr	r3, [pc, #4]	@ (8005fe4 <__errno+0x8>)
 8005fde:	6818      	ldr	r0, [r3, #0]
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	20000018 	.word	0x20000018

08005fe8 <__libc_init_array>:
 8005fe8:	b570      	push	{r4, r5, r6, lr}
 8005fea:	2600      	movs	r6, #0
 8005fec:	4d0c      	ldr	r5, [pc, #48]	@ (8006020 <__libc_init_array+0x38>)
 8005fee:	4c0d      	ldr	r4, [pc, #52]	@ (8006024 <__libc_init_array+0x3c>)
 8005ff0:	1b64      	subs	r4, r4, r5
 8005ff2:	10a4      	asrs	r4, r4, #2
 8005ff4:	42a6      	cmp	r6, r4
 8005ff6:	d109      	bne.n	800600c <__libc_init_array+0x24>
 8005ff8:	f002 f86e 	bl	80080d8 <_init>
 8005ffc:	2600      	movs	r6, #0
 8005ffe:	4d0a      	ldr	r5, [pc, #40]	@ (8006028 <__libc_init_array+0x40>)
 8006000:	4c0a      	ldr	r4, [pc, #40]	@ (800602c <__libc_init_array+0x44>)
 8006002:	1b64      	subs	r4, r4, r5
 8006004:	10a4      	asrs	r4, r4, #2
 8006006:	42a6      	cmp	r6, r4
 8006008:	d105      	bne.n	8006016 <__libc_init_array+0x2e>
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006010:	4798      	blx	r3
 8006012:	3601      	adds	r6, #1
 8006014:	e7ee      	b.n	8005ff4 <__libc_init_array+0xc>
 8006016:	f855 3b04 	ldr.w	r3, [r5], #4
 800601a:	4798      	blx	r3
 800601c:	3601      	adds	r6, #1
 800601e:	e7f2      	b.n	8006006 <__libc_init_array+0x1e>
 8006020:	08008b50 	.word	0x08008b50
 8006024:	08008b50 	.word	0x08008b50
 8006028:	08008b50 	.word	0x08008b50
 800602c:	08008b54 	.word	0x08008b54

08006030 <__retarget_lock_init_recursive>:
 8006030:	4770      	bx	lr

08006032 <__retarget_lock_acquire_recursive>:
 8006032:	4770      	bx	lr

08006034 <__retarget_lock_release_recursive>:
 8006034:	4770      	bx	lr

08006036 <memchr>:
 8006036:	4603      	mov	r3, r0
 8006038:	b510      	push	{r4, lr}
 800603a:	b2c9      	uxtb	r1, r1
 800603c:	4402      	add	r2, r0
 800603e:	4293      	cmp	r3, r2
 8006040:	4618      	mov	r0, r3
 8006042:	d101      	bne.n	8006048 <memchr+0x12>
 8006044:	2000      	movs	r0, #0
 8006046:	e003      	b.n	8006050 <memchr+0x1a>
 8006048:	7804      	ldrb	r4, [r0, #0]
 800604a:	3301      	adds	r3, #1
 800604c:	428c      	cmp	r4, r1
 800604e:	d1f6      	bne.n	800603e <memchr+0x8>
 8006050:	bd10      	pop	{r4, pc}

08006052 <memcpy>:
 8006052:	440a      	add	r2, r1
 8006054:	4291      	cmp	r1, r2
 8006056:	f100 33ff 	add.w	r3, r0, #4294967295
 800605a:	d100      	bne.n	800605e <memcpy+0xc>
 800605c:	4770      	bx	lr
 800605e:	b510      	push	{r4, lr}
 8006060:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006064:	4291      	cmp	r1, r2
 8006066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800606a:	d1f9      	bne.n	8006060 <memcpy+0xe>
 800606c:	bd10      	pop	{r4, pc}

0800606e <quorem>:
 800606e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006072:	6903      	ldr	r3, [r0, #16]
 8006074:	690c      	ldr	r4, [r1, #16]
 8006076:	4607      	mov	r7, r0
 8006078:	42a3      	cmp	r3, r4
 800607a:	db7e      	blt.n	800617a <quorem+0x10c>
 800607c:	3c01      	subs	r4, #1
 800607e:	00a3      	lsls	r3, r4, #2
 8006080:	f100 0514 	add.w	r5, r0, #20
 8006084:	f101 0814 	add.w	r8, r1, #20
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800608e:	9301      	str	r3, [sp, #4]
 8006090:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006098:	3301      	adds	r3, #1
 800609a:	429a      	cmp	r2, r3
 800609c:	fbb2 f6f3 	udiv	r6, r2, r3
 80060a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060a4:	d32e      	bcc.n	8006104 <quorem+0x96>
 80060a6:	f04f 0a00 	mov.w	sl, #0
 80060aa:	46c4      	mov	ip, r8
 80060ac:	46ae      	mov	lr, r5
 80060ae:	46d3      	mov	fp, sl
 80060b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060b4:	b298      	uxth	r0, r3
 80060b6:	fb06 a000 	mla	r0, r6, r0, sl
 80060ba:	0c1b      	lsrs	r3, r3, #16
 80060bc:	0c02      	lsrs	r2, r0, #16
 80060be:	fb06 2303 	mla	r3, r6, r3, r2
 80060c2:	f8de 2000 	ldr.w	r2, [lr]
 80060c6:	b280      	uxth	r0, r0
 80060c8:	b292      	uxth	r2, r2
 80060ca:	1a12      	subs	r2, r2, r0
 80060cc:	445a      	add	r2, fp
 80060ce:	f8de 0000 	ldr.w	r0, [lr]
 80060d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80060dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80060e0:	b292      	uxth	r2, r2
 80060e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80060e6:	45e1      	cmp	r9, ip
 80060e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80060ec:	f84e 2b04 	str.w	r2, [lr], #4
 80060f0:	d2de      	bcs.n	80060b0 <quorem+0x42>
 80060f2:	9b00      	ldr	r3, [sp, #0]
 80060f4:	58eb      	ldr	r3, [r5, r3]
 80060f6:	b92b      	cbnz	r3, 8006104 <quorem+0x96>
 80060f8:	9b01      	ldr	r3, [sp, #4]
 80060fa:	3b04      	subs	r3, #4
 80060fc:	429d      	cmp	r5, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	d32f      	bcc.n	8006162 <quorem+0xf4>
 8006102:	613c      	str	r4, [r7, #16]
 8006104:	4638      	mov	r0, r7
 8006106:	f001 f979 	bl	80073fc <__mcmp>
 800610a:	2800      	cmp	r0, #0
 800610c:	db25      	blt.n	800615a <quorem+0xec>
 800610e:	4629      	mov	r1, r5
 8006110:	2000      	movs	r0, #0
 8006112:	f858 2b04 	ldr.w	r2, [r8], #4
 8006116:	f8d1 c000 	ldr.w	ip, [r1]
 800611a:	fa1f fe82 	uxth.w	lr, r2
 800611e:	fa1f f38c 	uxth.w	r3, ip
 8006122:	eba3 030e 	sub.w	r3, r3, lr
 8006126:	4403      	add	r3, r0
 8006128:	0c12      	lsrs	r2, r2, #16
 800612a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800612e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006132:	b29b      	uxth	r3, r3
 8006134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006138:	45c1      	cmp	r9, r8
 800613a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800613e:	f841 3b04 	str.w	r3, [r1], #4
 8006142:	d2e6      	bcs.n	8006112 <quorem+0xa4>
 8006144:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006148:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800614c:	b922      	cbnz	r2, 8006158 <quorem+0xea>
 800614e:	3b04      	subs	r3, #4
 8006150:	429d      	cmp	r5, r3
 8006152:	461a      	mov	r2, r3
 8006154:	d30b      	bcc.n	800616e <quorem+0x100>
 8006156:	613c      	str	r4, [r7, #16]
 8006158:	3601      	adds	r6, #1
 800615a:	4630      	mov	r0, r6
 800615c:	b003      	add	sp, #12
 800615e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	3b04      	subs	r3, #4
 8006166:	2a00      	cmp	r2, #0
 8006168:	d1cb      	bne.n	8006102 <quorem+0x94>
 800616a:	3c01      	subs	r4, #1
 800616c:	e7c6      	b.n	80060fc <quorem+0x8e>
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	3b04      	subs	r3, #4
 8006172:	2a00      	cmp	r2, #0
 8006174:	d1ef      	bne.n	8006156 <quorem+0xe8>
 8006176:	3c01      	subs	r4, #1
 8006178:	e7ea      	b.n	8006150 <quorem+0xe2>
 800617a:	2000      	movs	r0, #0
 800617c:	e7ee      	b.n	800615c <quorem+0xee>
	...

08006180 <_dtoa_r>:
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	4614      	mov	r4, r2
 8006186:	461d      	mov	r5, r3
 8006188:	69c7      	ldr	r7, [r0, #28]
 800618a:	b097      	sub	sp, #92	@ 0x5c
 800618c:	4683      	mov	fp, r0
 800618e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006192:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006194:	b97f      	cbnz	r7, 80061b6 <_dtoa_r+0x36>
 8006196:	2010      	movs	r0, #16
 8006198:	f000 fe02 	bl	8006da0 <malloc>
 800619c:	4602      	mov	r2, r0
 800619e:	f8cb 001c 	str.w	r0, [fp, #28]
 80061a2:	b920      	cbnz	r0, 80061ae <_dtoa_r+0x2e>
 80061a4:	21ef      	movs	r1, #239	@ 0xef
 80061a6:	4ba8      	ldr	r3, [pc, #672]	@ (8006448 <_dtoa_r+0x2c8>)
 80061a8:	48a8      	ldr	r0, [pc, #672]	@ (800644c <_dtoa_r+0x2cc>)
 80061aa:	f001 fc59 	bl	8007a60 <__assert_func>
 80061ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061b2:	6007      	str	r7, [r0, #0]
 80061b4:	60c7      	str	r7, [r0, #12]
 80061b6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061ba:	6819      	ldr	r1, [r3, #0]
 80061bc:	b159      	cbz	r1, 80061d6 <_dtoa_r+0x56>
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	2301      	movs	r3, #1
 80061c2:	4093      	lsls	r3, r2
 80061c4:	604a      	str	r2, [r1, #4]
 80061c6:	608b      	str	r3, [r1, #8]
 80061c8:	4658      	mov	r0, fp
 80061ca:	f000 fedf 	bl	8006f8c <_Bfree>
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	1e2b      	subs	r3, r5, #0
 80061d8:	bfaf      	iteee	ge
 80061da:	2300      	movge	r3, #0
 80061dc:	2201      	movlt	r2, #1
 80061de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80061e2:	9303      	strlt	r3, [sp, #12]
 80061e4:	bfa8      	it	ge
 80061e6:	6033      	strge	r3, [r6, #0]
 80061e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80061ec:	4b98      	ldr	r3, [pc, #608]	@ (8006450 <_dtoa_r+0x2d0>)
 80061ee:	bfb8      	it	lt
 80061f0:	6032      	strlt	r2, [r6, #0]
 80061f2:	ea33 0308 	bics.w	r3, r3, r8
 80061f6:	d112      	bne.n	800621e <_dtoa_r+0x9e>
 80061f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80061fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006204:	4323      	orrs	r3, r4
 8006206:	f000 8550 	beq.w	8006caa <_dtoa_r+0xb2a>
 800620a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800620c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006454 <_dtoa_r+0x2d4>
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8552 	beq.w	8006cba <_dtoa_r+0xb3a>
 8006216:	f10a 0303 	add.w	r3, sl, #3
 800621a:	f000 bd4c 	b.w	8006cb6 <_dtoa_r+0xb36>
 800621e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006222:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006226:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800622a:	2200      	movs	r2, #0
 800622c:	2300      	movs	r3, #0
 800622e:	f7fa fbbb 	bl	80009a8 <__aeabi_dcmpeq>
 8006232:	4607      	mov	r7, r0
 8006234:	b158      	cbz	r0, 800624e <_dtoa_r+0xce>
 8006236:	2301      	movs	r3, #1
 8006238:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800623e:	b113      	cbz	r3, 8006246 <_dtoa_r+0xc6>
 8006240:	4b85      	ldr	r3, [pc, #532]	@ (8006458 <_dtoa_r+0x2d8>)
 8006242:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800645c <_dtoa_r+0x2dc>
 800624a:	f000 bd36 	b.w	8006cba <_dtoa_r+0xb3a>
 800624e:	ab14      	add	r3, sp, #80	@ 0x50
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	ab15      	add	r3, sp, #84	@ 0x54
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	4658      	mov	r0, fp
 8006258:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800625c:	f001 f97e 	bl	800755c <__d2b>
 8006260:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006264:	4681      	mov	r9, r0
 8006266:	2e00      	cmp	r6, #0
 8006268:	d077      	beq.n	800635a <_dtoa_r+0x1da>
 800626a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800626e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006270:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006278:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800627c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006280:	9712      	str	r7, [sp, #72]	@ 0x48
 8006282:	4619      	mov	r1, r3
 8006284:	2200      	movs	r2, #0
 8006286:	4b76      	ldr	r3, [pc, #472]	@ (8006460 <_dtoa_r+0x2e0>)
 8006288:	f7f9 ff6e 	bl	8000168 <__aeabi_dsub>
 800628c:	a368      	add	r3, pc, #416	@ (adr r3, 8006430 <_dtoa_r+0x2b0>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7fa f921 	bl	80004d8 <__aeabi_dmul>
 8006296:	a368      	add	r3, pc, #416	@ (adr r3, 8006438 <_dtoa_r+0x2b8>)
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f7f9 ff66 	bl	800016c <__adddf3>
 80062a0:	4604      	mov	r4, r0
 80062a2:	4630      	mov	r0, r6
 80062a4:	460d      	mov	r5, r1
 80062a6:	f7fa f8ad 	bl	8000404 <__aeabi_i2d>
 80062aa:	a365      	add	r3, pc, #404	@ (adr r3, 8006440 <_dtoa_r+0x2c0>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f7fa f912 	bl	80004d8 <__aeabi_dmul>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4620      	mov	r0, r4
 80062ba:	4629      	mov	r1, r5
 80062bc:	f7f9 ff56 	bl	800016c <__adddf3>
 80062c0:	4604      	mov	r4, r0
 80062c2:	460d      	mov	r5, r1
 80062c4:	f7fa fbb8 	bl	8000a38 <__aeabi_d2iz>
 80062c8:	2200      	movs	r2, #0
 80062ca:	4607      	mov	r7, r0
 80062cc:	2300      	movs	r3, #0
 80062ce:	4620      	mov	r0, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	f7fa fb73 	bl	80009bc <__aeabi_dcmplt>
 80062d6:	b140      	cbz	r0, 80062ea <_dtoa_r+0x16a>
 80062d8:	4638      	mov	r0, r7
 80062da:	f7fa f893 	bl	8000404 <__aeabi_i2d>
 80062de:	4622      	mov	r2, r4
 80062e0:	462b      	mov	r3, r5
 80062e2:	f7fa fb61 	bl	80009a8 <__aeabi_dcmpeq>
 80062e6:	b900      	cbnz	r0, 80062ea <_dtoa_r+0x16a>
 80062e8:	3f01      	subs	r7, #1
 80062ea:	2f16      	cmp	r7, #22
 80062ec:	d853      	bhi.n	8006396 <_dtoa_r+0x216>
 80062ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006464 <_dtoa_r+0x2e4>)
 80062f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f7fa fb5e 	bl	80009bc <__aeabi_dcmplt>
 8006300:	2800      	cmp	r0, #0
 8006302:	d04a      	beq.n	800639a <_dtoa_r+0x21a>
 8006304:	2300      	movs	r3, #0
 8006306:	3f01      	subs	r7, #1
 8006308:	930f      	str	r3, [sp, #60]	@ 0x3c
 800630a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800630c:	1b9b      	subs	r3, r3, r6
 800630e:	1e5a      	subs	r2, r3, #1
 8006310:	bf46      	itte	mi
 8006312:	f1c3 0801 	rsbmi	r8, r3, #1
 8006316:	2300      	movmi	r3, #0
 8006318:	f04f 0800 	movpl.w	r8, #0
 800631c:	9209      	str	r2, [sp, #36]	@ 0x24
 800631e:	bf48      	it	mi
 8006320:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006322:	2f00      	cmp	r7, #0
 8006324:	db3b      	blt.n	800639e <_dtoa_r+0x21e>
 8006326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006328:	970e      	str	r7, [sp, #56]	@ 0x38
 800632a:	443b      	add	r3, r7
 800632c:	9309      	str	r3, [sp, #36]	@ 0x24
 800632e:	2300      	movs	r3, #0
 8006330:	930a      	str	r3, [sp, #40]	@ 0x28
 8006332:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006334:	2b09      	cmp	r3, #9
 8006336:	d866      	bhi.n	8006406 <_dtoa_r+0x286>
 8006338:	2b05      	cmp	r3, #5
 800633a:	bfc4      	itt	gt
 800633c:	3b04      	subgt	r3, #4
 800633e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006340:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006342:	bfc8      	it	gt
 8006344:	2400      	movgt	r4, #0
 8006346:	f1a3 0302 	sub.w	r3, r3, #2
 800634a:	bfd8      	it	le
 800634c:	2401      	movle	r4, #1
 800634e:	2b03      	cmp	r3, #3
 8006350:	d864      	bhi.n	800641c <_dtoa_r+0x29c>
 8006352:	e8df f003 	tbb	[pc, r3]
 8006356:	382b      	.short	0x382b
 8006358:	5636      	.short	0x5636
 800635a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800635e:	441e      	add	r6, r3
 8006360:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006364:	2b20      	cmp	r3, #32
 8006366:	bfc1      	itttt	gt
 8006368:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800636c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006370:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006374:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006378:	bfd6      	itet	le
 800637a:	f1c3 0320 	rsble	r3, r3, #32
 800637e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006382:	fa04 f003 	lslle.w	r0, r4, r3
 8006386:	f7fa f82d 	bl	80003e4 <__aeabi_ui2d>
 800638a:	2201      	movs	r2, #1
 800638c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006390:	3e01      	subs	r6, #1
 8006392:	9212      	str	r2, [sp, #72]	@ 0x48
 8006394:	e775      	b.n	8006282 <_dtoa_r+0x102>
 8006396:	2301      	movs	r3, #1
 8006398:	e7b6      	b.n	8006308 <_dtoa_r+0x188>
 800639a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800639c:	e7b5      	b.n	800630a <_dtoa_r+0x18a>
 800639e:	427b      	negs	r3, r7
 80063a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063a2:	2300      	movs	r3, #0
 80063a4:	eba8 0807 	sub.w	r8, r8, r7
 80063a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80063aa:	e7c2      	b.n	8006332 <_dtoa_r+0x1b2>
 80063ac:	2300      	movs	r3, #0
 80063ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	dc35      	bgt.n	8006422 <_dtoa_r+0x2a2>
 80063b6:	2301      	movs	r3, #1
 80063b8:	461a      	mov	r2, r3
 80063ba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80063be:	9221      	str	r2, [sp, #132]	@ 0x84
 80063c0:	e00b      	b.n	80063da <_dtoa_r+0x25a>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e7f3      	b.n	80063ae <_dtoa_r+0x22e>
 80063c6:	2300      	movs	r3, #0
 80063c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	9308      	str	r3, [sp, #32]
 80063d0:	3301      	adds	r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	9307      	str	r3, [sp, #28]
 80063d6:	bfb8      	it	lt
 80063d8:	2301      	movlt	r3, #1
 80063da:	2100      	movs	r1, #0
 80063dc:	2204      	movs	r2, #4
 80063de:	f8db 001c 	ldr.w	r0, [fp, #28]
 80063e2:	f102 0514 	add.w	r5, r2, #20
 80063e6:	429d      	cmp	r5, r3
 80063e8:	d91f      	bls.n	800642a <_dtoa_r+0x2aa>
 80063ea:	6041      	str	r1, [r0, #4]
 80063ec:	4658      	mov	r0, fp
 80063ee:	f000 fd8d 	bl	8006f0c <_Balloc>
 80063f2:	4682      	mov	sl, r0
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d139      	bne.n	800646c <_dtoa_r+0x2ec>
 80063f8:	4602      	mov	r2, r0
 80063fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80063fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006468 <_dtoa_r+0x2e8>)
 8006400:	e6d2      	b.n	80061a8 <_dtoa_r+0x28>
 8006402:	2301      	movs	r3, #1
 8006404:	e7e0      	b.n	80063c8 <_dtoa_r+0x248>
 8006406:	2401      	movs	r4, #1
 8006408:	2300      	movs	r3, #0
 800640a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800640c:	9320      	str	r3, [sp, #128]	@ 0x80
 800640e:	f04f 33ff 	mov.w	r3, #4294967295
 8006412:	2200      	movs	r2, #0
 8006414:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006418:	2312      	movs	r3, #18
 800641a:	e7d0      	b.n	80063be <_dtoa_r+0x23e>
 800641c:	2301      	movs	r3, #1
 800641e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006420:	e7f5      	b.n	800640e <_dtoa_r+0x28e>
 8006422:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006424:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006428:	e7d7      	b.n	80063da <_dtoa_r+0x25a>
 800642a:	3101      	adds	r1, #1
 800642c:	0052      	lsls	r2, r2, #1
 800642e:	e7d8      	b.n	80063e2 <_dtoa_r+0x262>
 8006430:	636f4361 	.word	0x636f4361
 8006434:	3fd287a7 	.word	0x3fd287a7
 8006438:	8b60c8b3 	.word	0x8b60c8b3
 800643c:	3fc68a28 	.word	0x3fc68a28
 8006440:	509f79fb 	.word	0x509f79fb
 8006444:	3fd34413 	.word	0x3fd34413
 8006448:	0800881b 	.word	0x0800881b
 800644c:	08008832 	.word	0x08008832
 8006450:	7ff00000 	.word	0x7ff00000
 8006454:	08008817 	.word	0x08008817
 8006458:	080087eb 	.word	0x080087eb
 800645c:	080087ea 	.word	0x080087ea
 8006460:	3ff80000 	.word	0x3ff80000
 8006464:	08008928 	.word	0x08008928
 8006468:	0800888a 	.word	0x0800888a
 800646c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006470:	6018      	str	r0, [r3, #0]
 8006472:	9b07      	ldr	r3, [sp, #28]
 8006474:	2b0e      	cmp	r3, #14
 8006476:	f200 80a4 	bhi.w	80065c2 <_dtoa_r+0x442>
 800647a:	2c00      	cmp	r4, #0
 800647c:	f000 80a1 	beq.w	80065c2 <_dtoa_r+0x442>
 8006480:	2f00      	cmp	r7, #0
 8006482:	dd33      	ble.n	80064ec <_dtoa_r+0x36c>
 8006484:	4b86      	ldr	r3, [pc, #536]	@ (80066a0 <_dtoa_r+0x520>)
 8006486:	f007 020f 	and.w	r2, r7, #15
 800648a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800648e:	05f8      	lsls	r0, r7, #23
 8006490:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006494:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006498:	ea4f 1427 	mov.w	r4, r7, asr #4
 800649c:	d516      	bpl.n	80064cc <_dtoa_r+0x34c>
 800649e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064a2:	4b80      	ldr	r3, [pc, #512]	@ (80066a4 <_dtoa_r+0x524>)
 80064a4:	2603      	movs	r6, #3
 80064a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064aa:	f7fa f93f 	bl	800072c <__aeabi_ddiv>
 80064ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064b2:	f004 040f 	and.w	r4, r4, #15
 80064b6:	4d7b      	ldr	r5, [pc, #492]	@ (80066a4 <_dtoa_r+0x524>)
 80064b8:	b954      	cbnz	r4, 80064d0 <_dtoa_r+0x350>
 80064ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064c2:	f7fa f933 	bl	800072c <__aeabi_ddiv>
 80064c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ca:	e028      	b.n	800651e <_dtoa_r+0x39e>
 80064cc:	2602      	movs	r6, #2
 80064ce:	e7f2      	b.n	80064b6 <_dtoa_r+0x336>
 80064d0:	07e1      	lsls	r1, r4, #31
 80064d2:	d508      	bpl.n	80064e6 <_dtoa_r+0x366>
 80064d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064dc:	f7f9 fffc 	bl	80004d8 <__aeabi_dmul>
 80064e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064e4:	3601      	adds	r6, #1
 80064e6:	1064      	asrs	r4, r4, #1
 80064e8:	3508      	adds	r5, #8
 80064ea:	e7e5      	b.n	80064b8 <_dtoa_r+0x338>
 80064ec:	f000 80d2 	beq.w	8006694 <_dtoa_r+0x514>
 80064f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064f4:	427c      	negs	r4, r7
 80064f6:	4b6a      	ldr	r3, [pc, #424]	@ (80066a0 <_dtoa_r+0x520>)
 80064f8:	f004 020f 	and.w	r2, r4, #15
 80064fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f7f9 ffe8 	bl	80004d8 <__aeabi_dmul>
 8006508:	2602      	movs	r6, #2
 800650a:	2300      	movs	r3, #0
 800650c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006510:	4d64      	ldr	r5, [pc, #400]	@ (80066a4 <_dtoa_r+0x524>)
 8006512:	1124      	asrs	r4, r4, #4
 8006514:	2c00      	cmp	r4, #0
 8006516:	f040 80b2 	bne.w	800667e <_dtoa_r+0x4fe>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1d3      	bne.n	80064c6 <_dtoa_r+0x346>
 800651e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006522:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 80b7 	beq.w	8006698 <_dtoa_r+0x518>
 800652a:	2200      	movs	r2, #0
 800652c:	4620      	mov	r0, r4
 800652e:	4629      	mov	r1, r5
 8006530:	4b5d      	ldr	r3, [pc, #372]	@ (80066a8 <_dtoa_r+0x528>)
 8006532:	f7fa fa43 	bl	80009bc <__aeabi_dcmplt>
 8006536:	2800      	cmp	r0, #0
 8006538:	f000 80ae 	beq.w	8006698 <_dtoa_r+0x518>
 800653c:	9b07      	ldr	r3, [sp, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 80aa 	beq.w	8006698 <_dtoa_r+0x518>
 8006544:	9b08      	ldr	r3, [sp, #32]
 8006546:	2b00      	cmp	r3, #0
 8006548:	dd37      	ble.n	80065ba <_dtoa_r+0x43a>
 800654a:	1e7b      	subs	r3, r7, #1
 800654c:	4620      	mov	r0, r4
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	2200      	movs	r2, #0
 8006552:	4629      	mov	r1, r5
 8006554:	4b55      	ldr	r3, [pc, #340]	@ (80066ac <_dtoa_r+0x52c>)
 8006556:	f7f9 ffbf 	bl	80004d8 <__aeabi_dmul>
 800655a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800655e:	9c08      	ldr	r4, [sp, #32]
 8006560:	3601      	adds	r6, #1
 8006562:	4630      	mov	r0, r6
 8006564:	f7f9 ff4e 	bl	8000404 <__aeabi_i2d>
 8006568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800656c:	f7f9 ffb4 	bl	80004d8 <__aeabi_dmul>
 8006570:	2200      	movs	r2, #0
 8006572:	4b4f      	ldr	r3, [pc, #316]	@ (80066b0 <_dtoa_r+0x530>)
 8006574:	f7f9 fdfa 	bl	800016c <__adddf3>
 8006578:	4605      	mov	r5, r0
 800657a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800657e:	2c00      	cmp	r4, #0
 8006580:	f040 809a 	bne.w	80066b8 <_dtoa_r+0x538>
 8006584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006588:	2200      	movs	r2, #0
 800658a:	4b4a      	ldr	r3, [pc, #296]	@ (80066b4 <_dtoa_r+0x534>)
 800658c:	f7f9 fdec 	bl	8000168 <__aeabi_dsub>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006598:	462a      	mov	r2, r5
 800659a:	4633      	mov	r3, r6
 800659c:	f7fa fa2c 	bl	80009f8 <__aeabi_dcmpgt>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	f040 828e 	bne.w	8006ac2 <_dtoa_r+0x942>
 80065a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065aa:	462a      	mov	r2, r5
 80065ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065b0:	f7fa fa04 	bl	80009bc <__aeabi_dcmplt>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f040 8127 	bne.w	8006808 <_dtoa_r+0x688>
 80065ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80065be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80065c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f2c0 8163 	blt.w	8006890 <_dtoa_r+0x710>
 80065ca:	2f0e      	cmp	r7, #14
 80065cc:	f300 8160 	bgt.w	8006890 <_dtoa_r+0x710>
 80065d0:	4b33      	ldr	r3, [pc, #204]	@ (80066a0 <_dtoa_r+0x520>)
 80065d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	da03      	bge.n	80065ec <_dtoa_r+0x46c>
 80065e4:	9b07      	ldr	r3, [sp, #28]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f340 8100 	ble.w	80067ec <_dtoa_r+0x66c>
 80065ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80065f0:	4656      	mov	r6, sl
 80065f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7fa f897 	bl	800072c <__aeabi_ddiv>
 80065fe:	f7fa fa1b 	bl	8000a38 <__aeabi_d2iz>
 8006602:	4680      	mov	r8, r0
 8006604:	f7f9 fefe 	bl	8000404 <__aeabi_i2d>
 8006608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800660c:	f7f9 ff64 	bl	80004d8 <__aeabi_dmul>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4620      	mov	r0, r4
 8006616:	4629      	mov	r1, r5
 8006618:	f7f9 fda6 	bl	8000168 <__aeabi_dsub>
 800661c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006620:	9d07      	ldr	r5, [sp, #28]
 8006622:	f806 4b01 	strb.w	r4, [r6], #1
 8006626:	eba6 040a 	sub.w	r4, r6, sl
 800662a:	42a5      	cmp	r5, r4
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	f040 8116 	bne.w	8006860 <_dtoa_r+0x6e0>
 8006634:	f7f9 fd9a 	bl	800016c <__adddf3>
 8006638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800663c:	4604      	mov	r4, r0
 800663e:	460d      	mov	r5, r1
 8006640:	f7fa f9da 	bl	80009f8 <__aeabi_dcmpgt>
 8006644:	2800      	cmp	r0, #0
 8006646:	f040 80f8 	bne.w	800683a <_dtoa_r+0x6ba>
 800664a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7fa f9a9 	bl	80009a8 <__aeabi_dcmpeq>
 8006656:	b118      	cbz	r0, 8006660 <_dtoa_r+0x4e0>
 8006658:	f018 0f01 	tst.w	r8, #1
 800665c:	f040 80ed 	bne.w	800683a <_dtoa_r+0x6ba>
 8006660:	4649      	mov	r1, r9
 8006662:	4658      	mov	r0, fp
 8006664:	f000 fc92 	bl	8006f8c <_Bfree>
 8006668:	2300      	movs	r3, #0
 800666a:	7033      	strb	r3, [r6, #0]
 800666c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800666e:	3701      	adds	r7, #1
 8006670:	601f      	str	r7, [r3, #0]
 8006672:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8320 	beq.w	8006cba <_dtoa_r+0xb3a>
 800667a:	601e      	str	r6, [r3, #0]
 800667c:	e31d      	b.n	8006cba <_dtoa_r+0xb3a>
 800667e:	07e2      	lsls	r2, r4, #31
 8006680:	d505      	bpl.n	800668e <_dtoa_r+0x50e>
 8006682:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006686:	f7f9 ff27 	bl	80004d8 <__aeabi_dmul>
 800668a:	2301      	movs	r3, #1
 800668c:	3601      	adds	r6, #1
 800668e:	1064      	asrs	r4, r4, #1
 8006690:	3508      	adds	r5, #8
 8006692:	e73f      	b.n	8006514 <_dtoa_r+0x394>
 8006694:	2602      	movs	r6, #2
 8006696:	e742      	b.n	800651e <_dtoa_r+0x39e>
 8006698:	9c07      	ldr	r4, [sp, #28]
 800669a:	9704      	str	r7, [sp, #16]
 800669c:	e761      	b.n	8006562 <_dtoa_r+0x3e2>
 800669e:	bf00      	nop
 80066a0:	08008928 	.word	0x08008928
 80066a4:	08008900 	.word	0x08008900
 80066a8:	3ff00000 	.word	0x3ff00000
 80066ac:	40240000 	.word	0x40240000
 80066b0:	401c0000 	.word	0x401c0000
 80066b4:	40140000 	.word	0x40140000
 80066b8:	4b70      	ldr	r3, [pc, #448]	@ (800687c <_dtoa_r+0x6fc>)
 80066ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066c4:	4454      	add	r4, sl
 80066c6:	2900      	cmp	r1, #0
 80066c8:	d045      	beq.n	8006756 <_dtoa_r+0x5d6>
 80066ca:	2000      	movs	r0, #0
 80066cc:	496c      	ldr	r1, [pc, #432]	@ (8006880 <_dtoa_r+0x700>)
 80066ce:	f7fa f82d 	bl	800072c <__aeabi_ddiv>
 80066d2:	4633      	mov	r3, r6
 80066d4:	462a      	mov	r2, r5
 80066d6:	f7f9 fd47 	bl	8000168 <__aeabi_dsub>
 80066da:	4656      	mov	r6, sl
 80066dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066e4:	f7fa f9a8 	bl	8000a38 <__aeabi_d2iz>
 80066e8:	4605      	mov	r5, r0
 80066ea:	f7f9 fe8b 	bl	8000404 <__aeabi_i2d>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f6:	f7f9 fd37 	bl	8000168 <__aeabi_dsub>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	3530      	adds	r5, #48	@ 0x30
 8006700:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006704:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006708:	f806 5b01 	strb.w	r5, [r6], #1
 800670c:	f7fa f956 	bl	80009bc <__aeabi_dcmplt>
 8006710:	2800      	cmp	r0, #0
 8006712:	d163      	bne.n	80067dc <_dtoa_r+0x65c>
 8006714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006718:	2000      	movs	r0, #0
 800671a:	495a      	ldr	r1, [pc, #360]	@ (8006884 <_dtoa_r+0x704>)
 800671c:	f7f9 fd24 	bl	8000168 <__aeabi_dsub>
 8006720:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006724:	f7fa f94a 	bl	80009bc <__aeabi_dcmplt>
 8006728:	2800      	cmp	r0, #0
 800672a:	f040 8087 	bne.w	800683c <_dtoa_r+0x6bc>
 800672e:	42a6      	cmp	r6, r4
 8006730:	f43f af43 	beq.w	80065ba <_dtoa_r+0x43a>
 8006734:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006738:	2200      	movs	r2, #0
 800673a:	4b53      	ldr	r3, [pc, #332]	@ (8006888 <_dtoa_r+0x708>)
 800673c:	f7f9 fecc 	bl	80004d8 <__aeabi_dmul>
 8006740:	2200      	movs	r2, #0
 8006742:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800674a:	4b4f      	ldr	r3, [pc, #316]	@ (8006888 <_dtoa_r+0x708>)
 800674c:	f7f9 fec4 	bl	80004d8 <__aeabi_dmul>
 8006750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006754:	e7c4      	b.n	80066e0 <_dtoa_r+0x560>
 8006756:	4631      	mov	r1, r6
 8006758:	4628      	mov	r0, r5
 800675a:	f7f9 febd 	bl	80004d8 <__aeabi_dmul>
 800675e:	4656      	mov	r6, sl
 8006760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006764:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800676a:	f7fa f965 	bl	8000a38 <__aeabi_d2iz>
 800676e:	4605      	mov	r5, r0
 8006770:	f7f9 fe48 	bl	8000404 <__aeabi_i2d>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800677c:	f7f9 fcf4 	bl	8000168 <__aeabi_dsub>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	3530      	adds	r5, #48	@ 0x30
 8006786:	f806 5b01 	strb.w	r5, [r6], #1
 800678a:	42a6      	cmp	r6, r4
 800678c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	d124      	bne.n	80067e0 <_dtoa_r+0x660>
 8006796:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800679a:	4b39      	ldr	r3, [pc, #228]	@ (8006880 <_dtoa_r+0x700>)
 800679c:	f7f9 fce6 	bl	800016c <__adddf3>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a8:	f7fa f926 	bl	80009f8 <__aeabi_dcmpgt>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d145      	bne.n	800683c <_dtoa_r+0x6bc>
 80067b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067b4:	2000      	movs	r0, #0
 80067b6:	4932      	ldr	r1, [pc, #200]	@ (8006880 <_dtoa_r+0x700>)
 80067b8:	f7f9 fcd6 	bl	8000168 <__aeabi_dsub>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c4:	f7fa f8fa 	bl	80009bc <__aeabi_dcmplt>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f43f aef6 	beq.w	80065ba <_dtoa_r+0x43a>
 80067ce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80067d0:	1e73      	subs	r3, r6, #1
 80067d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80067d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067d8:	2b30      	cmp	r3, #48	@ 0x30
 80067da:	d0f8      	beq.n	80067ce <_dtoa_r+0x64e>
 80067dc:	9f04      	ldr	r7, [sp, #16]
 80067de:	e73f      	b.n	8006660 <_dtoa_r+0x4e0>
 80067e0:	4b29      	ldr	r3, [pc, #164]	@ (8006888 <_dtoa_r+0x708>)
 80067e2:	f7f9 fe79 	bl	80004d8 <__aeabi_dmul>
 80067e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ea:	e7bc      	b.n	8006766 <_dtoa_r+0x5e6>
 80067ec:	d10c      	bne.n	8006808 <_dtoa_r+0x688>
 80067ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067f2:	2200      	movs	r2, #0
 80067f4:	4b25      	ldr	r3, [pc, #148]	@ (800688c <_dtoa_r+0x70c>)
 80067f6:	f7f9 fe6f 	bl	80004d8 <__aeabi_dmul>
 80067fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067fe:	f7fa f8f1 	bl	80009e4 <__aeabi_dcmpge>
 8006802:	2800      	cmp	r0, #0
 8006804:	f000 815b 	beq.w	8006abe <_dtoa_r+0x93e>
 8006808:	2400      	movs	r4, #0
 800680a:	4625      	mov	r5, r4
 800680c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800680e:	4656      	mov	r6, sl
 8006810:	43db      	mvns	r3, r3
 8006812:	9304      	str	r3, [sp, #16]
 8006814:	2700      	movs	r7, #0
 8006816:	4621      	mov	r1, r4
 8006818:	4658      	mov	r0, fp
 800681a:	f000 fbb7 	bl	8006f8c <_Bfree>
 800681e:	2d00      	cmp	r5, #0
 8006820:	d0dc      	beq.n	80067dc <_dtoa_r+0x65c>
 8006822:	b12f      	cbz	r7, 8006830 <_dtoa_r+0x6b0>
 8006824:	42af      	cmp	r7, r5
 8006826:	d003      	beq.n	8006830 <_dtoa_r+0x6b0>
 8006828:	4639      	mov	r1, r7
 800682a:	4658      	mov	r0, fp
 800682c:	f000 fbae 	bl	8006f8c <_Bfree>
 8006830:	4629      	mov	r1, r5
 8006832:	4658      	mov	r0, fp
 8006834:	f000 fbaa 	bl	8006f8c <_Bfree>
 8006838:	e7d0      	b.n	80067dc <_dtoa_r+0x65c>
 800683a:	9704      	str	r7, [sp, #16]
 800683c:	4633      	mov	r3, r6
 800683e:	461e      	mov	r6, r3
 8006840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006844:	2a39      	cmp	r2, #57	@ 0x39
 8006846:	d107      	bne.n	8006858 <_dtoa_r+0x6d8>
 8006848:	459a      	cmp	sl, r3
 800684a:	d1f8      	bne.n	800683e <_dtoa_r+0x6be>
 800684c:	9a04      	ldr	r2, [sp, #16]
 800684e:	3201      	adds	r2, #1
 8006850:	9204      	str	r2, [sp, #16]
 8006852:	2230      	movs	r2, #48	@ 0x30
 8006854:	f88a 2000 	strb.w	r2, [sl]
 8006858:	781a      	ldrb	r2, [r3, #0]
 800685a:	3201      	adds	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e7bd      	b.n	80067dc <_dtoa_r+0x65c>
 8006860:	2200      	movs	r2, #0
 8006862:	4b09      	ldr	r3, [pc, #36]	@ (8006888 <_dtoa_r+0x708>)
 8006864:	f7f9 fe38 	bl	80004d8 <__aeabi_dmul>
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	4604      	mov	r4, r0
 800686e:	460d      	mov	r5, r1
 8006870:	f7fa f89a 	bl	80009a8 <__aeabi_dcmpeq>
 8006874:	2800      	cmp	r0, #0
 8006876:	f43f aebc 	beq.w	80065f2 <_dtoa_r+0x472>
 800687a:	e6f1      	b.n	8006660 <_dtoa_r+0x4e0>
 800687c:	08008928 	.word	0x08008928
 8006880:	3fe00000 	.word	0x3fe00000
 8006884:	3ff00000 	.word	0x3ff00000
 8006888:	40240000 	.word	0x40240000
 800688c:	40140000 	.word	0x40140000
 8006890:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006892:	2a00      	cmp	r2, #0
 8006894:	f000 80db 	beq.w	8006a4e <_dtoa_r+0x8ce>
 8006898:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800689a:	2a01      	cmp	r2, #1
 800689c:	f300 80bf 	bgt.w	8006a1e <_dtoa_r+0x89e>
 80068a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068a2:	2a00      	cmp	r2, #0
 80068a4:	f000 80b7 	beq.w	8006a16 <_dtoa_r+0x896>
 80068a8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068ac:	4646      	mov	r6, r8
 80068ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068b2:	2101      	movs	r1, #1
 80068b4:	441a      	add	r2, r3
 80068b6:	4658      	mov	r0, fp
 80068b8:	4498      	add	r8, r3
 80068ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80068bc:	f000 fc1a 	bl	80070f4 <__i2b>
 80068c0:	4605      	mov	r5, r0
 80068c2:	b15e      	cbz	r6, 80068dc <_dtoa_r+0x75c>
 80068c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dd08      	ble.n	80068dc <_dtoa_r+0x75c>
 80068ca:	42b3      	cmp	r3, r6
 80068cc:	bfa8      	it	ge
 80068ce:	4633      	movge	r3, r6
 80068d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068d2:	eba8 0803 	sub.w	r8, r8, r3
 80068d6:	1af6      	subs	r6, r6, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	9309      	str	r3, [sp, #36]	@ 0x24
 80068dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068de:	b1f3      	cbz	r3, 800691e <_dtoa_r+0x79e>
 80068e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 80b7 	beq.w	8006a56 <_dtoa_r+0x8d6>
 80068e8:	b18c      	cbz	r4, 800690e <_dtoa_r+0x78e>
 80068ea:	4629      	mov	r1, r5
 80068ec:	4622      	mov	r2, r4
 80068ee:	4658      	mov	r0, fp
 80068f0:	f000 fcbe 	bl	8007270 <__pow5mult>
 80068f4:	464a      	mov	r2, r9
 80068f6:	4601      	mov	r1, r0
 80068f8:	4605      	mov	r5, r0
 80068fa:	4658      	mov	r0, fp
 80068fc:	f000 fc10 	bl	8007120 <__multiply>
 8006900:	4649      	mov	r1, r9
 8006902:	9004      	str	r0, [sp, #16]
 8006904:	4658      	mov	r0, fp
 8006906:	f000 fb41 	bl	8006f8c <_Bfree>
 800690a:	9b04      	ldr	r3, [sp, #16]
 800690c:	4699      	mov	r9, r3
 800690e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006910:	1b1a      	subs	r2, r3, r4
 8006912:	d004      	beq.n	800691e <_dtoa_r+0x79e>
 8006914:	4649      	mov	r1, r9
 8006916:	4658      	mov	r0, fp
 8006918:	f000 fcaa 	bl	8007270 <__pow5mult>
 800691c:	4681      	mov	r9, r0
 800691e:	2101      	movs	r1, #1
 8006920:	4658      	mov	r0, fp
 8006922:	f000 fbe7 	bl	80070f4 <__i2b>
 8006926:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006928:	4604      	mov	r4, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 81c9 	beq.w	8006cc2 <_dtoa_r+0xb42>
 8006930:	461a      	mov	r2, r3
 8006932:	4601      	mov	r1, r0
 8006934:	4658      	mov	r0, fp
 8006936:	f000 fc9b 	bl	8007270 <__pow5mult>
 800693a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800693c:	4604      	mov	r4, r0
 800693e:	2b01      	cmp	r3, #1
 8006940:	f300 808f 	bgt.w	8006a62 <_dtoa_r+0x8e2>
 8006944:	9b02      	ldr	r3, [sp, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	f040 8087 	bne.w	8006a5a <_dtoa_r+0x8da>
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 8083 	bne.w	8006a5e <_dtoa_r+0x8de>
 8006958:	9b03      	ldr	r3, [sp, #12]
 800695a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800695e:	0d1b      	lsrs	r3, r3, #20
 8006960:	051b      	lsls	r3, r3, #20
 8006962:	b12b      	cbz	r3, 8006970 <_dtoa_r+0x7f0>
 8006964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006966:	f108 0801 	add.w	r8, r8, #1
 800696a:	3301      	adds	r3, #1
 800696c:	9309      	str	r3, [sp, #36]	@ 0x24
 800696e:	2301      	movs	r3, #1
 8006970:	930a      	str	r3, [sp, #40]	@ 0x28
 8006972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 81aa 	beq.w	8006cce <_dtoa_r+0xb4e>
 800697a:	6923      	ldr	r3, [r4, #16]
 800697c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006980:	6918      	ldr	r0, [r3, #16]
 8006982:	f000 fb6b 	bl	800705c <__hi0bits>
 8006986:	f1c0 0020 	rsb	r0, r0, #32
 800698a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800698c:	4418      	add	r0, r3
 800698e:	f010 001f 	ands.w	r0, r0, #31
 8006992:	d071      	beq.n	8006a78 <_dtoa_r+0x8f8>
 8006994:	f1c0 0320 	rsb	r3, r0, #32
 8006998:	2b04      	cmp	r3, #4
 800699a:	dd65      	ble.n	8006a68 <_dtoa_r+0x8e8>
 800699c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800699e:	f1c0 001c 	rsb	r0, r0, #28
 80069a2:	4403      	add	r3, r0
 80069a4:	4480      	add	r8, r0
 80069a6:	4406      	add	r6, r0
 80069a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069aa:	f1b8 0f00 	cmp.w	r8, #0
 80069ae:	dd05      	ble.n	80069bc <_dtoa_r+0x83c>
 80069b0:	4649      	mov	r1, r9
 80069b2:	4642      	mov	r2, r8
 80069b4:	4658      	mov	r0, fp
 80069b6:	f000 fcb5 	bl	8007324 <__lshift>
 80069ba:	4681      	mov	r9, r0
 80069bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	dd05      	ble.n	80069ce <_dtoa_r+0x84e>
 80069c2:	4621      	mov	r1, r4
 80069c4:	461a      	mov	r2, r3
 80069c6:	4658      	mov	r0, fp
 80069c8:	f000 fcac 	bl	8007324 <__lshift>
 80069cc:	4604      	mov	r4, r0
 80069ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d053      	beq.n	8006a7c <_dtoa_r+0x8fc>
 80069d4:	4621      	mov	r1, r4
 80069d6:	4648      	mov	r0, r9
 80069d8:	f000 fd10 	bl	80073fc <__mcmp>
 80069dc:	2800      	cmp	r0, #0
 80069de:	da4d      	bge.n	8006a7c <_dtoa_r+0x8fc>
 80069e0:	1e7b      	subs	r3, r7, #1
 80069e2:	4649      	mov	r1, r9
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	220a      	movs	r2, #10
 80069e8:	2300      	movs	r3, #0
 80069ea:	4658      	mov	r0, fp
 80069ec:	f000 faf0 	bl	8006fd0 <__multadd>
 80069f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069f2:	4681      	mov	r9, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 816c 	beq.w	8006cd2 <_dtoa_r+0xb52>
 80069fa:	2300      	movs	r3, #0
 80069fc:	4629      	mov	r1, r5
 80069fe:	220a      	movs	r2, #10
 8006a00:	4658      	mov	r0, fp
 8006a02:	f000 fae5 	bl	8006fd0 <__multadd>
 8006a06:	9b08      	ldr	r3, [sp, #32]
 8006a08:	4605      	mov	r5, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	dc61      	bgt.n	8006ad2 <_dtoa_r+0x952>
 8006a0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	dc3b      	bgt.n	8006a8c <_dtoa_r+0x90c>
 8006a14:	e05d      	b.n	8006ad2 <_dtoa_r+0x952>
 8006a16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a18:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a1c:	e746      	b.n	80068ac <_dtoa_r+0x72c>
 8006a1e:	9b07      	ldr	r3, [sp, #28]
 8006a20:	1e5c      	subs	r4, r3, #1
 8006a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	bfbf      	itttt	lt
 8006a28:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a2a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006a2c:	1ae3      	sublt	r3, r4, r3
 8006a2e:	18d2      	addlt	r2, r2, r3
 8006a30:	bfa8      	it	ge
 8006a32:	1b1c      	subge	r4, r3, r4
 8006a34:	9b07      	ldr	r3, [sp, #28]
 8006a36:	bfbe      	ittt	lt
 8006a38:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a3a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006a3c:	2400      	movlt	r4, #0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bfb5      	itete	lt
 8006a42:	eba8 0603 	sublt.w	r6, r8, r3
 8006a46:	4646      	movge	r6, r8
 8006a48:	2300      	movlt	r3, #0
 8006a4a:	9b07      	ldrge	r3, [sp, #28]
 8006a4c:	e730      	b.n	80068b0 <_dtoa_r+0x730>
 8006a4e:	4646      	mov	r6, r8
 8006a50:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a52:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a54:	e735      	b.n	80068c2 <_dtoa_r+0x742>
 8006a56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a58:	e75c      	b.n	8006914 <_dtoa_r+0x794>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e788      	b.n	8006970 <_dtoa_r+0x7f0>
 8006a5e:	9b02      	ldr	r3, [sp, #8]
 8006a60:	e786      	b.n	8006970 <_dtoa_r+0x7f0>
 8006a62:	2300      	movs	r3, #0
 8006a64:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a66:	e788      	b.n	800697a <_dtoa_r+0x7fa>
 8006a68:	d09f      	beq.n	80069aa <_dtoa_r+0x82a>
 8006a6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a6c:	331c      	adds	r3, #28
 8006a6e:	441a      	add	r2, r3
 8006a70:	4498      	add	r8, r3
 8006a72:	441e      	add	r6, r3
 8006a74:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a76:	e798      	b.n	80069aa <_dtoa_r+0x82a>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	e7f6      	b.n	8006a6a <_dtoa_r+0x8ea>
 8006a7c:	9b07      	ldr	r3, [sp, #28]
 8006a7e:	9704      	str	r7, [sp, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	dc20      	bgt.n	8006ac6 <_dtoa_r+0x946>
 8006a84:	9308      	str	r3, [sp, #32]
 8006a86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	dd1e      	ble.n	8006aca <_dtoa_r+0x94a>
 8006a8c:	9b08      	ldr	r3, [sp, #32]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f47f aebc 	bne.w	800680c <_dtoa_r+0x68c>
 8006a94:	4621      	mov	r1, r4
 8006a96:	2205      	movs	r2, #5
 8006a98:	4658      	mov	r0, fp
 8006a9a:	f000 fa99 	bl	8006fd0 <__multadd>
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	4648      	mov	r0, r9
 8006aa4:	f000 fcaa 	bl	80073fc <__mcmp>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	f77f aeaf 	ble.w	800680c <_dtoa_r+0x68c>
 8006aae:	2331      	movs	r3, #49	@ 0x31
 8006ab0:	4656      	mov	r6, sl
 8006ab2:	f806 3b01 	strb.w	r3, [r6], #1
 8006ab6:	9b04      	ldr	r3, [sp, #16]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	9304      	str	r3, [sp, #16]
 8006abc:	e6aa      	b.n	8006814 <_dtoa_r+0x694>
 8006abe:	9c07      	ldr	r4, [sp, #28]
 8006ac0:	9704      	str	r7, [sp, #16]
 8006ac2:	4625      	mov	r5, r4
 8006ac4:	e7f3      	b.n	8006aae <_dtoa_r+0x92e>
 8006ac6:	9b07      	ldr	r3, [sp, #28]
 8006ac8:	9308      	str	r3, [sp, #32]
 8006aca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8104 	beq.w	8006cda <_dtoa_r+0xb5a>
 8006ad2:	2e00      	cmp	r6, #0
 8006ad4:	dd05      	ble.n	8006ae2 <_dtoa_r+0x962>
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	4632      	mov	r2, r6
 8006ada:	4658      	mov	r0, fp
 8006adc:	f000 fc22 	bl	8007324 <__lshift>
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d05a      	beq.n	8006b9e <_dtoa_r+0xa1e>
 8006ae8:	4658      	mov	r0, fp
 8006aea:	6869      	ldr	r1, [r5, #4]
 8006aec:	f000 fa0e 	bl	8006f0c <_Balloc>
 8006af0:	4606      	mov	r6, r0
 8006af2:	b928      	cbnz	r0, 8006b00 <_dtoa_r+0x980>
 8006af4:	4602      	mov	r2, r0
 8006af6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006afa:	4b83      	ldr	r3, [pc, #524]	@ (8006d08 <_dtoa_r+0xb88>)
 8006afc:	f7ff bb54 	b.w	80061a8 <_dtoa_r+0x28>
 8006b00:	692a      	ldr	r2, [r5, #16]
 8006b02:	f105 010c 	add.w	r1, r5, #12
 8006b06:	3202      	adds	r2, #2
 8006b08:	0092      	lsls	r2, r2, #2
 8006b0a:	300c      	adds	r0, #12
 8006b0c:	f7ff faa1 	bl	8006052 <memcpy>
 8006b10:	2201      	movs	r2, #1
 8006b12:	4631      	mov	r1, r6
 8006b14:	4658      	mov	r0, fp
 8006b16:	f000 fc05 	bl	8007324 <__lshift>
 8006b1a:	462f      	mov	r7, r5
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	f10a 0301 	add.w	r3, sl, #1
 8006b22:	9307      	str	r3, [sp, #28]
 8006b24:	9b08      	ldr	r3, [sp, #32]
 8006b26:	4453      	add	r3, sl
 8006b28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b2a:	9b02      	ldr	r3, [sp, #8]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b32:	9b07      	ldr	r3, [sp, #28]
 8006b34:	4621      	mov	r1, r4
 8006b36:	3b01      	subs	r3, #1
 8006b38:	4648      	mov	r0, r9
 8006b3a:	9302      	str	r3, [sp, #8]
 8006b3c:	f7ff fa97 	bl	800606e <quorem>
 8006b40:	4639      	mov	r1, r7
 8006b42:	9008      	str	r0, [sp, #32]
 8006b44:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b48:	4648      	mov	r0, r9
 8006b4a:	f000 fc57 	bl	80073fc <__mcmp>
 8006b4e:	462a      	mov	r2, r5
 8006b50:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b52:	4621      	mov	r1, r4
 8006b54:	4658      	mov	r0, fp
 8006b56:	f000 fc6d 	bl	8007434 <__mdiff>
 8006b5a:	68c2      	ldr	r2, [r0, #12]
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	bb02      	cbnz	r2, 8006ba2 <_dtoa_r+0xa22>
 8006b60:	4601      	mov	r1, r0
 8006b62:	4648      	mov	r0, r9
 8006b64:	f000 fc4a 	bl	80073fc <__mcmp>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4658      	mov	r0, fp
 8006b6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b70:	f000 fa0c 	bl	8006f8c <_Bfree>
 8006b74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b78:	9e07      	ldr	r6, [sp, #28]
 8006b7a:	ea43 0102 	orr.w	r1, r3, r2
 8006b7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b80:	4319      	orrs	r1, r3
 8006b82:	d110      	bne.n	8006ba6 <_dtoa_r+0xa26>
 8006b84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b88:	d029      	beq.n	8006bde <_dtoa_r+0xa5e>
 8006b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dd02      	ble.n	8006b96 <_dtoa_r+0xa16>
 8006b90:	9b08      	ldr	r3, [sp, #32]
 8006b92:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b96:	9b02      	ldr	r3, [sp, #8]
 8006b98:	f883 8000 	strb.w	r8, [r3]
 8006b9c:	e63b      	b.n	8006816 <_dtoa_r+0x696>
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	e7bb      	b.n	8006b1a <_dtoa_r+0x99a>
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	e7e1      	b.n	8006b6a <_dtoa_r+0x9ea>
 8006ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	db04      	blt.n	8006bb6 <_dtoa_r+0xa36>
 8006bac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	d120      	bne.n	8006bf8 <_dtoa_r+0xa78>
 8006bb6:	2a00      	cmp	r2, #0
 8006bb8:	dded      	ble.n	8006b96 <_dtoa_r+0xa16>
 8006bba:	4649      	mov	r1, r9
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	4658      	mov	r0, fp
 8006bc0:	f000 fbb0 	bl	8007324 <__lshift>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4681      	mov	r9, r0
 8006bc8:	f000 fc18 	bl	80073fc <__mcmp>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	dc03      	bgt.n	8006bd8 <_dtoa_r+0xa58>
 8006bd0:	d1e1      	bne.n	8006b96 <_dtoa_r+0xa16>
 8006bd2:	f018 0f01 	tst.w	r8, #1
 8006bd6:	d0de      	beq.n	8006b96 <_dtoa_r+0xa16>
 8006bd8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bdc:	d1d8      	bne.n	8006b90 <_dtoa_r+0xa10>
 8006bde:	2339      	movs	r3, #57	@ 0x39
 8006be0:	9a02      	ldr	r2, [sp, #8]
 8006be2:	7013      	strb	r3, [r2, #0]
 8006be4:	4633      	mov	r3, r6
 8006be6:	461e      	mov	r6, r3
 8006be8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	2a39      	cmp	r2, #57	@ 0x39
 8006bf0:	d052      	beq.n	8006c98 <_dtoa_r+0xb18>
 8006bf2:	3201      	adds	r2, #1
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	e60e      	b.n	8006816 <_dtoa_r+0x696>
 8006bf8:	2a00      	cmp	r2, #0
 8006bfa:	dd07      	ble.n	8006c0c <_dtoa_r+0xa8c>
 8006bfc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c00:	d0ed      	beq.n	8006bde <_dtoa_r+0xa5e>
 8006c02:	9a02      	ldr	r2, [sp, #8]
 8006c04:	f108 0301 	add.w	r3, r8, #1
 8006c08:	7013      	strb	r3, [r2, #0]
 8006c0a:	e604      	b.n	8006816 <_dtoa_r+0x696>
 8006c0c:	9b07      	ldr	r3, [sp, #28]
 8006c0e:	9a07      	ldr	r2, [sp, #28]
 8006c10:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d028      	beq.n	8006c6c <_dtoa_r+0xaec>
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	220a      	movs	r2, #10
 8006c20:	4658      	mov	r0, fp
 8006c22:	f000 f9d5 	bl	8006fd0 <__multadd>
 8006c26:	42af      	cmp	r7, r5
 8006c28:	4681      	mov	r9, r0
 8006c2a:	f04f 0300 	mov.w	r3, #0
 8006c2e:	f04f 020a 	mov.w	r2, #10
 8006c32:	4639      	mov	r1, r7
 8006c34:	4658      	mov	r0, fp
 8006c36:	d107      	bne.n	8006c48 <_dtoa_r+0xac8>
 8006c38:	f000 f9ca 	bl	8006fd0 <__multadd>
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	4605      	mov	r5, r0
 8006c40:	9b07      	ldr	r3, [sp, #28]
 8006c42:	3301      	adds	r3, #1
 8006c44:	9307      	str	r3, [sp, #28]
 8006c46:	e774      	b.n	8006b32 <_dtoa_r+0x9b2>
 8006c48:	f000 f9c2 	bl	8006fd0 <__multadd>
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	4607      	mov	r7, r0
 8006c50:	2300      	movs	r3, #0
 8006c52:	220a      	movs	r2, #10
 8006c54:	4658      	mov	r0, fp
 8006c56:	f000 f9bb 	bl	8006fd0 <__multadd>
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	e7f0      	b.n	8006c40 <_dtoa_r+0xac0>
 8006c5e:	9b08      	ldr	r3, [sp, #32]
 8006c60:	2700      	movs	r7, #0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	bfcc      	ite	gt
 8006c66:	461e      	movgt	r6, r3
 8006c68:	2601      	movle	r6, #1
 8006c6a:	4456      	add	r6, sl
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4658      	mov	r0, fp
 8006c72:	f000 fb57 	bl	8007324 <__lshift>
 8006c76:	4621      	mov	r1, r4
 8006c78:	4681      	mov	r9, r0
 8006c7a:	f000 fbbf 	bl	80073fc <__mcmp>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	dcb0      	bgt.n	8006be4 <_dtoa_r+0xa64>
 8006c82:	d102      	bne.n	8006c8a <_dtoa_r+0xb0a>
 8006c84:	f018 0f01 	tst.w	r8, #1
 8006c88:	d1ac      	bne.n	8006be4 <_dtoa_r+0xa64>
 8006c8a:	4633      	mov	r3, r6
 8006c8c:	461e      	mov	r6, r3
 8006c8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c92:	2a30      	cmp	r2, #48	@ 0x30
 8006c94:	d0fa      	beq.n	8006c8c <_dtoa_r+0xb0c>
 8006c96:	e5be      	b.n	8006816 <_dtoa_r+0x696>
 8006c98:	459a      	cmp	sl, r3
 8006c9a:	d1a4      	bne.n	8006be6 <_dtoa_r+0xa66>
 8006c9c:	9b04      	ldr	r3, [sp, #16]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	2331      	movs	r3, #49	@ 0x31
 8006ca4:	f88a 3000 	strb.w	r3, [sl]
 8006ca8:	e5b5      	b.n	8006816 <_dtoa_r+0x696>
 8006caa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d0c <_dtoa_r+0xb8c>
 8006cb0:	b11b      	cbz	r3, 8006cba <_dtoa_r+0xb3a>
 8006cb2:	f10a 0308 	add.w	r3, sl, #8
 8006cb6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	4650      	mov	r0, sl
 8006cbc:	b017      	add	sp, #92	@ 0x5c
 8006cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	f77f ae3d 	ble.w	8006944 <_dtoa_r+0x7c4>
 8006cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ccc:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cce:	2001      	movs	r0, #1
 8006cd0:	e65b      	b.n	800698a <_dtoa_r+0x80a>
 8006cd2:	9b08      	ldr	r3, [sp, #32]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f77f aed6 	ble.w	8006a86 <_dtoa_r+0x906>
 8006cda:	4656      	mov	r6, sl
 8006cdc:	4621      	mov	r1, r4
 8006cde:	4648      	mov	r0, r9
 8006ce0:	f7ff f9c5 	bl	800606e <quorem>
 8006ce4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ce8:	9b08      	ldr	r3, [sp, #32]
 8006cea:	f806 8b01 	strb.w	r8, [r6], #1
 8006cee:	eba6 020a 	sub.w	r2, r6, sl
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	ddb3      	ble.n	8006c5e <_dtoa_r+0xade>
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	220a      	movs	r2, #10
 8006cfc:	4658      	mov	r0, fp
 8006cfe:	f000 f967 	bl	8006fd0 <__multadd>
 8006d02:	4681      	mov	r9, r0
 8006d04:	e7ea      	b.n	8006cdc <_dtoa_r+0xb5c>
 8006d06:	bf00      	nop
 8006d08:	0800888a 	.word	0x0800888a
 8006d0c:	0800880e 	.word	0x0800880e

08006d10 <_free_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4605      	mov	r5, r0
 8006d14:	2900      	cmp	r1, #0
 8006d16:	d040      	beq.n	8006d9a <_free_r+0x8a>
 8006d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d1c:	1f0c      	subs	r4, r1, #4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bfb8      	it	lt
 8006d22:	18e4      	addlt	r4, r4, r3
 8006d24:	f000 f8e6 	bl	8006ef4 <__malloc_lock>
 8006d28:	4a1c      	ldr	r2, [pc, #112]	@ (8006d9c <_free_r+0x8c>)
 8006d2a:	6813      	ldr	r3, [r2, #0]
 8006d2c:	b933      	cbnz	r3, 8006d3c <_free_r+0x2c>
 8006d2e:	6063      	str	r3, [r4, #4]
 8006d30:	6014      	str	r4, [r2, #0]
 8006d32:	4628      	mov	r0, r5
 8006d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d38:	f000 b8e2 	b.w	8006f00 <__malloc_unlock>
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	d908      	bls.n	8006d52 <_free_r+0x42>
 8006d40:	6820      	ldr	r0, [r4, #0]
 8006d42:	1821      	adds	r1, r4, r0
 8006d44:	428b      	cmp	r3, r1
 8006d46:	bf01      	itttt	eq
 8006d48:	6819      	ldreq	r1, [r3, #0]
 8006d4a:	685b      	ldreq	r3, [r3, #4]
 8006d4c:	1809      	addeq	r1, r1, r0
 8006d4e:	6021      	streq	r1, [r4, #0]
 8006d50:	e7ed      	b.n	8006d2e <_free_r+0x1e>
 8006d52:	461a      	mov	r2, r3
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	b10b      	cbz	r3, 8006d5c <_free_r+0x4c>
 8006d58:	42a3      	cmp	r3, r4
 8006d5a:	d9fa      	bls.n	8006d52 <_free_r+0x42>
 8006d5c:	6811      	ldr	r1, [r2, #0]
 8006d5e:	1850      	adds	r0, r2, r1
 8006d60:	42a0      	cmp	r0, r4
 8006d62:	d10b      	bne.n	8006d7c <_free_r+0x6c>
 8006d64:	6820      	ldr	r0, [r4, #0]
 8006d66:	4401      	add	r1, r0
 8006d68:	1850      	adds	r0, r2, r1
 8006d6a:	4283      	cmp	r3, r0
 8006d6c:	6011      	str	r1, [r2, #0]
 8006d6e:	d1e0      	bne.n	8006d32 <_free_r+0x22>
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4408      	add	r0, r1
 8006d76:	6010      	str	r0, [r2, #0]
 8006d78:	6053      	str	r3, [r2, #4]
 8006d7a:	e7da      	b.n	8006d32 <_free_r+0x22>
 8006d7c:	d902      	bls.n	8006d84 <_free_r+0x74>
 8006d7e:	230c      	movs	r3, #12
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	e7d6      	b.n	8006d32 <_free_r+0x22>
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	1821      	adds	r1, r4, r0
 8006d88:	428b      	cmp	r3, r1
 8006d8a:	bf01      	itttt	eq
 8006d8c:	6819      	ldreq	r1, [r3, #0]
 8006d8e:	685b      	ldreq	r3, [r3, #4]
 8006d90:	1809      	addeq	r1, r1, r0
 8006d92:	6021      	streq	r1, [r4, #0]
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	6054      	str	r4, [r2, #4]
 8006d98:	e7cb      	b.n	8006d32 <_free_r+0x22>
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	20000980 	.word	0x20000980

08006da0 <malloc>:
 8006da0:	4b02      	ldr	r3, [pc, #8]	@ (8006dac <malloc+0xc>)
 8006da2:	4601      	mov	r1, r0
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	f000 b825 	b.w	8006df4 <_malloc_r>
 8006daa:	bf00      	nop
 8006dac:	20000018 	.word	0x20000018

08006db0 <sbrk_aligned>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	4e0f      	ldr	r6, [pc, #60]	@ (8006df0 <sbrk_aligned+0x40>)
 8006db4:	460c      	mov	r4, r1
 8006db6:	6831      	ldr	r1, [r6, #0]
 8006db8:	4605      	mov	r5, r0
 8006dba:	b911      	cbnz	r1, 8006dc2 <sbrk_aligned+0x12>
 8006dbc:	f000 fe40 	bl	8007a40 <_sbrk_r>
 8006dc0:	6030      	str	r0, [r6, #0]
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 fe3b 	bl	8007a40 <_sbrk_r>
 8006dca:	1c43      	adds	r3, r0, #1
 8006dcc:	d103      	bne.n	8006dd6 <sbrk_aligned+0x26>
 8006dce:	f04f 34ff 	mov.w	r4, #4294967295
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	bd70      	pop	{r4, r5, r6, pc}
 8006dd6:	1cc4      	adds	r4, r0, #3
 8006dd8:	f024 0403 	bic.w	r4, r4, #3
 8006ddc:	42a0      	cmp	r0, r4
 8006dde:	d0f8      	beq.n	8006dd2 <sbrk_aligned+0x22>
 8006de0:	1a21      	subs	r1, r4, r0
 8006de2:	4628      	mov	r0, r5
 8006de4:	f000 fe2c 	bl	8007a40 <_sbrk_r>
 8006de8:	3001      	adds	r0, #1
 8006dea:	d1f2      	bne.n	8006dd2 <sbrk_aligned+0x22>
 8006dec:	e7ef      	b.n	8006dce <sbrk_aligned+0x1e>
 8006dee:	bf00      	nop
 8006df0:	2000097c 	.word	0x2000097c

08006df4 <_malloc_r>:
 8006df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006df8:	1ccd      	adds	r5, r1, #3
 8006dfa:	f025 0503 	bic.w	r5, r5, #3
 8006dfe:	3508      	adds	r5, #8
 8006e00:	2d0c      	cmp	r5, #12
 8006e02:	bf38      	it	cc
 8006e04:	250c      	movcc	r5, #12
 8006e06:	2d00      	cmp	r5, #0
 8006e08:	4606      	mov	r6, r0
 8006e0a:	db01      	blt.n	8006e10 <_malloc_r+0x1c>
 8006e0c:	42a9      	cmp	r1, r5
 8006e0e:	d904      	bls.n	8006e1a <_malloc_r+0x26>
 8006e10:	230c      	movs	r3, #12
 8006e12:	6033      	str	r3, [r6, #0]
 8006e14:	2000      	movs	r0, #0
 8006e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ef0 <_malloc_r+0xfc>
 8006e1e:	f000 f869 	bl	8006ef4 <__malloc_lock>
 8006e22:	f8d8 3000 	ldr.w	r3, [r8]
 8006e26:	461c      	mov	r4, r3
 8006e28:	bb44      	cbnz	r4, 8006e7c <_malloc_r+0x88>
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f7ff ffbf 	bl	8006db0 <sbrk_aligned>
 8006e32:	1c43      	adds	r3, r0, #1
 8006e34:	4604      	mov	r4, r0
 8006e36:	d158      	bne.n	8006eea <_malloc_r+0xf6>
 8006e38:	f8d8 4000 	ldr.w	r4, [r8]
 8006e3c:	4627      	mov	r7, r4
 8006e3e:	2f00      	cmp	r7, #0
 8006e40:	d143      	bne.n	8006eca <_malloc_r+0xd6>
 8006e42:	2c00      	cmp	r4, #0
 8006e44:	d04b      	beq.n	8006ede <_malloc_r+0xea>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	4639      	mov	r1, r7
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	eb04 0903 	add.w	r9, r4, r3
 8006e50:	f000 fdf6 	bl	8007a40 <_sbrk_r>
 8006e54:	4581      	cmp	r9, r0
 8006e56:	d142      	bne.n	8006ede <_malloc_r+0xea>
 8006e58:	6821      	ldr	r1, [r4, #0]
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	1a6d      	subs	r5, r5, r1
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f7ff ffa6 	bl	8006db0 <sbrk_aligned>
 8006e64:	3001      	adds	r0, #1
 8006e66:	d03a      	beq.n	8006ede <_malloc_r+0xea>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	442b      	add	r3, r5
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	bb62      	cbnz	r2, 8006ed0 <_malloc_r+0xdc>
 8006e76:	f8c8 7000 	str.w	r7, [r8]
 8006e7a:	e00f      	b.n	8006e9c <_malloc_r+0xa8>
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	1b52      	subs	r2, r2, r5
 8006e80:	d420      	bmi.n	8006ec4 <_malloc_r+0xd0>
 8006e82:	2a0b      	cmp	r2, #11
 8006e84:	d917      	bls.n	8006eb6 <_malloc_r+0xc2>
 8006e86:	1961      	adds	r1, r4, r5
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	6025      	str	r5, [r4, #0]
 8006e8c:	bf18      	it	ne
 8006e8e:	6059      	strne	r1, [r3, #4]
 8006e90:	6863      	ldr	r3, [r4, #4]
 8006e92:	bf08      	it	eq
 8006e94:	f8c8 1000 	streq.w	r1, [r8]
 8006e98:	5162      	str	r2, [r4, r5]
 8006e9a:	604b      	str	r3, [r1, #4]
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f000 f82f 	bl	8006f00 <__malloc_unlock>
 8006ea2:	f104 000b 	add.w	r0, r4, #11
 8006ea6:	1d23      	adds	r3, r4, #4
 8006ea8:	f020 0007 	bic.w	r0, r0, #7
 8006eac:	1ac2      	subs	r2, r0, r3
 8006eae:	bf1c      	itt	ne
 8006eb0:	1a1b      	subne	r3, r3, r0
 8006eb2:	50a3      	strne	r3, [r4, r2]
 8006eb4:	e7af      	b.n	8006e16 <_malloc_r+0x22>
 8006eb6:	6862      	ldr	r2, [r4, #4]
 8006eb8:	42a3      	cmp	r3, r4
 8006eba:	bf0c      	ite	eq
 8006ebc:	f8c8 2000 	streq.w	r2, [r8]
 8006ec0:	605a      	strne	r2, [r3, #4]
 8006ec2:	e7eb      	b.n	8006e9c <_malloc_r+0xa8>
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	6864      	ldr	r4, [r4, #4]
 8006ec8:	e7ae      	b.n	8006e28 <_malloc_r+0x34>
 8006eca:	463c      	mov	r4, r7
 8006ecc:	687f      	ldr	r7, [r7, #4]
 8006ece:	e7b6      	b.n	8006e3e <_malloc_r+0x4a>
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	d1fb      	bne.n	8006ed0 <_malloc_r+0xdc>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	6053      	str	r3, [r2, #4]
 8006edc:	e7de      	b.n	8006e9c <_malloc_r+0xa8>
 8006ede:	230c      	movs	r3, #12
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	6033      	str	r3, [r6, #0]
 8006ee4:	f000 f80c 	bl	8006f00 <__malloc_unlock>
 8006ee8:	e794      	b.n	8006e14 <_malloc_r+0x20>
 8006eea:	6005      	str	r5, [r0, #0]
 8006eec:	e7d6      	b.n	8006e9c <_malloc_r+0xa8>
 8006eee:	bf00      	nop
 8006ef0:	20000980 	.word	0x20000980

08006ef4 <__malloc_lock>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	@ (8006efc <__malloc_lock+0x8>)
 8006ef6:	f7ff b89c 	b.w	8006032 <__retarget_lock_acquire_recursive>
 8006efa:	bf00      	nop
 8006efc:	20000978 	.word	0x20000978

08006f00 <__malloc_unlock>:
 8006f00:	4801      	ldr	r0, [pc, #4]	@ (8006f08 <__malloc_unlock+0x8>)
 8006f02:	f7ff b897 	b.w	8006034 <__retarget_lock_release_recursive>
 8006f06:	bf00      	nop
 8006f08:	20000978 	.word	0x20000978

08006f0c <_Balloc>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	69c6      	ldr	r6, [r0, #28]
 8006f10:	4604      	mov	r4, r0
 8006f12:	460d      	mov	r5, r1
 8006f14:	b976      	cbnz	r6, 8006f34 <_Balloc+0x28>
 8006f16:	2010      	movs	r0, #16
 8006f18:	f7ff ff42 	bl	8006da0 <malloc>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	61e0      	str	r0, [r4, #28]
 8006f20:	b920      	cbnz	r0, 8006f2c <_Balloc+0x20>
 8006f22:	216b      	movs	r1, #107	@ 0x6b
 8006f24:	4b17      	ldr	r3, [pc, #92]	@ (8006f84 <_Balloc+0x78>)
 8006f26:	4818      	ldr	r0, [pc, #96]	@ (8006f88 <_Balloc+0x7c>)
 8006f28:	f000 fd9a 	bl	8007a60 <__assert_func>
 8006f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f30:	6006      	str	r6, [r0, #0]
 8006f32:	60c6      	str	r6, [r0, #12]
 8006f34:	69e6      	ldr	r6, [r4, #28]
 8006f36:	68f3      	ldr	r3, [r6, #12]
 8006f38:	b183      	cbz	r3, 8006f5c <_Balloc+0x50>
 8006f3a:	69e3      	ldr	r3, [r4, #28]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f42:	b9b8      	cbnz	r0, 8006f74 <_Balloc+0x68>
 8006f44:	2101      	movs	r1, #1
 8006f46:	fa01 f605 	lsl.w	r6, r1, r5
 8006f4a:	1d72      	adds	r2, r6, #5
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	0092      	lsls	r2, r2, #2
 8006f50:	f000 fda4 	bl	8007a9c <_calloc_r>
 8006f54:	b160      	cbz	r0, 8006f70 <_Balloc+0x64>
 8006f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f5a:	e00e      	b.n	8006f7a <_Balloc+0x6e>
 8006f5c:	2221      	movs	r2, #33	@ 0x21
 8006f5e:	2104      	movs	r1, #4
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fd9b 	bl	8007a9c <_calloc_r>
 8006f66:	69e3      	ldr	r3, [r4, #28]
 8006f68:	60f0      	str	r0, [r6, #12]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e4      	bne.n	8006f3a <_Balloc+0x2e>
 8006f70:	2000      	movs	r0, #0
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	6802      	ldr	r2, [r0, #0]
 8006f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f80:	e7f7      	b.n	8006f72 <_Balloc+0x66>
 8006f82:	bf00      	nop
 8006f84:	0800881b 	.word	0x0800881b
 8006f88:	0800889b 	.word	0x0800889b

08006f8c <_Bfree>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	69c6      	ldr	r6, [r0, #28]
 8006f90:	4605      	mov	r5, r0
 8006f92:	460c      	mov	r4, r1
 8006f94:	b976      	cbnz	r6, 8006fb4 <_Bfree+0x28>
 8006f96:	2010      	movs	r0, #16
 8006f98:	f7ff ff02 	bl	8006da0 <malloc>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	61e8      	str	r0, [r5, #28]
 8006fa0:	b920      	cbnz	r0, 8006fac <_Bfree+0x20>
 8006fa2:	218f      	movs	r1, #143	@ 0x8f
 8006fa4:	4b08      	ldr	r3, [pc, #32]	@ (8006fc8 <_Bfree+0x3c>)
 8006fa6:	4809      	ldr	r0, [pc, #36]	@ (8006fcc <_Bfree+0x40>)
 8006fa8:	f000 fd5a 	bl	8007a60 <__assert_func>
 8006fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fb0:	6006      	str	r6, [r0, #0]
 8006fb2:	60c6      	str	r6, [r0, #12]
 8006fb4:	b13c      	cbz	r4, 8006fc6 <_Bfree+0x3a>
 8006fb6:	69eb      	ldr	r3, [r5, #28]
 8006fb8:	6862      	ldr	r2, [r4, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fc0:	6021      	str	r1, [r4, #0]
 8006fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	0800881b 	.word	0x0800881b
 8006fcc:	0800889b 	.word	0x0800889b

08006fd0 <__multadd>:
 8006fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	461e      	mov	r6, r3
 8006fda:	2000      	movs	r0, #0
 8006fdc:	690d      	ldr	r5, [r1, #16]
 8006fde:	f101 0c14 	add.w	ip, r1, #20
 8006fe2:	f8dc 3000 	ldr.w	r3, [ip]
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	b299      	uxth	r1, r3
 8006fea:	fb02 6101 	mla	r1, r2, r1, r6
 8006fee:	0c1e      	lsrs	r6, r3, #16
 8006ff0:	0c0b      	lsrs	r3, r1, #16
 8006ff2:	fb02 3306 	mla	r3, r2, r6, r3
 8006ff6:	b289      	uxth	r1, r1
 8006ff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ffc:	4285      	cmp	r5, r0
 8006ffe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007002:	f84c 1b04 	str.w	r1, [ip], #4
 8007006:	dcec      	bgt.n	8006fe2 <__multadd+0x12>
 8007008:	b30e      	cbz	r6, 800704e <__multadd+0x7e>
 800700a:	68a3      	ldr	r3, [r4, #8]
 800700c:	42ab      	cmp	r3, r5
 800700e:	dc19      	bgt.n	8007044 <__multadd+0x74>
 8007010:	6861      	ldr	r1, [r4, #4]
 8007012:	4638      	mov	r0, r7
 8007014:	3101      	adds	r1, #1
 8007016:	f7ff ff79 	bl	8006f0c <_Balloc>
 800701a:	4680      	mov	r8, r0
 800701c:	b928      	cbnz	r0, 800702a <__multadd+0x5a>
 800701e:	4602      	mov	r2, r0
 8007020:	21ba      	movs	r1, #186	@ 0xba
 8007022:	4b0c      	ldr	r3, [pc, #48]	@ (8007054 <__multadd+0x84>)
 8007024:	480c      	ldr	r0, [pc, #48]	@ (8007058 <__multadd+0x88>)
 8007026:	f000 fd1b 	bl	8007a60 <__assert_func>
 800702a:	6922      	ldr	r2, [r4, #16]
 800702c:	f104 010c 	add.w	r1, r4, #12
 8007030:	3202      	adds	r2, #2
 8007032:	0092      	lsls	r2, r2, #2
 8007034:	300c      	adds	r0, #12
 8007036:	f7ff f80c 	bl	8006052 <memcpy>
 800703a:	4621      	mov	r1, r4
 800703c:	4638      	mov	r0, r7
 800703e:	f7ff ffa5 	bl	8006f8c <_Bfree>
 8007042:	4644      	mov	r4, r8
 8007044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007048:	3501      	adds	r5, #1
 800704a:	615e      	str	r6, [r3, #20]
 800704c:	6125      	str	r5, [r4, #16]
 800704e:	4620      	mov	r0, r4
 8007050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007054:	0800888a 	.word	0x0800888a
 8007058:	0800889b 	.word	0x0800889b

0800705c <__hi0bits>:
 800705c:	4603      	mov	r3, r0
 800705e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007062:	bf3a      	itte	cc
 8007064:	0403      	lslcc	r3, r0, #16
 8007066:	2010      	movcc	r0, #16
 8007068:	2000      	movcs	r0, #0
 800706a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800706e:	bf3c      	itt	cc
 8007070:	021b      	lslcc	r3, r3, #8
 8007072:	3008      	addcc	r0, #8
 8007074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007078:	bf3c      	itt	cc
 800707a:	011b      	lslcc	r3, r3, #4
 800707c:	3004      	addcc	r0, #4
 800707e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007082:	bf3c      	itt	cc
 8007084:	009b      	lslcc	r3, r3, #2
 8007086:	3002      	addcc	r0, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	db05      	blt.n	8007098 <__hi0bits+0x3c>
 800708c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007090:	f100 0001 	add.w	r0, r0, #1
 8007094:	bf08      	it	eq
 8007096:	2020      	moveq	r0, #32
 8007098:	4770      	bx	lr

0800709a <__lo0bits>:
 800709a:	6803      	ldr	r3, [r0, #0]
 800709c:	4602      	mov	r2, r0
 800709e:	f013 0007 	ands.w	r0, r3, #7
 80070a2:	d00b      	beq.n	80070bc <__lo0bits+0x22>
 80070a4:	07d9      	lsls	r1, r3, #31
 80070a6:	d421      	bmi.n	80070ec <__lo0bits+0x52>
 80070a8:	0798      	lsls	r0, r3, #30
 80070aa:	bf49      	itett	mi
 80070ac:	085b      	lsrmi	r3, r3, #1
 80070ae:	089b      	lsrpl	r3, r3, #2
 80070b0:	2001      	movmi	r0, #1
 80070b2:	6013      	strmi	r3, [r2, #0]
 80070b4:	bf5c      	itt	pl
 80070b6:	2002      	movpl	r0, #2
 80070b8:	6013      	strpl	r3, [r2, #0]
 80070ba:	4770      	bx	lr
 80070bc:	b299      	uxth	r1, r3
 80070be:	b909      	cbnz	r1, 80070c4 <__lo0bits+0x2a>
 80070c0:	2010      	movs	r0, #16
 80070c2:	0c1b      	lsrs	r3, r3, #16
 80070c4:	b2d9      	uxtb	r1, r3
 80070c6:	b909      	cbnz	r1, 80070cc <__lo0bits+0x32>
 80070c8:	3008      	adds	r0, #8
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	0719      	lsls	r1, r3, #28
 80070ce:	bf04      	itt	eq
 80070d0:	091b      	lsreq	r3, r3, #4
 80070d2:	3004      	addeq	r0, #4
 80070d4:	0799      	lsls	r1, r3, #30
 80070d6:	bf04      	itt	eq
 80070d8:	089b      	lsreq	r3, r3, #2
 80070da:	3002      	addeq	r0, #2
 80070dc:	07d9      	lsls	r1, r3, #31
 80070de:	d403      	bmi.n	80070e8 <__lo0bits+0x4e>
 80070e0:	085b      	lsrs	r3, r3, #1
 80070e2:	f100 0001 	add.w	r0, r0, #1
 80070e6:	d003      	beq.n	80070f0 <__lo0bits+0x56>
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	4770      	bx	lr
 80070ec:	2000      	movs	r0, #0
 80070ee:	4770      	bx	lr
 80070f0:	2020      	movs	r0, #32
 80070f2:	4770      	bx	lr

080070f4 <__i2b>:
 80070f4:	b510      	push	{r4, lr}
 80070f6:	460c      	mov	r4, r1
 80070f8:	2101      	movs	r1, #1
 80070fa:	f7ff ff07 	bl	8006f0c <_Balloc>
 80070fe:	4602      	mov	r2, r0
 8007100:	b928      	cbnz	r0, 800710e <__i2b+0x1a>
 8007102:	f240 1145 	movw	r1, #325	@ 0x145
 8007106:	4b04      	ldr	r3, [pc, #16]	@ (8007118 <__i2b+0x24>)
 8007108:	4804      	ldr	r0, [pc, #16]	@ (800711c <__i2b+0x28>)
 800710a:	f000 fca9 	bl	8007a60 <__assert_func>
 800710e:	2301      	movs	r3, #1
 8007110:	6144      	str	r4, [r0, #20]
 8007112:	6103      	str	r3, [r0, #16]
 8007114:	bd10      	pop	{r4, pc}
 8007116:	bf00      	nop
 8007118:	0800888a 	.word	0x0800888a
 800711c:	0800889b 	.word	0x0800889b

08007120 <__multiply>:
 8007120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	4614      	mov	r4, r2
 8007126:	690a      	ldr	r2, [r1, #16]
 8007128:	6923      	ldr	r3, [r4, #16]
 800712a:	460f      	mov	r7, r1
 800712c:	429a      	cmp	r2, r3
 800712e:	bfa2      	ittt	ge
 8007130:	4623      	movge	r3, r4
 8007132:	460c      	movge	r4, r1
 8007134:	461f      	movge	r7, r3
 8007136:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800713a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800713e:	68a3      	ldr	r3, [r4, #8]
 8007140:	6861      	ldr	r1, [r4, #4]
 8007142:	eb0a 0609 	add.w	r6, sl, r9
 8007146:	42b3      	cmp	r3, r6
 8007148:	b085      	sub	sp, #20
 800714a:	bfb8      	it	lt
 800714c:	3101      	addlt	r1, #1
 800714e:	f7ff fedd 	bl	8006f0c <_Balloc>
 8007152:	b930      	cbnz	r0, 8007162 <__multiply+0x42>
 8007154:	4602      	mov	r2, r0
 8007156:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800715a:	4b43      	ldr	r3, [pc, #268]	@ (8007268 <__multiply+0x148>)
 800715c:	4843      	ldr	r0, [pc, #268]	@ (800726c <__multiply+0x14c>)
 800715e:	f000 fc7f 	bl	8007a60 <__assert_func>
 8007162:	f100 0514 	add.w	r5, r0, #20
 8007166:	462b      	mov	r3, r5
 8007168:	2200      	movs	r2, #0
 800716a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800716e:	4543      	cmp	r3, r8
 8007170:	d321      	bcc.n	80071b6 <__multiply+0x96>
 8007172:	f107 0114 	add.w	r1, r7, #20
 8007176:	f104 0214 	add.w	r2, r4, #20
 800717a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800717e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007182:	9302      	str	r3, [sp, #8]
 8007184:	1b13      	subs	r3, r2, r4
 8007186:	3b15      	subs	r3, #21
 8007188:	f023 0303 	bic.w	r3, r3, #3
 800718c:	3304      	adds	r3, #4
 800718e:	f104 0715 	add.w	r7, r4, #21
 8007192:	42ba      	cmp	r2, r7
 8007194:	bf38      	it	cc
 8007196:	2304      	movcc	r3, #4
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	9b02      	ldr	r3, [sp, #8]
 800719c:	9103      	str	r1, [sp, #12]
 800719e:	428b      	cmp	r3, r1
 80071a0:	d80c      	bhi.n	80071bc <__multiply+0x9c>
 80071a2:	2e00      	cmp	r6, #0
 80071a4:	dd03      	ble.n	80071ae <__multiply+0x8e>
 80071a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d05a      	beq.n	8007264 <__multiply+0x144>
 80071ae:	6106      	str	r6, [r0, #16]
 80071b0:	b005      	add	sp, #20
 80071b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b6:	f843 2b04 	str.w	r2, [r3], #4
 80071ba:	e7d8      	b.n	800716e <__multiply+0x4e>
 80071bc:	f8b1 a000 	ldrh.w	sl, [r1]
 80071c0:	f1ba 0f00 	cmp.w	sl, #0
 80071c4:	d023      	beq.n	800720e <__multiply+0xee>
 80071c6:	46a9      	mov	r9, r5
 80071c8:	f04f 0c00 	mov.w	ip, #0
 80071cc:	f104 0e14 	add.w	lr, r4, #20
 80071d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80071d4:	f8d9 3000 	ldr.w	r3, [r9]
 80071d8:	fa1f fb87 	uxth.w	fp, r7
 80071dc:	b29b      	uxth	r3, r3
 80071de:	fb0a 330b 	mla	r3, sl, fp, r3
 80071e2:	4463      	add	r3, ip
 80071e4:	f8d9 c000 	ldr.w	ip, [r9]
 80071e8:	0c3f      	lsrs	r7, r7, #16
 80071ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80071ee:	fb0a c707 	mla	r7, sl, r7, ip
 80071f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071fc:	4572      	cmp	r2, lr
 80071fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007202:	f849 3b04 	str.w	r3, [r9], #4
 8007206:	d8e3      	bhi.n	80071d0 <__multiply+0xb0>
 8007208:	9b01      	ldr	r3, [sp, #4]
 800720a:	f845 c003 	str.w	ip, [r5, r3]
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	3104      	adds	r1, #4
 8007212:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007216:	f1b9 0f00 	cmp.w	r9, #0
 800721a:	d021      	beq.n	8007260 <__multiply+0x140>
 800721c:	46ae      	mov	lr, r5
 800721e:	f04f 0a00 	mov.w	sl, #0
 8007222:	682b      	ldr	r3, [r5, #0]
 8007224:	f104 0c14 	add.w	ip, r4, #20
 8007228:	f8bc b000 	ldrh.w	fp, [ip]
 800722c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007230:	b29b      	uxth	r3, r3
 8007232:	fb09 770b 	mla	r7, r9, fp, r7
 8007236:	4457      	add	r7, sl
 8007238:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800723c:	f84e 3b04 	str.w	r3, [lr], #4
 8007240:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007244:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007248:	f8be 3000 	ldrh.w	r3, [lr]
 800724c:	4562      	cmp	r2, ip
 800724e:	fb09 330a 	mla	r3, r9, sl, r3
 8007252:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007256:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800725a:	d8e5      	bhi.n	8007228 <__multiply+0x108>
 800725c:	9f01      	ldr	r7, [sp, #4]
 800725e:	51eb      	str	r3, [r5, r7]
 8007260:	3504      	adds	r5, #4
 8007262:	e79a      	b.n	800719a <__multiply+0x7a>
 8007264:	3e01      	subs	r6, #1
 8007266:	e79c      	b.n	80071a2 <__multiply+0x82>
 8007268:	0800888a 	.word	0x0800888a
 800726c:	0800889b 	.word	0x0800889b

08007270 <__pow5mult>:
 8007270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007274:	4615      	mov	r5, r2
 8007276:	f012 0203 	ands.w	r2, r2, #3
 800727a:	4607      	mov	r7, r0
 800727c:	460e      	mov	r6, r1
 800727e:	d007      	beq.n	8007290 <__pow5mult+0x20>
 8007280:	4c25      	ldr	r4, [pc, #148]	@ (8007318 <__pow5mult+0xa8>)
 8007282:	3a01      	subs	r2, #1
 8007284:	2300      	movs	r3, #0
 8007286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800728a:	f7ff fea1 	bl	8006fd0 <__multadd>
 800728e:	4606      	mov	r6, r0
 8007290:	10ad      	asrs	r5, r5, #2
 8007292:	d03d      	beq.n	8007310 <__pow5mult+0xa0>
 8007294:	69fc      	ldr	r4, [r7, #28]
 8007296:	b97c      	cbnz	r4, 80072b8 <__pow5mult+0x48>
 8007298:	2010      	movs	r0, #16
 800729a:	f7ff fd81 	bl	8006da0 <malloc>
 800729e:	4602      	mov	r2, r0
 80072a0:	61f8      	str	r0, [r7, #28]
 80072a2:	b928      	cbnz	r0, 80072b0 <__pow5mult+0x40>
 80072a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072a8:	4b1c      	ldr	r3, [pc, #112]	@ (800731c <__pow5mult+0xac>)
 80072aa:	481d      	ldr	r0, [pc, #116]	@ (8007320 <__pow5mult+0xb0>)
 80072ac:	f000 fbd8 	bl	8007a60 <__assert_func>
 80072b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072b4:	6004      	str	r4, [r0, #0]
 80072b6:	60c4      	str	r4, [r0, #12]
 80072b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80072bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072c0:	b94c      	cbnz	r4, 80072d6 <__pow5mult+0x66>
 80072c2:	f240 2171 	movw	r1, #625	@ 0x271
 80072c6:	4638      	mov	r0, r7
 80072c8:	f7ff ff14 	bl	80070f4 <__i2b>
 80072cc:	2300      	movs	r3, #0
 80072ce:	4604      	mov	r4, r0
 80072d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80072d4:	6003      	str	r3, [r0, #0]
 80072d6:	f04f 0900 	mov.w	r9, #0
 80072da:	07eb      	lsls	r3, r5, #31
 80072dc:	d50a      	bpl.n	80072f4 <__pow5mult+0x84>
 80072de:	4631      	mov	r1, r6
 80072e0:	4622      	mov	r2, r4
 80072e2:	4638      	mov	r0, r7
 80072e4:	f7ff ff1c 	bl	8007120 <__multiply>
 80072e8:	4680      	mov	r8, r0
 80072ea:	4631      	mov	r1, r6
 80072ec:	4638      	mov	r0, r7
 80072ee:	f7ff fe4d 	bl	8006f8c <_Bfree>
 80072f2:	4646      	mov	r6, r8
 80072f4:	106d      	asrs	r5, r5, #1
 80072f6:	d00b      	beq.n	8007310 <__pow5mult+0xa0>
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	b938      	cbnz	r0, 800730c <__pow5mult+0x9c>
 80072fc:	4622      	mov	r2, r4
 80072fe:	4621      	mov	r1, r4
 8007300:	4638      	mov	r0, r7
 8007302:	f7ff ff0d 	bl	8007120 <__multiply>
 8007306:	6020      	str	r0, [r4, #0]
 8007308:	f8c0 9000 	str.w	r9, [r0]
 800730c:	4604      	mov	r4, r0
 800730e:	e7e4      	b.n	80072da <__pow5mult+0x6a>
 8007310:	4630      	mov	r0, r6
 8007312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007316:	bf00      	nop
 8007318:	080088f4 	.word	0x080088f4
 800731c:	0800881b 	.word	0x0800881b
 8007320:	0800889b 	.word	0x0800889b

08007324 <__lshift>:
 8007324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007328:	460c      	mov	r4, r1
 800732a:	4607      	mov	r7, r0
 800732c:	4691      	mov	r9, r2
 800732e:	6923      	ldr	r3, [r4, #16]
 8007330:	6849      	ldr	r1, [r1, #4]
 8007332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007336:	68a3      	ldr	r3, [r4, #8]
 8007338:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800733c:	f108 0601 	add.w	r6, r8, #1
 8007340:	42b3      	cmp	r3, r6
 8007342:	db0b      	blt.n	800735c <__lshift+0x38>
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff fde1 	bl	8006f0c <_Balloc>
 800734a:	4605      	mov	r5, r0
 800734c:	b948      	cbnz	r0, 8007362 <__lshift+0x3e>
 800734e:	4602      	mov	r2, r0
 8007350:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007354:	4b27      	ldr	r3, [pc, #156]	@ (80073f4 <__lshift+0xd0>)
 8007356:	4828      	ldr	r0, [pc, #160]	@ (80073f8 <__lshift+0xd4>)
 8007358:	f000 fb82 	bl	8007a60 <__assert_func>
 800735c:	3101      	adds	r1, #1
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	e7ee      	b.n	8007340 <__lshift+0x1c>
 8007362:	2300      	movs	r3, #0
 8007364:	f100 0114 	add.w	r1, r0, #20
 8007368:	f100 0210 	add.w	r2, r0, #16
 800736c:	4618      	mov	r0, r3
 800736e:	4553      	cmp	r3, sl
 8007370:	db33      	blt.n	80073da <__lshift+0xb6>
 8007372:	6920      	ldr	r0, [r4, #16]
 8007374:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007378:	f104 0314 	add.w	r3, r4, #20
 800737c:	f019 091f 	ands.w	r9, r9, #31
 8007380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007384:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007388:	d02b      	beq.n	80073e2 <__lshift+0xbe>
 800738a:	468a      	mov	sl, r1
 800738c:	2200      	movs	r2, #0
 800738e:	f1c9 0e20 	rsb	lr, r9, #32
 8007392:	6818      	ldr	r0, [r3, #0]
 8007394:	fa00 f009 	lsl.w	r0, r0, r9
 8007398:	4310      	orrs	r0, r2
 800739a:	f84a 0b04 	str.w	r0, [sl], #4
 800739e:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a2:	459c      	cmp	ip, r3
 80073a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80073a8:	d8f3      	bhi.n	8007392 <__lshift+0x6e>
 80073aa:	ebac 0304 	sub.w	r3, ip, r4
 80073ae:	3b15      	subs	r3, #21
 80073b0:	f023 0303 	bic.w	r3, r3, #3
 80073b4:	3304      	adds	r3, #4
 80073b6:	f104 0015 	add.w	r0, r4, #21
 80073ba:	4584      	cmp	ip, r0
 80073bc:	bf38      	it	cc
 80073be:	2304      	movcc	r3, #4
 80073c0:	50ca      	str	r2, [r1, r3]
 80073c2:	b10a      	cbz	r2, 80073c8 <__lshift+0xa4>
 80073c4:	f108 0602 	add.w	r6, r8, #2
 80073c8:	3e01      	subs	r6, #1
 80073ca:	4638      	mov	r0, r7
 80073cc:	4621      	mov	r1, r4
 80073ce:	612e      	str	r6, [r5, #16]
 80073d0:	f7ff fddc 	bl	8006f8c <_Bfree>
 80073d4:	4628      	mov	r0, r5
 80073d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073da:	f842 0f04 	str.w	r0, [r2, #4]!
 80073de:	3301      	adds	r3, #1
 80073e0:	e7c5      	b.n	800736e <__lshift+0x4a>
 80073e2:	3904      	subs	r1, #4
 80073e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e8:	459c      	cmp	ip, r3
 80073ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80073ee:	d8f9      	bhi.n	80073e4 <__lshift+0xc0>
 80073f0:	e7ea      	b.n	80073c8 <__lshift+0xa4>
 80073f2:	bf00      	nop
 80073f4:	0800888a 	.word	0x0800888a
 80073f8:	0800889b 	.word	0x0800889b

080073fc <__mcmp>:
 80073fc:	4603      	mov	r3, r0
 80073fe:	690a      	ldr	r2, [r1, #16]
 8007400:	6900      	ldr	r0, [r0, #16]
 8007402:	b530      	push	{r4, r5, lr}
 8007404:	1a80      	subs	r0, r0, r2
 8007406:	d10e      	bne.n	8007426 <__mcmp+0x2a>
 8007408:	3314      	adds	r3, #20
 800740a:	3114      	adds	r1, #20
 800740c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007410:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007414:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007418:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800741c:	4295      	cmp	r5, r2
 800741e:	d003      	beq.n	8007428 <__mcmp+0x2c>
 8007420:	d205      	bcs.n	800742e <__mcmp+0x32>
 8007422:	f04f 30ff 	mov.w	r0, #4294967295
 8007426:	bd30      	pop	{r4, r5, pc}
 8007428:	42a3      	cmp	r3, r4
 800742a:	d3f3      	bcc.n	8007414 <__mcmp+0x18>
 800742c:	e7fb      	b.n	8007426 <__mcmp+0x2a>
 800742e:	2001      	movs	r0, #1
 8007430:	e7f9      	b.n	8007426 <__mcmp+0x2a>
	...

08007434 <__mdiff>:
 8007434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007438:	4689      	mov	r9, r1
 800743a:	4606      	mov	r6, r0
 800743c:	4611      	mov	r1, r2
 800743e:	4648      	mov	r0, r9
 8007440:	4614      	mov	r4, r2
 8007442:	f7ff ffdb 	bl	80073fc <__mcmp>
 8007446:	1e05      	subs	r5, r0, #0
 8007448:	d112      	bne.n	8007470 <__mdiff+0x3c>
 800744a:	4629      	mov	r1, r5
 800744c:	4630      	mov	r0, r6
 800744e:	f7ff fd5d 	bl	8006f0c <_Balloc>
 8007452:	4602      	mov	r2, r0
 8007454:	b928      	cbnz	r0, 8007462 <__mdiff+0x2e>
 8007456:	f240 2137 	movw	r1, #567	@ 0x237
 800745a:	4b3e      	ldr	r3, [pc, #248]	@ (8007554 <__mdiff+0x120>)
 800745c:	483e      	ldr	r0, [pc, #248]	@ (8007558 <__mdiff+0x124>)
 800745e:	f000 faff 	bl	8007a60 <__assert_func>
 8007462:	2301      	movs	r3, #1
 8007464:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007468:	4610      	mov	r0, r2
 800746a:	b003      	add	sp, #12
 800746c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007470:	bfbc      	itt	lt
 8007472:	464b      	movlt	r3, r9
 8007474:	46a1      	movlt	r9, r4
 8007476:	4630      	mov	r0, r6
 8007478:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800747c:	bfba      	itte	lt
 800747e:	461c      	movlt	r4, r3
 8007480:	2501      	movlt	r5, #1
 8007482:	2500      	movge	r5, #0
 8007484:	f7ff fd42 	bl	8006f0c <_Balloc>
 8007488:	4602      	mov	r2, r0
 800748a:	b918      	cbnz	r0, 8007494 <__mdiff+0x60>
 800748c:	f240 2145 	movw	r1, #581	@ 0x245
 8007490:	4b30      	ldr	r3, [pc, #192]	@ (8007554 <__mdiff+0x120>)
 8007492:	e7e3      	b.n	800745c <__mdiff+0x28>
 8007494:	f100 0b14 	add.w	fp, r0, #20
 8007498:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800749c:	f109 0310 	add.w	r3, r9, #16
 80074a0:	60c5      	str	r5, [r0, #12]
 80074a2:	f04f 0c00 	mov.w	ip, #0
 80074a6:	f109 0514 	add.w	r5, r9, #20
 80074aa:	46d9      	mov	r9, fp
 80074ac:	6926      	ldr	r6, [r4, #16]
 80074ae:	f104 0e14 	add.w	lr, r4, #20
 80074b2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80074b6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	9b01      	ldr	r3, [sp, #4]
 80074be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80074c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80074c6:	b281      	uxth	r1, r0
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	fa1f f38a 	uxth.w	r3, sl
 80074ce:	1a5b      	subs	r3, r3, r1
 80074d0:	0c00      	lsrs	r0, r0, #16
 80074d2:	4463      	add	r3, ip
 80074d4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80074d8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80074dc:	b29b      	uxth	r3, r3
 80074de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80074e2:	4576      	cmp	r6, lr
 80074e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074e8:	f849 3b04 	str.w	r3, [r9], #4
 80074ec:	d8e6      	bhi.n	80074bc <__mdiff+0x88>
 80074ee:	1b33      	subs	r3, r6, r4
 80074f0:	3b15      	subs	r3, #21
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	3415      	adds	r4, #21
 80074f8:	3304      	adds	r3, #4
 80074fa:	42a6      	cmp	r6, r4
 80074fc:	bf38      	it	cc
 80074fe:	2304      	movcc	r3, #4
 8007500:	441d      	add	r5, r3
 8007502:	445b      	add	r3, fp
 8007504:	461e      	mov	r6, r3
 8007506:	462c      	mov	r4, r5
 8007508:	4544      	cmp	r4, r8
 800750a:	d30e      	bcc.n	800752a <__mdiff+0xf6>
 800750c:	f108 0103 	add.w	r1, r8, #3
 8007510:	1b49      	subs	r1, r1, r5
 8007512:	f021 0103 	bic.w	r1, r1, #3
 8007516:	3d03      	subs	r5, #3
 8007518:	45a8      	cmp	r8, r5
 800751a:	bf38      	it	cc
 800751c:	2100      	movcc	r1, #0
 800751e:	440b      	add	r3, r1
 8007520:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007524:	b199      	cbz	r1, 800754e <__mdiff+0x11a>
 8007526:	6117      	str	r7, [r2, #16]
 8007528:	e79e      	b.n	8007468 <__mdiff+0x34>
 800752a:	46e6      	mov	lr, ip
 800752c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007530:	fa1f fc81 	uxth.w	ip, r1
 8007534:	44f4      	add	ip, lr
 8007536:	0c08      	lsrs	r0, r1, #16
 8007538:	4471      	add	r1, lr
 800753a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800753e:	b289      	uxth	r1, r1
 8007540:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007544:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007548:	f846 1b04 	str.w	r1, [r6], #4
 800754c:	e7dc      	b.n	8007508 <__mdiff+0xd4>
 800754e:	3f01      	subs	r7, #1
 8007550:	e7e6      	b.n	8007520 <__mdiff+0xec>
 8007552:	bf00      	nop
 8007554:	0800888a 	.word	0x0800888a
 8007558:	0800889b 	.word	0x0800889b

0800755c <__d2b>:
 800755c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007560:	2101      	movs	r1, #1
 8007562:	4690      	mov	r8, r2
 8007564:	4699      	mov	r9, r3
 8007566:	9e08      	ldr	r6, [sp, #32]
 8007568:	f7ff fcd0 	bl	8006f0c <_Balloc>
 800756c:	4604      	mov	r4, r0
 800756e:	b930      	cbnz	r0, 800757e <__d2b+0x22>
 8007570:	4602      	mov	r2, r0
 8007572:	f240 310f 	movw	r1, #783	@ 0x30f
 8007576:	4b23      	ldr	r3, [pc, #140]	@ (8007604 <__d2b+0xa8>)
 8007578:	4823      	ldr	r0, [pc, #140]	@ (8007608 <__d2b+0xac>)
 800757a:	f000 fa71 	bl	8007a60 <__assert_func>
 800757e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007582:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007586:	b10d      	cbz	r5, 800758c <__d2b+0x30>
 8007588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	f1b8 0300 	subs.w	r3, r8, #0
 8007592:	d024      	beq.n	80075de <__d2b+0x82>
 8007594:	4668      	mov	r0, sp
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	f7ff fd7f 	bl	800709a <__lo0bits>
 800759c:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075a0:	b1d8      	cbz	r0, 80075da <__d2b+0x7e>
 80075a2:	f1c0 0320 	rsb	r3, r0, #32
 80075a6:	fa02 f303 	lsl.w	r3, r2, r3
 80075aa:	430b      	orrs	r3, r1
 80075ac:	40c2      	lsrs	r2, r0
 80075ae:	6163      	str	r3, [r4, #20]
 80075b0:	9201      	str	r2, [sp, #4]
 80075b2:	9b01      	ldr	r3, [sp, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bf0c      	ite	eq
 80075b8:	2201      	moveq	r2, #1
 80075ba:	2202      	movne	r2, #2
 80075bc:	61a3      	str	r3, [r4, #24]
 80075be:	6122      	str	r2, [r4, #16]
 80075c0:	b1ad      	cbz	r5, 80075ee <__d2b+0x92>
 80075c2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80075c6:	4405      	add	r5, r0
 80075c8:	6035      	str	r5, [r6, #0]
 80075ca:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80075ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d0:	6018      	str	r0, [r3, #0]
 80075d2:	4620      	mov	r0, r4
 80075d4:	b002      	add	sp, #8
 80075d6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80075da:	6161      	str	r1, [r4, #20]
 80075dc:	e7e9      	b.n	80075b2 <__d2b+0x56>
 80075de:	a801      	add	r0, sp, #4
 80075e0:	f7ff fd5b 	bl	800709a <__lo0bits>
 80075e4:	9b01      	ldr	r3, [sp, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	6163      	str	r3, [r4, #20]
 80075ea:	3020      	adds	r0, #32
 80075ec:	e7e7      	b.n	80075be <__d2b+0x62>
 80075ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80075f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075f6:	6030      	str	r0, [r6, #0]
 80075f8:	6918      	ldr	r0, [r3, #16]
 80075fa:	f7ff fd2f 	bl	800705c <__hi0bits>
 80075fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007602:	e7e4      	b.n	80075ce <__d2b+0x72>
 8007604:	0800888a 	.word	0x0800888a
 8007608:	0800889b 	.word	0x0800889b

0800760c <__ssputs_r>:
 800760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	461f      	mov	r7, r3
 8007612:	688e      	ldr	r6, [r1, #8]
 8007614:	4682      	mov	sl, r0
 8007616:	42be      	cmp	r6, r7
 8007618:	460c      	mov	r4, r1
 800761a:	4690      	mov	r8, r2
 800761c:	680b      	ldr	r3, [r1, #0]
 800761e:	d82d      	bhi.n	800767c <__ssputs_r+0x70>
 8007620:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007624:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007628:	d026      	beq.n	8007678 <__ssputs_r+0x6c>
 800762a:	6965      	ldr	r5, [r4, #20]
 800762c:	6909      	ldr	r1, [r1, #16]
 800762e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007632:	eba3 0901 	sub.w	r9, r3, r1
 8007636:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800763a:	1c7b      	adds	r3, r7, #1
 800763c:	444b      	add	r3, r9
 800763e:	106d      	asrs	r5, r5, #1
 8007640:	429d      	cmp	r5, r3
 8007642:	bf38      	it	cc
 8007644:	461d      	movcc	r5, r3
 8007646:	0553      	lsls	r3, r2, #21
 8007648:	d527      	bpl.n	800769a <__ssputs_r+0x8e>
 800764a:	4629      	mov	r1, r5
 800764c:	f7ff fbd2 	bl	8006df4 <_malloc_r>
 8007650:	4606      	mov	r6, r0
 8007652:	b360      	cbz	r0, 80076ae <__ssputs_r+0xa2>
 8007654:	464a      	mov	r2, r9
 8007656:	6921      	ldr	r1, [r4, #16]
 8007658:	f7fe fcfb 	bl	8006052 <memcpy>
 800765c:	89a3      	ldrh	r3, [r4, #12]
 800765e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007666:	81a3      	strh	r3, [r4, #12]
 8007668:	6126      	str	r6, [r4, #16]
 800766a:	444e      	add	r6, r9
 800766c:	6026      	str	r6, [r4, #0]
 800766e:	463e      	mov	r6, r7
 8007670:	6165      	str	r5, [r4, #20]
 8007672:	eba5 0509 	sub.w	r5, r5, r9
 8007676:	60a5      	str	r5, [r4, #8]
 8007678:	42be      	cmp	r6, r7
 800767a:	d900      	bls.n	800767e <__ssputs_r+0x72>
 800767c:	463e      	mov	r6, r7
 800767e:	4632      	mov	r2, r6
 8007680:	4641      	mov	r1, r8
 8007682:	6820      	ldr	r0, [r4, #0]
 8007684:	f000 f9c2 	bl	8007a0c <memmove>
 8007688:	2000      	movs	r0, #0
 800768a:	68a3      	ldr	r3, [r4, #8]
 800768c:	1b9b      	subs	r3, r3, r6
 800768e:	60a3      	str	r3, [r4, #8]
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	4433      	add	r3, r6
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769a:	462a      	mov	r2, r5
 800769c:	f000 fa24 	bl	8007ae8 <_realloc_r>
 80076a0:	4606      	mov	r6, r0
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d1e0      	bne.n	8007668 <__ssputs_r+0x5c>
 80076a6:	4650      	mov	r0, sl
 80076a8:	6921      	ldr	r1, [r4, #16]
 80076aa:	f7ff fb31 	bl	8006d10 <_free_r>
 80076ae:	230c      	movs	r3, #12
 80076b0:	f8ca 3000 	str.w	r3, [sl]
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076be:	81a3      	strh	r3, [r4, #12]
 80076c0:	e7e9      	b.n	8007696 <__ssputs_r+0x8a>
	...

080076c4 <_svfiprintf_r>:
 80076c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c8:	4698      	mov	r8, r3
 80076ca:	898b      	ldrh	r3, [r1, #12]
 80076cc:	4607      	mov	r7, r0
 80076ce:	061b      	lsls	r3, r3, #24
 80076d0:	460d      	mov	r5, r1
 80076d2:	4614      	mov	r4, r2
 80076d4:	b09d      	sub	sp, #116	@ 0x74
 80076d6:	d510      	bpl.n	80076fa <_svfiprintf_r+0x36>
 80076d8:	690b      	ldr	r3, [r1, #16]
 80076da:	b973      	cbnz	r3, 80076fa <_svfiprintf_r+0x36>
 80076dc:	2140      	movs	r1, #64	@ 0x40
 80076de:	f7ff fb89 	bl	8006df4 <_malloc_r>
 80076e2:	6028      	str	r0, [r5, #0]
 80076e4:	6128      	str	r0, [r5, #16]
 80076e6:	b930      	cbnz	r0, 80076f6 <_svfiprintf_r+0x32>
 80076e8:	230c      	movs	r3, #12
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295
 80076f0:	b01d      	add	sp, #116	@ 0x74
 80076f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f6:	2340      	movs	r3, #64	@ 0x40
 80076f8:	616b      	str	r3, [r5, #20]
 80076fa:	2300      	movs	r3, #0
 80076fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80076fe:	2320      	movs	r3, #32
 8007700:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007704:	2330      	movs	r3, #48	@ 0x30
 8007706:	f04f 0901 	mov.w	r9, #1
 800770a:	f8cd 800c 	str.w	r8, [sp, #12]
 800770e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80078a8 <_svfiprintf_r+0x1e4>
 8007712:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007716:	4623      	mov	r3, r4
 8007718:	469a      	mov	sl, r3
 800771a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800771e:	b10a      	cbz	r2, 8007724 <_svfiprintf_r+0x60>
 8007720:	2a25      	cmp	r2, #37	@ 0x25
 8007722:	d1f9      	bne.n	8007718 <_svfiprintf_r+0x54>
 8007724:	ebba 0b04 	subs.w	fp, sl, r4
 8007728:	d00b      	beq.n	8007742 <_svfiprintf_r+0x7e>
 800772a:	465b      	mov	r3, fp
 800772c:	4622      	mov	r2, r4
 800772e:	4629      	mov	r1, r5
 8007730:	4638      	mov	r0, r7
 8007732:	f7ff ff6b 	bl	800760c <__ssputs_r>
 8007736:	3001      	adds	r0, #1
 8007738:	f000 80a7 	beq.w	800788a <_svfiprintf_r+0x1c6>
 800773c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800773e:	445a      	add	r2, fp
 8007740:	9209      	str	r2, [sp, #36]	@ 0x24
 8007742:	f89a 3000 	ldrb.w	r3, [sl]
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 809f 	beq.w	800788a <_svfiprintf_r+0x1c6>
 800774c:	2300      	movs	r3, #0
 800774e:	f04f 32ff 	mov.w	r2, #4294967295
 8007752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007756:	f10a 0a01 	add.w	sl, sl, #1
 800775a:	9304      	str	r3, [sp, #16]
 800775c:	9307      	str	r3, [sp, #28]
 800775e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007762:	931a      	str	r3, [sp, #104]	@ 0x68
 8007764:	4654      	mov	r4, sl
 8007766:	2205      	movs	r2, #5
 8007768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800776c:	484e      	ldr	r0, [pc, #312]	@ (80078a8 <_svfiprintf_r+0x1e4>)
 800776e:	f7fe fc62 	bl	8006036 <memchr>
 8007772:	9a04      	ldr	r2, [sp, #16]
 8007774:	b9d8      	cbnz	r0, 80077ae <_svfiprintf_r+0xea>
 8007776:	06d0      	lsls	r0, r2, #27
 8007778:	bf44      	itt	mi
 800777a:	2320      	movmi	r3, #32
 800777c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007780:	0711      	lsls	r1, r2, #28
 8007782:	bf44      	itt	mi
 8007784:	232b      	movmi	r3, #43	@ 0x2b
 8007786:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800778a:	f89a 3000 	ldrb.w	r3, [sl]
 800778e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007790:	d015      	beq.n	80077be <_svfiprintf_r+0xfa>
 8007792:	4654      	mov	r4, sl
 8007794:	2000      	movs	r0, #0
 8007796:	f04f 0c0a 	mov.w	ip, #10
 800779a:	9a07      	ldr	r2, [sp, #28]
 800779c:	4621      	mov	r1, r4
 800779e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077a2:	3b30      	subs	r3, #48	@ 0x30
 80077a4:	2b09      	cmp	r3, #9
 80077a6:	d94b      	bls.n	8007840 <_svfiprintf_r+0x17c>
 80077a8:	b1b0      	cbz	r0, 80077d8 <_svfiprintf_r+0x114>
 80077aa:	9207      	str	r2, [sp, #28]
 80077ac:	e014      	b.n	80077d8 <_svfiprintf_r+0x114>
 80077ae:	eba0 0308 	sub.w	r3, r0, r8
 80077b2:	fa09 f303 	lsl.w	r3, r9, r3
 80077b6:	4313      	orrs	r3, r2
 80077b8:	46a2      	mov	sl, r4
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	e7d2      	b.n	8007764 <_svfiprintf_r+0xa0>
 80077be:	9b03      	ldr	r3, [sp, #12]
 80077c0:	1d19      	adds	r1, r3, #4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	9103      	str	r1, [sp, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfbb      	ittet	lt
 80077ca:	425b      	neglt	r3, r3
 80077cc:	f042 0202 	orrlt.w	r2, r2, #2
 80077d0:	9307      	strge	r3, [sp, #28]
 80077d2:	9307      	strlt	r3, [sp, #28]
 80077d4:	bfb8      	it	lt
 80077d6:	9204      	strlt	r2, [sp, #16]
 80077d8:	7823      	ldrb	r3, [r4, #0]
 80077da:	2b2e      	cmp	r3, #46	@ 0x2e
 80077dc:	d10a      	bne.n	80077f4 <_svfiprintf_r+0x130>
 80077de:	7863      	ldrb	r3, [r4, #1]
 80077e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80077e2:	d132      	bne.n	800784a <_svfiprintf_r+0x186>
 80077e4:	9b03      	ldr	r3, [sp, #12]
 80077e6:	3402      	adds	r4, #2
 80077e8:	1d1a      	adds	r2, r3, #4
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	9203      	str	r2, [sp, #12]
 80077ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077f2:	9305      	str	r3, [sp, #20]
 80077f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80078ac <_svfiprintf_r+0x1e8>
 80077f8:	2203      	movs	r2, #3
 80077fa:	4650      	mov	r0, sl
 80077fc:	7821      	ldrb	r1, [r4, #0]
 80077fe:	f7fe fc1a 	bl	8006036 <memchr>
 8007802:	b138      	cbz	r0, 8007814 <_svfiprintf_r+0x150>
 8007804:	2240      	movs	r2, #64	@ 0x40
 8007806:	9b04      	ldr	r3, [sp, #16]
 8007808:	eba0 000a 	sub.w	r0, r0, sl
 800780c:	4082      	lsls	r2, r0
 800780e:	4313      	orrs	r3, r2
 8007810:	3401      	adds	r4, #1
 8007812:	9304      	str	r3, [sp, #16]
 8007814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007818:	2206      	movs	r2, #6
 800781a:	4825      	ldr	r0, [pc, #148]	@ (80078b0 <_svfiprintf_r+0x1ec>)
 800781c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007820:	f7fe fc09 	bl	8006036 <memchr>
 8007824:	2800      	cmp	r0, #0
 8007826:	d036      	beq.n	8007896 <_svfiprintf_r+0x1d2>
 8007828:	4b22      	ldr	r3, [pc, #136]	@ (80078b4 <_svfiprintf_r+0x1f0>)
 800782a:	bb1b      	cbnz	r3, 8007874 <_svfiprintf_r+0x1b0>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	3307      	adds	r3, #7
 8007830:	f023 0307 	bic.w	r3, r3, #7
 8007834:	3308      	adds	r3, #8
 8007836:	9303      	str	r3, [sp, #12]
 8007838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800783a:	4433      	add	r3, r6
 800783c:	9309      	str	r3, [sp, #36]	@ 0x24
 800783e:	e76a      	b.n	8007716 <_svfiprintf_r+0x52>
 8007840:	460c      	mov	r4, r1
 8007842:	2001      	movs	r0, #1
 8007844:	fb0c 3202 	mla	r2, ip, r2, r3
 8007848:	e7a8      	b.n	800779c <_svfiprintf_r+0xd8>
 800784a:	2300      	movs	r3, #0
 800784c:	f04f 0c0a 	mov.w	ip, #10
 8007850:	4619      	mov	r1, r3
 8007852:	3401      	adds	r4, #1
 8007854:	9305      	str	r3, [sp, #20]
 8007856:	4620      	mov	r0, r4
 8007858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800785c:	3a30      	subs	r2, #48	@ 0x30
 800785e:	2a09      	cmp	r2, #9
 8007860:	d903      	bls.n	800786a <_svfiprintf_r+0x1a6>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0c6      	beq.n	80077f4 <_svfiprintf_r+0x130>
 8007866:	9105      	str	r1, [sp, #20]
 8007868:	e7c4      	b.n	80077f4 <_svfiprintf_r+0x130>
 800786a:	4604      	mov	r4, r0
 800786c:	2301      	movs	r3, #1
 800786e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007872:	e7f0      	b.n	8007856 <_svfiprintf_r+0x192>
 8007874:	ab03      	add	r3, sp, #12
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	462a      	mov	r2, r5
 800787a:	4638      	mov	r0, r7
 800787c:	4b0e      	ldr	r3, [pc, #56]	@ (80078b8 <_svfiprintf_r+0x1f4>)
 800787e:	a904      	add	r1, sp, #16
 8007880:	f7fd fe66 	bl	8005550 <_printf_float>
 8007884:	1c42      	adds	r2, r0, #1
 8007886:	4606      	mov	r6, r0
 8007888:	d1d6      	bne.n	8007838 <_svfiprintf_r+0x174>
 800788a:	89ab      	ldrh	r3, [r5, #12]
 800788c:	065b      	lsls	r3, r3, #25
 800788e:	f53f af2d 	bmi.w	80076ec <_svfiprintf_r+0x28>
 8007892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007894:	e72c      	b.n	80076f0 <_svfiprintf_r+0x2c>
 8007896:	ab03      	add	r3, sp, #12
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	462a      	mov	r2, r5
 800789c:	4638      	mov	r0, r7
 800789e:	4b06      	ldr	r3, [pc, #24]	@ (80078b8 <_svfiprintf_r+0x1f4>)
 80078a0:	a904      	add	r1, sp, #16
 80078a2:	f7fe f8f3 	bl	8005a8c <_printf_i>
 80078a6:	e7ed      	b.n	8007884 <_svfiprintf_r+0x1c0>
 80078a8:	080089f0 	.word	0x080089f0
 80078ac:	080089f6 	.word	0x080089f6
 80078b0:	080089fa 	.word	0x080089fa
 80078b4:	08005551 	.word	0x08005551
 80078b8:	0800760d 	.word	0x0800760d

080078bc <__sflush_r>:
 80078bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	0716      	lsls	r6, r2, #28
 80078c4:	4605      	mov	r5, r0
 80078c6:	460c      	mov	r4, r1
 80078c8:	d454      	bmi.n	8007974 <__sflush_r+0xb8>
 80078ca:	684b      	ldr	r3, [r1, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	dc02      	bgt.n	80078d6 <__sflush_r+0x1a>
 80078d0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	dd48      	ble.n	8007968 <__sflush_r+0xac>
 80078d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078d8:	2e00      	cmp	r6, #0
 80078da:	d045      	beq.n	8007968 <__sflush_r+0xac>
 80078dc:	2300      	movs	r3, #0
 80078de:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078e2:	682f      	ldr	r7, [r5, #0]
 80078e4:	6a21      	ldr	r1, [r4, #32]
 80078e6:	602b      	str	r3, [r5, #0]
 80078e8:	d030      	beq.n	800794c <__sflush_r+0x90>
 80078ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	0759      	lsls	r1, r3, #29
 80078f0:	d505      	bpl.n	80078fe <__sflush_r+0x42>
 80078f2:	6863      	ldr	r3, [r4, #4]
 80078f4:	1ad2      	subs	r2, r2, r3
 80078f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078f8:	b10b      	cbz	r3, 80078fe <__sflush_r+0x42>
 80078fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078fc:	1ad2      	subs	r2, r2, r3
 80078fe:	2300      	movs	r3, #0
 8007900:	4628      	mov	r0, r5
 8007902:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007904:	6a21      	ldr	r1, [r4, #32]
 8007906:	47b0      	blx	r6
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	d106      	bne.n	800791c <__sflush_r+0x60>
 800790e:	6829      	ldr	r1, [r5, #0]
 8007910:	291d      	cmp	r1, #29
 8007912:	d82b      	bhi.n	800796c <__sflush_r+0xb0>
 8007914:	4a28      	ldr	r2, [pc, #160]	@ (80079b8 <__sflush_r+0xfc>)
 8007916:	410a      	asrs	r2, r1
 8007918:	07d6      	lsls	r6, r2, #31
 800791a:	d427      	bmi.n	800796c <__sflush_r+0xb0>
 800791c:	2200      	movs	r2, #0
 800791e:	6062      	str	r2, [r4, #4]
 8007920:	6922      	ldr	r2, [r4, #16]
 8007922:	04d9      	lsls	r1, r3, #19
 8007924:	6022      	str	r2, [r4, #0]
 8007926:	d504      	bpl.n	8007932 <__sflush_r+0x76>
 8007928:	1c42      	adds	r2, r0, #1
 800792a:	d101      	bne.n	8007930 <__sflush_r+0x74>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b903      	cbnz	r3, 8007932 <__sflush_r+0x76>
 8007930:	6560      	str	r0, [r4, #84]	@ 0x54
 8007932:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007934:	602f      	str	r7, [r5, #0]
 8007936:	b1b9      	cbz	r1, 8007968 <__sflush_r+0xac>
 8007938:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800793c:	4299      	cmp	r1, r3
 800793e:	d002      	beq.n	8007946 <__sflush_r+0x8a>
 8007940:	4628      	mov	r0, r5
 8007942:	f7ff f9e5 	bl	8006d10 <_free_r>
 8007946:	2300      	movs	r3, #0
 8007948:	6363      	str	r3, [r4, #52]	@ 0x34
 800794a:	e00d      	b.n	8007968 <__sflush_r+0xac>
 800794c:	2301      	movs	r3, #1
 800794e:	4628      	mov	r0, r5
 8007950:	47b0      	blx	r6
 8007952:	4602      	mov	r2, r0
 8007954:	1c50      	adds	r0, r2, #1
 8007956:	d1c9      	bne.n	80078ec <__sflush_r+0x30>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0c6      	beq.n	80078ec <__sflush_r+0x30>
 800795e:	2b1d      	cmp	r3, #29
 8007960:	d001      	beq.n	8007966 <__sflush_r+0xaa>
 8007962:	2b16      	cmp	r3, #22
 8007964:	d11d      	bne.n	80079a2 <__sflush_r+0xe6>
 8007966:	602f      	str	r7, [r5, #0]
 8007968:	2000      	movs	r0, #0
 800796a:	e021      	b.n	80079b0 <__sflush_r+0xf4>
 800796c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007970:	b21b      	sxth	r3, r3
 8007972:	e01a      	b.n	80079aa <__sflush_r+0xee>
 8007974:	690f      	ldr	r7, [r1, #16]
 8007976:	2f00      	cmp	r7, #0
 8007978:	d0f6      	beq.n	8007968 <__sflush_r+0xac>
 800797a:	0793      	lsls	r3, r2, #30
 800797c:	bf18      	it	ne
 800797e:	2300      	movne	r3, #0
 8007980:	680e      	ldr	r6, [r1, #0]
 8007982:	bf08      	it	eq
 8007984:	694b      	ldreq	r3, [r1, #20]
 8007986:	1bf6      	subs	r6, r6, r7
 8007988:	600f      	str	r7, [r1, #0]
 800798a:	608b      	str	r3, [r1, #8]
 800798c:	2e00      	cmp	r6, #0
 800798e:	ddeb      	ble.n	8007968 <__sflush_r+0xac>
 8007990:	4633      	mov	r3, r6
 8007992:	463a      	mov	r2, r7
 8007994:	4628      	mov	r0, r5
 8007996:	6a21      	ldr	r1, [r4, #32]
 8007998:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800799c:	47e0      	blx	ip
 800799e:	2800      	cmp	r0, #0
 80079a0:	dc07      	bgt.n	80079b2 <__sflush_r+0xf6>
 80079a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079aa:	f04f 30ff 	mov.w	r0, #4294967295
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b2:	4407      	add	r7, r0
 80079b4:	1a36      	subs	r6, r6, r0
 80079b6:	e7e9      	b.n	800798c <__sflush_r+0xd0>
 80079b8:	dfbffffe 	.word	0xdfbffffe

080079bc <_fflush_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	690b      	ldr	r3, [r1, #16]
 80079c0:	4605      	mov	r5, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	b913      	cbnz	r3, 80079cc <_fflush_r+0x10>
 80079c6:	2500      	movs	r5, #0
 80079c8:	4628      	mov	r0, r5
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	b118      	cbz	r0, 80079d6 <_fflush_r+0x1a>
 80079ce:	6a03      	ldr	r3, [r0, #32]
 80079d0:	b90b      	cbnz	r3, 80079d6 <_fflush_r+0x1a>
 80079d2:	f7fe fa07 	bl	8005de4 <__sinit>
 80079d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0f3      	beq.n	80079c6 <_fflush_r+0xa>
 80079de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079e0:	07d0      	lsls	r0, r2, #31
 80079e2:	d404      	bmi.n	80079ee <_fflush_r+0x32>
 80079e4:	0599      	lsls	r1, r3, #22
 80079e6:	d402      	bmi.n	80079ee <_fflush_r+0x32>
 80079e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ea:	f7fe fb22 	bl	8006032 <__retarget_lock_acquire_recursive>
 80079ee:	4628      	mov	r0, r5
 80079f0:	4621      	mov	r1, r4
 80079f2:	f7ff ff63 	bl	80078bc <__sflush_r>
 80079f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079f8:	4605      	mov	r5, r0
 80079fa:	07da      	lsls	r2, r3, #31
 80079fc:	d4e4      	bmi.n	80079c8 <_fflush_r+0xc>
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	059b      	lsls	r3, r3, #22
 8007a02:	d4e1      	bmi.n	80079c8 <_fflush_r+0xc>
 8007a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a06:	f7fe fb15 	bl	8006034 <__retarget_lock_release_recursive>
 8007a0a:	e7dd      	b.n	80079c8 <_fflush_r+0xc>

08007a0c <memmove>:
 8007a0c:	4288      	cmp	r0, r1
 8007a0e:	b510      	push	{r4, lr}
 8007a10:	eb01 0402 	add.w	r4, r1, r2
 8007a14:	d902      	bls.n	8007a1c <memmove+0x10>
 8007a16:	4284      	cmp	r4, r0
 8007a18:	4623      	mov	r3, r4
 8007a1a:	d807      	bhi.n	8007a2c <memmove+0x20>
 8007a1c:	1e43      	subs	r3, r0, #1
 8007a1e:	42a1      	cmp	r1, r4
 8007a20:	d008      	beq.n	8007a34 <memmove+0x28>
 8007a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a2a:	e7f8      	b.n	8007a1e <memmove+0x12>
 8007a2c:	4601      	mov	r1, r0
 8007a2e:	4402      	add	r2, r0
 8007a30:	428a      	cmp	r2, r1
 8007a32:	d100      	bne.n	8007a36 <memmove+0x2a>
 8007a34:	bd10      	pop	{r4, pc}
 8007a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a3e:	e7f7      	b.n	8007a30 <memmove+0x24>

08007a40 <_sbrk_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	2300      	movs	r3, #0
 8007a44:	4d05      	ldr	r5, [pc, #20]	@ (8007a5c <_sbrk_r+0x1c>)
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f7fa f836 	bl	8001abc <_sbrk>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_sbrk_r+0x1a>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_sbrk_r+0x1a>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	20000974 	.word	0x20000974

08007a60 <__assert_func>:
 8007a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a62:	4614      	mov	r4, r2
 8007a64:	461a      	mov	r2, r3
 8007a66:	4b09      	ldr	r3, [pc, #36]	@ (8007a8c <__assert_func+0x2c>)
 8007a68:	4605      	mov	r5, r0
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68d8      	ldr	r0, [r3, #12]
 8007a6e:	b954      	cbnz	r4, 8007a86 <__assert_func+0x26>
 8007a70:	4b07      	ldr	r3, [pc, #28]	@ (8007a90 <__assert_func+0x30>)
 8007a72:	461c      	mov	r4, r3
 8007a74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a78:	9100      	str	r1, [sp, #0]
 8007a7a:	462b      	mov	r3, r5
 8007a7c:	4905      	ldr	r1, [pc, #20]	@ (8007a94 <__assert_func+0x34>)
 8007a7e:	f000 f86f 	bl	8007b60 <fiprintf>
 8007a82:	f000 f87f 	bl	8007b84 <abort>
 8007a86:	4b04      	ldr	r3, [pc, #16]	@ (8007a98 <__assert_func+0x38>)
 8007a88:	e7f4      	b.n	8007a74 <__assert_func+0x14>
 8007a8a:	bf00      	nop
 8007a8c:	20000018 	.word	0x20000018
 8007a90:	08008a46 	.word	0x08008a46
 8007a94:	08008a18 	.word	0x08008a18
 8007a98:	08008a0b 	.word	0x08008a0b

08007a9c <_calloc_r>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	fba1 5402 	umull	r5, r4, r1, r2
 8007aa2:	b93c      	cbnz	r4, 8007ab4 <_calloc_r+0x18>
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7ff f9a5 	bl	8006df4 <_malloc_r>
 8007aaa:	4606      	mov	r6, r0
 8007aac:	b928      	cbnz	r0, 8007aba <_calloc_r+0x1e>
 8007aae:	2600      	movs	r6, #0
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}
 8007ab4:	220c      	movs	r2, #12
 8007ab6:	6002      	str	r2, [r0, #0]
 8007ab8:	e7f9      	b.n	8007aae <_calloc_r+0x12>
 8007aba:	462a      	mov	r2, r5
 8007abc:	4621      	mov	r1, r4
 8007abe:	f7fe fa3a 	bl	8005f36 <memset>
 8007ac2:	e7f5      	b.n	8007ab0 <_calloc_r+0x14>

08007ac4 <__ascii_mbtowc>:
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	b901      	cbnz	r1, 8007aca <__ascii_mbtowc+0x6>
 8007ac8:	a901      	add	r1, sp, #4
 8007aca:	b142      	cbz	r2, 8007ade <__ascii_mbtowc+0x1a>
 8007acc:	b14b      	cbz	r3, 8007ae2 <__ascii_mbtowc+0x1e>
 8007ace:	7813      	ldrb	r3, [r2, #0]
 8007ad0:	600b      	str	r3, [r1, #0]
 8007ad2:	7812      	ldrb	r2, [r2, #0]
 8007ad4:	1e10      	subs	r0, r2, #0
 8007ad6:	bf18      	it	ne
 8007ad8:	2001      	movne	r0, #1
 8007ada:	b002      	add	sp, #8
 8007adc:	4770      	bx	lr
 8007ade:	4610      	mov	r0, r2
 8007ae0:	e7fb      	b.n	8007ada <__ascii_mbtowc+0x16>
 8007ae2:	f06f 0001 	mvn.w	r0, #1
 8007ae6:	e7f8      	b.n	8007ada <__ascii_mbtowc+0x16>

08007ae8 <_realloc_r>:
 8007ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aec:	4680      	mov	r8, r0
 8007aee:	4615      	mov	r5, r2
 8007af0:	460c      	mov	r4, r1
 8007af2:	b921      	cbnz	r1, 8007afe <_realloc_r+0x16>
 8007af4:	4611      	mov	r1, r2
 8007af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	f7ff b97b 	b.w	8006df4 <_malloc_r>
 8007afe:	b92a      	cbnz	r2, 8007b0c <_realloc_r+0x24>
 8007b00:	f7ff f906 	bl	8006d10 <_free_r>
 8007b04:	2400      	movs	r4, #0
 8007b06:	4620      	mov	r0, r4
 8007b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b0c:	f000 f841 	bl	8007b92 <_malloc_usable_size_r>
 8007b10:	4285      	cmp	r5, r0
 8007b12:	4606      	mov	r6, r0
 8007b14:	d802      	bhi.n	8007b1c <_realloc_r+0x34>
 8007b16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b1a:	d8f4      	bhi.n	8007b06 <_realloc_r+0x1e>
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4640      	mov	r0, r8
 8007b20:	f7ff f968 	bl	8006df4 <_malloc_r>
 8007b24:	4607      	mov	r7, r0
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d0ec      	beq.n	8007b04 <_realloc_r+0x1c>
 8007b2a:	42b5      	cmp	r5, r6
 8007b2c:	462a      	mov	r2, r5
 8007b2e:	4621      	mov	r1, r4
 8007b30:	bf28      	it	cs
 8007b32:	4632      	movcs	r2, r6
 8007b34:	f7fe fa8d 	bl	8006052 <memcpy>
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	f7ff f8e8 	bl	8006d10 <_free_r>
 8007b40:	463c      	mov	r4, r7
 8007b42:	e7e0      	b.n	8007b06 <_realloc_r+0x1e>

08007b44 <__ascii_wctomb>:
 8007b44:	4603      	mov	r3, r0
 8007b46:	4608      	mov	r0, r1
 8007b48:	b141      	cbz	r1, 8007b5c <__ascii_wctomb+0x18>
 8007b4a:	2aff      	cmp	r2, #255	@ 0xff
 8007b4c:	d904      	bls.n	8007b58 <__ascii_wctomb+0x14>
 8007b4e:	228a      	movs	r2, #138	@ 0x8a
 8007b50:	f04f 30ff 	mov.w	r0, #4294967295
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	4770      	bx	lr
 8007b58:	2001      	movs	r0, #1
 8007b5a:	700a      	strb	r2, [r1, #0]
 8007b5c:	4770      	bx	lr
	...

08007b60 <fiprintf>:
 8007b60:	b40e      	push	{r1, r2, r3}
 8007b62:	b503      	push	{r0, r1, lr}
 8007b64:	4601      	mov	r1, r0
 8007b66:	ab03      	add	r3, sp, #12
 8007b68:	4805      	ldr	r0, [pc, #20]	@ (8007b80 <fiprintf+0x20>)
 8007b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b6e:	6800      	ldr	r0, [r0, #0]
 8007b70:	9301      	str	r3, [sp, #4]
 8007b72:	f000 f83d 	bl	8007bf0 <_vfiprintf_r>
 8007b76:	b002      	add	sp, #8
 8007b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b7c:	b003      	add	sp, #12
 8007b7e:	4770      	bx	lr
 8007b80:	20000018 	.word	0x20000018

08007b84 <abort>:
 8007b84:	2006      	movs	r0, #6
 8007b86:	b508      	push	{r3, lr}
 8007b88:	f000 fa06 	bl	8007f98 <raise>
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	f7f9 ff20 	bl	80019d2 <_exit>

08007b92 <_malloc_usable_size_r>:
 8007b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b96:	1f18      	subs	r0, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bfbc      	itt	lt
 8007b9c:	580b      	ldrlt	r3, [r1, r0]
 8007b9e:	18c0      	addlt	r0, r0, r3
 8007ba0:	4770      	bx	lr

08007ba2 <__sfputc_r>:
 8007ba2:	6893      	ldr	r3, [r2, #8]
 8007ba4:	b410      	push	{r4}
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	6093      	str	r3, [r2, #8]
 8007bac:	da07      	bge.n	8007bbe <__sfputc_r+0x1c>
 8007bae:	6994      	ldr	r4, [r2, #24]
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	db01      	blt.n	8007bb8 <__sfputc_r+0x16>
 8007bb4:	290a      	cmp	r1, #10
 8007bb6:	d102      	bne.n	8007bbe <__sfputc_r+0x1c>
 8007bb8:	bc10      	pop	{r4}
 8007bba:	f000 b931 	b.w	8007e20 <__swbuf_r>
 8007bbe:	6813      	ldr	r3, [r2, #0]
 8007bc0:	1c58      	adds	r0, r3, #1
 8007bc2:	6010      	str	r0, [r2, #0]
 8007bc4:	7019      	strb	r1, [r3, #0]
 8007bc6:	4608      	mov	r0, r1
 8007bc8:	bc10      	pop	{r4}
 8007bca:	4770      	bx	lr

08007bcc <__sfputs_r>:
 8007bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bce:	4606      	mov	r6, r0
 8007bd0:	460f      	mov	r7, r1
 8007bd2:	4614      	mov	r4, r2
 8007bd4:	18d5      	adds	r5, r2, r3
 8007bd6:	42ac      	cmp	r4, r5
 8007bd8:	d101      	bne.n	8007bde <__sfputs_r+0x12>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	e007      	b.n	8007bee <__sfputs_r+0x22>
 8007bde:	463a      	mov	r2, r7
 8007be0:	4630      	mov	r0, r6
 8007be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be6:	f7ff ffdc 	bl	8007ba2 <__sfputc_r>
 8007bea:	1c43      	adds	r3, r0, #1
 8007bec:	d1f3      	bne.n	8007bd6 <__sfputs_r+0xa>
 8007bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bf0 <_vfiprintf_r>:
 8007bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	460d      	mov	r5, r1
 8007bf6:	4614      	mov	r4, r2
 8007bf8:	4698      	mov	r8, r3
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	b09d      	sub	sp, #116	@ 0x74
 8007bfe:	b118      	cbz	r0, 8007c08 <_vfiprintf_r+0x18>
 8007c00:	6a03      	ldr	r3, [r0, #32]
 8007c02:	b90b      	cbnz	r3, 8007c08 <_vfiprintf_r+0x18>
 8007c04:	f7fe f8ee 	bl	8005de4 <__sinit>
 8007c08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c0a:	07d9      	lsls	r1, r3, #31
 8007c0c:	d405      	bmi.n	8007c1a <_vfiprintf_r+0x2a>
 8007c0e:	89ab      	ldrh	r3, [r5, #12]
 8007c10:	059a      	lsls	r2, r3, #22
 8007c12:	d402      	bmi.n	8007c1a <_vfiprintf_r+0x2a>
 8007c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c16:	f7fe fa0c 	bl	8006032 <__retarget_lock_acquire_recursive>
 8007c1a:	89ab      	ldrh	r3, [r5, #12]
 8007c1c:	071b      	lsls	r3, r3, #28
 8007c1e:	d501      	bpl.n	8007c24 <_vfiprintf_r+0x34>
 8007c20:	692b      	ldr	r3, [r5, #16]
 8007c22:	b99b      	cbnz	r3, 8007c4c <_vfiprintf_r+0x5c>
 8007c24:	4629      	mov	r1, r5
 8007c26:	4630      	mov	r0, r6
 8007c28:	f000 f938 	bl	8007e9c <__swsetup_r>
 8007c2c:	b170      	cbz	r0, 8007c4c <_vfiprintf_r+0x5c>
 8007c2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c30:	07dc      	lsls	r4, r3, #31
 8007c32:	d504      	bpl.n	8007c3e <_vfiprintf_r+0x4e>
 8007c34:	f04f 30ff 	mov.w	r0, #4294967295
 8007c38:	b01d      	add	sp, #116	@ 0x74
 8007c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3e:	89ab      	ldrh	r3, [r5, #12]
 8007c40:	0598      	lsls	r0, r3, #22
 8007c42:	d4f7      	bmi.n	8007c34 <_vfiprintf_r+0x44>
 8007c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c46:	f7fe f9f5 	bl	8006034 <__retarget_lock_release_recursive>
 8007c4a:	e7f3      	b.n	8007c34 <_vfiprintf_r+0x44>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c50:	2320      	movs	r3, #32
 8007c52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c56:	2330      	movs	r3, #48	@ 0x30
 8007c58:	f04f 0901 	mov.w	r9, #1
 8007c5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c60:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007e0c <_vfiprintf_r+0x21c>
 8007c64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c68:	4623      	mov	r3, r4
 8007c6a:	469a      	mov	sl, r3
 8007c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c70:	b10a      	cbz	r2, 8007c76 <_vfiprintf_r+0x86>
 8007c72:	2a25      	cmp	r2, #37	@ 0x25
 8007c74:	d1f9      	bne.n	8007c6a <_vfiprintf_r+0x7a>
 8007c76:	ebba 0b04 	subs.w	fp, sl, r4
 8007c7a:	d00b      	beq.n	8007c94 <_vfiprintf_r+0xa4>
 8007c7c:	465b      	mov	r3, fp
 8007c7e:	4622      	mov	r2, r4
 8007c80:	4629      	mov	r1, r5
 8007c82:	4630      	mov	r0, r6
 8007c84:	f7ff ffa2 	bl	8007bcc <__sfputs_r>
 8007c88:	3001      	adds	r0, #1
 8007c8a:	f000 80a7 	beq.w	8007ddc <_vfiprintf_r+0x1ec>
 8007c8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c90:	445a      	add	r2, fp
 8007c92:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c94:	f89a 3000 	ldrb.w	r3, [sl]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 809f 	beq.w	8007ddc <_vfiprintf_r+0x1ec>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ca8:	f10a 0a01 	add.w	sl, sl, #1
 8007cac:	9304      	str	r3, [sp, #16]
 8007cae:	9307      	str	r3, [sp, #28]
 8007cb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cb6:	4654      	mov	r4, sl
 8007cb8:	2205      	movs	r2, #5
 8007cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cbe:	4853      	ldr	r0, [pc, #332]	@ (8007e0c <_vfiprintf_r+0x21c>)
 8007cc0:	f7fe f9b9 	bl	8006036 <memchr>
 8007cc4:	9a04      	ldr	r2, [sp, #16]
 8007cc6:	b9d8      	cbnz	r0, 8007d00 <_vfiprintf_r+0x110>
 8007cc8:	06d1      	lsls	r1, r2, #27
 8007cca:	bf44      	itt	mi
 8007ccc:	2320      	movmi	r3, #32
 8007cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cd2:	0713      	lsls	r3, r2, #28
 8007cd4:	bf44      	itt	mi
 8007cd6:	232b      	movmi	r3, #43	@ 0x2b
 8007cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ce2:	d015      	beq.n	8007d10 <_vfiprintf_r+0x120>
 8007ce4:	4654      	mov	r4, sl
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	f04f 0c0a 	mov.w	ip, #10
 8007cec:	9a07      	ldr	r2, [sp, #28]
 8007cee:	4621      	mov	r1, r4
 8007cf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cf4:	3b30      	subs	r3, #48	@ 0x30
 8007cf6:	2b09      	cmp	r3, #9
 8007cf8:	d94b      	bls.n	8007d92 <_vfiprintf_r+0x1a2>
 8007cfa:	b1b0      	cbz	r0, 8007d2a <_vfiprintf_r+0x13a>
 8007cfc:	9207      	str	r2, [sp, #28]
 8007cfe:	e014      	b.n	8007d2a <_vfiprintf_r+0x13a>
 8007d00:	eba0 0308 	sub.w	r3, r0, r8
 8007d04:	fa09 f303 	lsl.w	r3, r9, r3
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	46a2      	mov	sl, r4
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	e7d2      	b.n	8007cb6 <_vfiprintf_r+0xc6>
 8007d10:	9b03      	ldr	r3, [sp, #12]
 8007d12:	1d19      	adds	r1, r3, #4
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	9103      	str	r1, [sp, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	bfbb      	ittet	lt
 8007d1c:	425b      	neglt	r3, r3
 8007d1e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d22:	9307      	strge	r3, [sp, #28]
 8007d24:	9307      	strlt	r3, [sp, #28]
 8007d26:	bfb8      	it	lt
 8007d28:	9204      	strlt	r2, [sp, #16]
 8007d2a:	7823      	ldrb	r3, [r4, #0]
 8007d2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d2e:	d10a      	bne.n	8007d46 <_vfiprintf_r+0x156>
 8007d30:	7863      	ldrb	r3, [r4, #1]
 8007d32:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d34:	d132      	bne.n	8007d9c <_vfiprintf_r+0x1ac>
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	3402      	adds	r4, #2
 8007d3a:	1d1a      	adds	r2, r3, #4
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	9203      	str	r2, [sp, #12]
 8007d40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d44:	9305      	str	r3, [sp, #20]
 8007d46:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007e10 <_vfiprintf_r+0x220>
 8007d4a:	2203      	movs	r2, #3
 8007d4c:	4650      	mov	r0, sl
 8007d4e:	7821      	ldrb	r1, [r4, #0]
 8007d50:	f7fe f971 	bl	8006036 <memchr>
 8007d54:	b138      	cbz	r0, 8007d66 <_vfiprintf_r+0x176>
 8007d56:	2240      	movs	r2, #64	@ 0x40
 8007d58:	9b04      	ldr	r3, [sp, #16]
 8007d5a:	eba0 000a 	sub.w	r0, r0, sl
 8007d5e:	4082      	lsls	r2, r0
 8007d60:	4313      	orrs	r3, r2
 8007d62:	3401      	adds	r4, #1
 8007d64:	9304      	str	r3, [sp, #16]
 8007d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6a:	2206      	movs	r2, #6
 8007d6c:	4829      	ldr	r0, [pc, #164]	@ (8007e14 <_vfiprintf_r+0x224>)
 8007d6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d72:	f7fe f960 	bl	8006036 <memchr>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d03f      	beq.n	8007dfa <_vfiprintf_r+0x20a>
 8007d7a:	4b27      	ldr	r3, [pc, #156]	@ (8007e18 <_vfiprintf_r+0x228>)
 8007d7c:	bb1b      	cbnz	r3, 8007dc6 <_vfiprintf_r+0x1d6>
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	3307      	adds	r3, #7
 8007d82:	f023 0307 	bic.w	r3, r3, #7
 8007d86:	3308      	adds	r3, #8
 8007d88:	9303      	str	r3, [sp, #12]
 8007d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d8c:	443b      	add	r3, r7
 8007d8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d90:	e76a      	b.n	8007c68 <_vfiprintf_r+0x78>
 8007d92:	460c      	mov	r4, r1
 8007d94:	2001      	movs	r0, #1
 8007d96:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d9a:	e7a8      	b.n	8007cee <_vfiprintf_r+0xfe>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f04f 0c0a 	mov.w	ip, #10
 8007da2:	4619      	mov	r1, r3
 8007da4:	3401      	adds	r4, #1
 8007da6:	9305      	str	r3, [sp, #20]
 8007da8:	4620      	mov	r0, r4
 8007daa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dae:	3a30      	subs	r2, #48	@ 0x30
 8007db0:	2a09      	cmp	r2, #9
 8007db2:	d903      	bls.n	8007dbc <_vfiprintf_r+0x1cc>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d0c6      	beq.n	8007d46 <_vfiprintf_r+0x156>
 8007db8:	9105      	str	r1, [sp, #20]
 8007dba:	e7c4      	b.n	8007d46 <_vfiprintf_r+0x156>
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dc4:	e7f0      	b.n	8007da8 <_vfiprintf_r+0x1b8>
 8007dc6:	ab03      	add	r3, sp, #12
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	462a      	mov	r2, r5
 8007dcc:	4630      	mov	r0, r6
 8007dce:	4b13      	ldr	r3, [pc, #76]	@ (8007e1c <_vfiprintf_r+0x22c>)
 8007dd0:	a904      	add	r1, sp, #16
 8007dd2:	f7fd fbbd 	bl	8005550 <_printf_float>
 8007dd6:	4607      	mov	r7, r0
 8007dd8:	1c78      	adds	r0, r7, #1
 8007dda:	d1d6      	bne.n	8007d8a <_vfiprintf_r+0x19a>
 8007ddc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dde:	07d9      	lsls	r1, r3, #31
 8007de0:	d405      	bmi.n	8007dee <_vfiprintf_r+0x1fe>
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	059a      	lsls	r2, r3, #22
 8007de6:	d402      	bmi.n	8007dee <_vfiprintf_r+0x1fe>
 8007de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dea:	f7fe f923 	bl	8006034 <__retarget_lock_release_recursive>
 8007dee:	89ab      	ldrh	r3, [r5, #12]
 8007df0:	065b      	lsls	r3, r3, #25
 8007df2:	f53f af1f 	bmi.w	8007c34 <_vfiprintf_r+0x44>
 8007df6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007df8:	e71e      	b.n	8007c38 <_vfiprintf_r+0x48>
 8007dfa:	ab03      	add	r3, sp, #12
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	462a      	mov	r2, r5
 8007e00:	4630      	mov	r0, r6
 8007e02:	4b06      	ldr	r3, [pc, #24]	@ (8007e1c <_vfiprintf_r+0x22c>)
 8007e04:	a904      	add	r1, sp, #16
 8007e06:	f7fd fe41 	bl	8005a8c <_printf_i>
 8007e0a:	e7e4      	b.n	8007dd6 <_vfiprintf_r+0x1e6>
 8007e0c:	080089f0 	.word	0x080089f0
 8007e10:	080089f6 	.word	0x080089f6
 8007e14:	080089fa 	.word	0x080089fa
 8007e18:	08005551 	.word	0x08005551
 8007e1c:	08007bcd 	.word	0x08007bcd

08007e20 <__swbuf_r>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	460e      	mov	r6, r1
 8007e24:	4614      	mov	r4, r2
 8007e26:	4605      	mov	r5, r0
 8007e28:	b118      	cbz	r0, 8007e32 <__swbuf_r+0x12>
 8007e2a:	6a03      	ldr	r3, [r0, #32]
 8007e2c:	b90b      	cbnz	r3, 8007e32 <__swbuf_r+0x12>
 8007e2e:	f7fd ffd9 	bl	8005de4 <__sinit>
 8007e32:	69a3      	ldr	r3, [r4, #24]
 8007e34:	60a3      	str	r3, [r4, #8]
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	071a      	lsls	r2, r3, #28
 8007e3a:	d501      	bpl.n	8007e40 <__swbuf_r+0x20>
 8007e3c:	6923      	ldr	r3, [r4, #16]
 8007e3e:	b943      	cbnz	r3, 8007e52 <__swbuf_r+0x32>
 8007e40:	4621      	mov	r1, r4
 8007e42:	4628      	mov	r0, r5
 8007e44:	f000 f82a 	bl	8007e9c <__swsetup_r>
 8007e48:	b118      	cbz	r0, 8007e52 <__swbuf_r+0x32>
 8007e4a:	f04f 37ff 	mov.w	r7, #4294967295
 8007e4e:	4638      	mov	r0, r7
 8007e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	6922      	ldr	r2, [r4, #16]
 8007e56:	b2f6      	uxtb	r6, r6
 8007e58:	1a98      	subs	r0, r3, r2
 8007e5a:	6963      	ldr	r3, [r4, #20]
 8007e5c:	4637      	mov	r7, r6
 8007e5e:	4283      	cmp	r3, r0
 8007e60:	dc05      	bgt.n	8007e6e <__swbuf_r+0x4e>
 8007e62:	4621      	mov	r1, r4
 8007e64:	4628      	mov	r0, r5
 8007e66:	f7ff fda9 	bl	80079bc <_fflush_r>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d1ed      	bne.n	8007e4a <__swbuf_r+0x2a>
 8007e6e:	68a3      	ldr	r3, [r4, #8]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	60a3      	str	r3, [r4, #8]
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	6022      	str	r2, [r4, #0]
 8007e7a:	701e      	strb	r6, [r3, #0]
 8007e7c:	6962      	ldr	r2, [r4, #20]
 8007e7e:	1c43      	adds	r3, r0, #1
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d004      	beq.n	8007e8e <__swbuf_r+0x6e>
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	07db      	lsls	r3, r3, #31
 8007e88:	d5e1      	bpl.n	8007e4e <__swbuf_r+0x2e>
 8007e8a:	2e0a      	cmp	r6, #10
 8007e8c:	d1df      	bne.n	8007e4e <__swbuf_r+0x2e>
 8007e8e:	4621      	mov	r1, r4
 8007e90:	4628      	mov	r0, r5
 8007e92:	f7ff fd93 	bl	80079bc <_fflush_r>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d0d9      	beq.n	8007e4e <__swbuf_r+0x2e>
 8007e9a:	e7d6      	b.n	8007e4a <__swbuf_r+0x2a>

08007e9c <__swsetup_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4b29      	ldr	r3, [pc, #164]	@ (8007f44 <__swsetup_r+0xa8>)
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	b118      	cbz	r0, 8007eb0 <__swsetup_r+0x14>
 8007ea8:	6a03      	ldr	r3, [r0, #32]
 8007eaa:	b90b      	cbnz	r3, 8007eb0 <__swsetup_r+0x14>
 8007eac:	f7fd ff9a 	bl	8005de4 <__sinit>
 8007eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb4:	0719      	lsls	r1, r3, #28
 8007eb6:	d422      	bmi.n	8007efe <__swsetup_r+0x62>
 8007eb8:	06da      	lsls	r2, r3, #27
 8007eba:	d407      	bmi.n	8007ecc <__swsetup_r+0x30>
 8007ebc:	2209      	movs	r2, #9
 8007ebe:	602a      	str	r2, [r5, #0]
 8007ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	e033      	b.n	8007f34 <__swsetup_r+0x98>
 8007ecc:	0758      	lsls	r0, r3, #29
 8007ece:	d512      	bpl.n	8007ef6 <__swsetup_r+0x5a>
 8007ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ed2:	b141      	cbz	r1, 8007ee6 <__swsetup_r+0x4a>
 8007ed4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ed8:	4299      	cmp	r1, r3
 8007eda:	d002      	beq.n	8007ee2 <__swsetup_r+0x46>
 8007edc:	4628      	mov	r0, r5
 8007ede:	f7fe ff17 	bl	8006d10 <_free_r>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007eec:	81a3      	strh	r3, [r4, #12]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	6063      	str	r3, [r4, #4]
 8007ef2:	6923      	ldr	r3, [r4, #16]
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	f043 0308 	orr.w	r3, r3, #8
 8007efc:	81a3      	strh	r3, [r4, #12]
 8007efe:	6923      	ldr	r3, [r4, #16]
 8007f00:	b94b      	cbnz	r3, 8007f16 <__swsetup_r+0x7a>
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f0c:	d003      	beq.n	8007f16 <__swsetup_r+0x7a>
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f000 f882 	bl	800801a <__smakebuf_r>
 8007f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f1a:	f013 0201 	ands.w	r2, r3, #1
 8007f1e:	d00a      	beq.n	8007f36 <__swsetup_r+0x9a>
 8007f20:	2200      	movs	r2, #0
 8007f22:	60a2      	str	r2, [r4, #8]
 8007f24:	6962      	ldr	r2, [r4, #20]
 8007f26:	4252      	negs	r2, r2
 8007f28:	61a2      	str	r2, [r4, #24]
 8007f2a:	6922      	ldr	r2, [r4, #16]
 8007f2c:	b942      	cbnz	r2, 8007f40 <__swsetup_r+0xa4>
 8007f2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f32:	d1c5      	bne.n	8007ec0 <__swsetup_r+0x24>
 8007f34:	bd38      	pop	{r3, r4, r5, pc}
 8007f36:	0799      	lsls	r1, r3, #30
 8007f38:	bf58      	it	pl
 8007f3a:	6962      	ldrpl	r2, [r4, #20]
 8007f3c:	60a2      	str	r2, [r4, #8]
 8007f3e:	e7f4      	b.n	8007f2a <__swsetup_r+0x8e>
 8007f40:	2000      	movs	r0, #0
 8007f42:	e7f7      	b.n	8007f34 <__swsetup_r+0x98>
 8007f44:	20000018 	.word	0x20000018

08007f48 <_raise_r>:
 8007f48:	291f      	cmp	r1, #31
 8007f4a:	b538      	push	{r3, r4, r5, lr}
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	d904      	bls.n	8007f5c <_raise_r+0x14>
 8007f52:	2316      	movs	r3, #22
 8007f54:	6003      	str	r3, [r0, #0]
 8007f56:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f5e:	b112      	cbz	r2, 8007f66 <_raise_r+0x1e>
 8007f60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f64:	b94b      	cbnz	r3, 8007f7a <_raise_r+0x32>
 8007f66:	4628      	mov	r0, r5
 8007f68:	f000 f830 	bl	8007fcc <_getpid_r>
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	4601      	mov	r1, r0
 8007f70:	4628      	mov	r0, r5
 8007f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f76:	f000 b817 	b.w	8007fa8 <_kill_r>
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d00a      	beq.n	8007f94 <_raise_r+0x4c>
 8007f7e:	1c59      	adds	r1, r3, #1
 8007f80:	d103      	bne.n	8007f8a <_raise_r+0x42>
 8007f82:	2316      	movs	r3, #22
 8007f84:	6003      	str	r3, [r0, #0]
 8007f86:	2001      	movs	r0, #1
 8007f88:	e7e7      	b.n	8007f5a <_raise_r+0x12>
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f92:	4798      	blx	r3
 8007f94:	2000      	movs	r0, #0
 8007f96:	e7e0      	b.n	8007f5a <_raise_r+0x12>

08007f98 <raise>:
 8007f98:	4b02      	ldr	r3, [pc, #8]	@ (8007fa4 <raise+0xc>)
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	f7ff bfd3 	b.w	8007f48 <_raise_r>
 8007fa2:	bf00      	nop
 8007fa4:	20000018 	.word	0x20000018

08007fa8 <_kill_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	2300      	movs	r3, #0
 8007fac:	4d06      	ldr	r5, [pc, #24]	@ (8007fc8 <_kill_r+0x20>)
 8007fae:	4604      	mov	r4, r0
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	602b      	str	r3, [r5, #0]
 8007fb6:	f7f9 fcfc 	bl	80019b2 <_kill>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	d102      	bne.n	8007fc4 <_kill_r+0x1c>
 8007fbe:	682b      	ldr	r3, [r5, #0]
 8007fc0:	b103      	cbz	r3, 8007fc4 <_kill_r+0x1c>
 8007fc2:	6023      	str	r3, [r4, #0]
 8007fc4:	bd38      	pop	{r3, r4, r5, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000974 	.word	0x20000974

08007fcc <_getpid_r>:
 8007fcc:	f7f9 bcea 	b.w	80019a4 <_getpid>

08007fd0 <__swhatbuf_r>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd8:	4615      	mov	r5, r2
 8007fda:	2900      	cmp	r1, #0
 8007fdc:	461e      	mov	r6, r3
 8007fde:	b096      	sub	sp, #88	@ 0x58
 8007fe0:	da0c      	bge.n	8007ffc <__swhatbuf_r+0x2c>
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fea:	bf14      	ite	ne
 8007fec:	2340      	movne	r3, #64	@ 0x40
 8007fee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	6031      	str	r1, [r6, #0]
 8007ff6:	602b      	str	r3, [r5, #0]
 8007ff8:	b016      	add	sp, #88	@ 0x58
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	466a      	mov	r2, sp
 8007ffe:	f000 f849 	bl	8008094 <_fstat_r>
 8008002:	2800      	cmp	r0, #0
 8008004:	dbed      	blt.n	8007fe2 <__swhatbuf_r+0x12>
 8008006:	9901      	ldr	r1, [sp, #4]
 8008008:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800800c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008010:	4259      	negs	r1, r3
 8008012:	4159      	adcs	r1, r3
 8008014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008018:	e7eb      	b.n	8007ff2 <__swhatbuf_r+0x22>

0800801a <__smakebuf_r>:
 800801a:	898b      	ldrh	r3, [r1, #12]
 800801c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800801e:	079d      	lsls	r5, r3, #30
 8008020:	4606      	mov	r6, r0
 8008022:	460c      	mov	r4, r1
 8008024:	d507      	bpl.n	8008036 <__smakebuf_r+0x1c>
 8008026:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800802a:	6023      	str	r3, [r4, #0]
 800802c:	6123      	str	r3, [r4, #16]
 800802e:	2301      	movs	r3, #1
 8008030:	6163      	str	r3, [r4, #20]
 8008032:	b003      	add	sp, #12
 8008034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008036:	466a      	mov	r2, sp
 8008038:	ab01      	add	r3, sp, #4
 800803a:	f7ff ffc9 	bl	8007fd0 <__swhatbuf_r>
 800803e:	9f00      	ldr	r7, [sp, #0]
 8008040:	4605      	mov	r5, r0
 8008042:	4639      	mov	r1, r7
 8008044:	4630      	mov	r0, r6
 8008046:	f7fe fed5 	bl	8006df4 <_malloc_r>
 800804a:	b948      	cbnz	r0, 8008060 <__smakebuf_r+0x46>
 800804c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008050:	059a      	lsls	r2, r3, #22
 8008052:	d4ee      	bmi.n	8008032 <__smakebuf_r+0x18>
 8008054:	f023 0303 	bic.w	r3, r3, #3
 8008058:	f043 0302 	orr.w	r3, r3, #2
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	e7e2      	b.n	8008026 <__smakebuf_r+0xc>
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800806a:	81a3      	strh	r3, [r4, #12]
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	6020      	str	r0, [r4, #0]
 8008070:	b15b      	cbz	r3, 800808a <__smakebuf_r+0x70>
 8008072:	4630      	mov	r0, r6
 8008074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008078:	f000 f81e 	bl	80080b8 <_isatty_r>
 800807c:	b128      	cbz	r0, 800808a <__smakebuf_r+0x70>
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	f023 0303 	bic.w	r3, r3, #3
 8008084:	f043 0301 	orr.w	r3, r3, #1
 8008088:	81a3      	strh	r3, [r4, #12]
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	431d      	orrs	r5, r3
 800808e:	81a5      	strh	r5, [r4, #12]
 8008090:	e7cf      	b.n	8008032 <__smakebuf_r+0x18>
	...

08008094 <_fstat_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	2300      	movs	r3, #0
 8008098:	4d06      	ldr	r5, [pc, #24]	@ (80080b4 <_fstat_r+0x20>)
 800809a:	4604      	mov	r4, r0
 800809c:	4608      	mov	r0, r1
 800809e:	4611      	mov	r1, r2
 80080a0:	602b      	str	r3, [r5, #0]
 80080a2:	f7f9 fce5 	bl	8001a70 <_fstat>
 80080a6:	1c43      	adds	r3, r0, #1
 80080a8:	d102      	bne.n	80080b0 <_fstat_r+0x1c>
 80080aa:	682b      	ldr	r3, [r5, #0]
 80080ac:	b103      	cbz	r3, 80080b0 <_fstat_r+0x1c>
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	bd38      	pop	{r3, r4, r5, pc}
 80080b2:	bf00      	nop
 80080b4:	20000974 	.word	0x20000974

080080b8 <_isatty_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	2300      	movs	r3, #0
 80080bc:	4d05      	ldr	r5, [pc, #20]	@ (80080d4 <_isatty_r+0x1c>)
 80080be:	4604      	mov	r4, r0
 80080c0:	4608      	mov	r0, r1
 80080c2:	602b      	str	r3, [r5, #0]
 80080c4:	f7f9 fce3 	bl	8001a8e <_isatty>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_isatty_r+0x1a>
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_isatty_r+0x1a>
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	20000974 	.word	0x20000974

080080d8 <_init>:
 80080d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080da:	bf00      	nop
 80080dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080de:	bc08      	pop	{r3}
 80080e0:	469e      	mov	lr, r3
 80080e2:	4770      	bx	lr

080080e4 <_fini>:
 80080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e6:	bf00      	nop
 80080e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ea:	bc08      	pop	{r3}
 80080ec:	469e      	mov	lr, r3
 80080ee:	4770      	bx	lr
